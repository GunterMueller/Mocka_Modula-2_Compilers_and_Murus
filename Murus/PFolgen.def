DEFINITION MODULE PFolgen;

(* (c) Christian Maurer   v. 9. November 2006 *)

FROM SYSTEM IMPORT ADDRESS;
FROM Prozedurtypen IMPORT Praedikate, Relationen,
                          Bearbeitungen, bedingteBearbeitungen;

TYPE Objekte;
(* Persistente Folgen von Strömen beliebiger, aber fester Länge > 0, 
   die anhand ihres Namens im Dateisystem eindeutig identifizierbar sind
   (zur Definition von Strömen s. Folgen.def). 
   In jeder Folge ist entweder genau ein Strom der aktuelle Strom
   oder der aktuelle Strom ist undefiniert. *)

PROCEDURE initialisieren (VAR X: Objekte; n: CARDINAL);
(* Vor.: X ist nicht initialisiert. n > 0.
   Eff.: X ist initialisiert und leer und hat die Stromlänge n. 
         Der aktuelle Strom von X ist undefiniert. *)

PROCEDURE terminieren (VAR X: Objekte);
(* Vor.: X ist initialisiert.
   Eff.: X ist nicht initialisiert (also auch nicht definiert). *)

PROCEDURE Laenge (N: ARRAY OF CHAR): CARDINAL;
(* Vor.: X ist initialisiert, aber noch nicht definiert.
   Eff.: Liefert die Anzahl der Zeichen in der Datei mit dem Namen N,
         wenn es eine solche Datei gibt, andernfalls 0. *)

PROCEDURE definieren (X: Objekte; N: ARRAY OF CHAR);
(* Vor.: X ist initialisiert. 
         N ist ein im Betriebssystem gültiger Dateiname. 
   Eff.: X ist mit dem Namen N definiert, d.h. X stimmt mit 
         dem Objekt überin, das als letztes mit N definiert war, 
         wenn es ein solches gibt; andernfalls ist X leer. *)
(*
PROCEDURE definiert (N: ARRAY OF CHAR): BOOLEAN;
(* Bem.: Die Verwendung der Prozedur wird mißbilligt. Sie ist durch
         die neu aufgenommene Prozedur "Laenge" überflüssig geworden
         und nur noch aus Kompatibilitätsgründen in Murus enthalten.
   Vor.: X ist initialisiert.
   Eff.: Liefert genau dann TRUE, 
         wenn es eine nichtleere Datei mit dem Namen N gibt. *)
*)
PROCEDURE redefinieren (X: Objekte; N: ARRAY OF CHAR);
(* Vor.: X ist definiert. 
         N ist ein im Betriebssystem gültiger Dateiname. 
         Es gibt keine Datei mit dem Namen N. 
   Eff.: X ist mit dem Namen N definiert. *)

PROCEDURE leer (X: Objekte): BOOLEAN;
(* Vor.: X ist definiert.
   Eff.: Liefert genau dann TRUE, wenn X keinen Strom enthält. *)

PROCEDURE leeren (X: Objekte);
(* Vor.: X ist definiert.
   Eff.: X ist leer. Der aktuelle Strom von X ist undefiniert. *)

PROCEDURE kopieren (X, X1: Objekte);
(* Vor.: X und X1 sind mit verschiedenem Namen definiert.
   Eff.: Wenn X und X1 nicht die gleiche Stromlänge haben, ist X1 leer, 
         sonst besteht X1 aus genau den gleichen Strömen wie X 
         in der gleichen Reihenfolge. X ist unverändert. 
         Der aktuelle Strom von X1 ist undefiniert. *)

PROCEDURE gleich (X, X1: Objekte): BOOLEAN;
(* Vor.: X und X1 sind definiert.
   Eff.: Liefert genau dann TRUE, wenn X und X1 mit gleichem Namen 
         definiert sind oder die gleiche Stromlänge haben und die 
         gleichen Ströme in der gleichen Reihenfolge enthalten. 
         Die aktuellen Ströme bleiben unberücksichtigt. *)

PROCEDURE aequivalent (X, X1: Objekte; R: Relationen): BOOLEAN;
(* Vor.: X und X1 sind definiert.
   Eff.: Liefert genau dann TRUE, wenn X und X1 mit gleichem Namen 
         definiert sind oder die gleiche Anzahl N von Strömen 
         enthalten und für jedes i von 0 bis N-1 gilt, daß die 
         i-ten Ströme von X und X1 unter R (in dieser Reihenfolge) 
         in Relation stehen. 
         Die aktuellen Ströme bleiben unberücksichtigt. *)

PROCEDURE Anzahl (X: Objekte): CARDINAL;
(* Vor.: X ist definiert und enthält <= MAX (CARDINAL) Ströme.
   Eff.: Liefert die Anzahl der Ströme in X. *) 
(*
PROCEDURE Anzahl1 (X: Objekte): CARDINAL;
(* Vor.: X ist definiert.
   Eff.: Liefert die Anzahl der Bytes in X. *) 
*)
PROCEDURE relativeAnzahl (X: Objekte; P: Praedikate): CARDINAL;
(* Vor.: X ist definiert.
   Eff.: Liefert die Anzahl der Ströne in X, auf die P zutrifft. *)

PROCEDURE enthalten (X: Objekte; A: ADDRESS): BOOLEAN;
(* Vor.: X ist definiert.
   Eff.: Liefert genau dann TRUE, wenn der Strom ab A der Stromlänge 
         von X in X enthalten ist. In diesem Fall ist der erste solche 
         Strom in X aktueller Strom von X, sonst ist der gleiche Strom
         wie vorher aktueller Strom von X. *)

PROCEDURE positionieren1 (X: Objekte; w: BOOLEAN);
(* Vor.: X ist definiert.
   Eff.: Wenn X leer ist, ist der aktuelle Strom undefiniert. Sonst 
         gilt: der aktuelle Strom von X ist der nach (für w = TRUE) 
         bzw. vor (für w = FALSE) dem aktuellen Strom vorher. 
         War der aktuelle Strom vorher der erste Strom aus X, 
         ist für w = FALSE nichts verändert; war er der letzte, 
         ist für w = TRUE der aktuelle Strom undefiniert. 
         War der aktuelle Strom von X vorher undefiniert, ist für 
         w = TRUE nichts verändert, für w = FALSE ist der letzte 
         Strom aus X aktueller Strom. *)

PROCEDURE positionieren (X: Objekte; i: CARDINAL);
(* Vor.: X ist definiert.
   Eff.: Wenn i < Anzahl (X) ist, ist der i-te Strom aus X aktueller 
         Strom, sonst ist der aktuelle Strom von X undefiniert. *)

PROCEDURE positioniert (X: Objekte): BOOLEAN;
(* Vor.: X ist definiert.
   Eff.: Liefert genau dann TRUE, wenn der aktuelle Strom von X 
         definiert ist. *)

PROCEDURE positioniert1 (X: Objekte; w: BOOLEAN): BOOLEAN;
(* Vor.: X ist definiert.
   Eff.: Liefert genau dann TRUE, wenn der aktuelle Strom von X 
         definiert und der letzte (für w = TRUE) bzw. der erste 
         (für w = FALSE) Strom in X ist. *)

PROCEDURE Position (X: Objekte): CARDINAL;
(* Vor.: X ist definiert.
   Eff.: Liefert die Position des aktuellen Stroms von X 
         (beginnend bei 0), wenn er definiert ist, 
         sonst die Anzahl der Ströme in X. *)

PROCEDURE lesen (X: Objekte; A: ADDRESS);
(* Vor.: X ist definiert. 
   Eff.: War der aktuelle Strom von X vorher undefiniert, ist nichts 
         verändert, sonst steht ab A der aktuelle Strom aus X. *)

PROCEDURE schreiben (X: Objekte; A: ADDRESS);
(* Vor.: X ist definiert.
   Eff.: War der aktuelle Strom von X vorher undefiniert, ist der 
         Strom ab A der Stromlänge von X hinter das Ende von X 
         angefügt und ist jetzt aktueller Strom von X. Andernfalls 
         ist der aktuelle Strom von X durch den Strom ab A ersetzt. *)

PROCEDURE einfuegen (X: Objekte; A: ADDRESS);
(* Vor.: X ist definiert.
   Eff.: War der aktuelle Strom von X vorher undefiniert, ist der 
         Strom ab A der Stromlänge von X hinter das Ende von X 
         angefügt, sonst ist er vor den aktuellen Strom eingefügt. 
         Anzahl und Reihenfolge der anderen Ströme in X 
         und aktueller Strom von X sind nicht beeinflußt. *)

PROCEDURE entfernen (X: Objekte);
(* Vor.: X ist definiert.
   Eff.: War der aktuelle Strom von X undefiniert, ist nichts 
         verändert. Sonst ist der alte aktuelle Strom aus X entfernt, 
         und der auf ihn folgende Strom aus X ist der aktuelle, 
         sofern der aktuelle Strom nicht der letzte Strom aus X war. 
         In diesem Fall ist der aktuelle Strom von X undefiniert. *) 

PROCEDURE existiert (X: Objekte; P: Praedikate; w: BOOLEAN): BOOLEAN;
(* Vor.: X ist definiert.
   Eff.: Liefert genau dann TRUE, wenn es einen Strom in X gibt, auf 
         den P zutrifft. In diesem Fall ist für w = TRUE der erste, 
         für w = FALSE der letzte solche Strom in X der aktuelle 
         Strom, andernfalls ist der aktuelle Strom von X der, der
         vorher aktuell war. *)

PROCEDURE lokalisieren (X: Objekte; P: Praedikate; w: BOOLEAN);
(* Vor.: X ist definiert.
   Eff.: Wenn es hinter (für w = TRUE) bzw. vor (für w = FALSE) dem 
         aktuellen Strom einen Strom in X gibt, auf den P zutrifft, 
         ist dies der aktuelle Strom. War der aktuelle Strom vorher 
         undefiniert, ist für w = TRUE der erste, für w = FALSE der 
         letzte Strom aus X, auf den P zutrifft, aktueller Strom, 
         falls es einen solchen gibt. In allen anderen Fällen ist
         der aktuelle Strom von X der, der vorher aktuell war. *)

PROCEDURE wahr (X: Objekte; P: Praedikate): BOOLEAN;
(* Vor.: X ist definiert.
   Eff.: Liefert genau dann TRUE, wenn P auf alle Ströme aus X 
         zutrifft (auch wenn X leer ist). 
         Aktueller Strom von X ist der, der vorher aktuell war. *)

PROCEDURE geordnet (X: Objekte; R: Relationen): BOOLEAN;
(* Vor.: X ist definiert.
   Eff.: Liefert genau dann TRUE, wenn X leer ist oder nur einen 
         Strom enthält oder die Eigenschaft hat, daß je zwei Ströme 
         ab A und A1 in X genau dann aufeinander folgen, wenn sie 
         unter R (in dieser Reihenfolge) in Relation stehen. *)

PROCEDURE einordnen (X: Objekte; A: ADDRESS; R: Relationen);
(* Vor.: X ist definiert.
         R ist eine Ordnung (reflexiv, transitiv und antisymmetrisch)
         oder eine strikte Ordnung (irreflexiv und transitiv).
   Eff.: Der Strom ab A der Stromlänge von X ist hinter den letzten 
         Strom aus X eingeordnet, der mit dem ab A unter R in Relation 
         steht. Ist R eine strikte Ordnung ("<"), ist nichts verändert, 
         ist R eine echte Ordnung ("<="), ist A ein weiteres Mal 
         in X enthalten, wenn A vorher schon in X enthalten war. 
         War X vorher bgzl. R geordnet, ist in beiden Fällen X 
         danach weiterhin bzgl. R geordnet. 
         Der aktuelle Strom von X ist der auf den eingeordneten 
         folgende, falls es einen solchen gibt, sonst undefiniert. *)

PROCEDURE traversieren (X: Objekte; B: Bearbeitungen);
(* Vor.: X ist definiert.
   Eff.: Auf alle Ströme in X ist (in ihrer Reihenfolge in X) 
         B angewandt. Aktueller Strom von X ist der, der vorher
         aktuell war. *)

PROCEDURE bedingtTraversieren (X: Objekte; P: Praedikate;
                                           B: bedingteBearbeitungen);
(* Vor.: X ist initialisiert.
   Eff.: Auf alle Ströme in X ist (in ihrer Reihenfolge in X) B(-, TRUE)
         angewandt, wenn P auf sie zutrifft, sonst B(-, FALSE) 
         (d.h. auf jeden Strom ab A in X ist B(A, P(A)) angewandt.
         Aktueller Strom von X ist der, der vorher aktuell war. *)

PROCEDURE relativTraversieren (X: Objekte; P: Praedikate; 
                                           B: Bearbeitungen);
(* Vor.: X ist definiert.
   Eff.: War der aktuelle Strom von X vorher undefiniert, ist nichts 
         verändert. Sonst ist auf alle Ströme in X (in ihrer 
         Reihenfolge in X), auf die P zutrifft, B angewandt. 
         Aktueller Strom von X ist der, der vorher aktuell war. *)

PROCEDURE partiellTraversieren (X: Objekte; P: Praedikate; 
                                            B: Bearbeitungen);
(* Vor.: X ist definiert.
   Eff.: War der aktuelle Strom von X vorher undefiniert, ist nichts 
         verändert. Sonst ist auf alle Ströme in X ab dem aktuellen
         Strom (in ihrer Reihenfolge in X) solange B angewandt,
         wie P auf sie zutrifft. Aktueller Strom von X ist der,
         der vorher aktuell war. *)

PROCEDURE filtrieren (X, X1: Objekte; P: Praedikate);
(* Vor.: X und X1 sind mit verschiedenen Namen definiert.
   Eff.: Wenn X und X1 nicht die gleiche Stromlänge haben, ist nichts 
         verändert, sonst besteht X1 genau aus allen Strömen aus X 
         (in ihrer Reihenfolge in X), auf die P zutrifft. Der 
         aktuelle Strom von X1 ist undefiniert. X ist unverändert. *)

PROCEDURE spalten (X, X1: Objekte);
(* Vor.: X und X1 sind mit verschiedenem Namen definiert.
   Eff.: Wenn X und X1 nicht die gleiche Stromlänge haben, 
         ist nichts verändert. Andernfalls gilt: 
         War der aktuelle Strom von X vorher undefiniert, ist 
         X unverändert und X1 leer; sonst enthalten X genau alle 
         Ströme vor dem vorherigen aktuellen Strom in X und 
         X1 genau alle Ströme ab dem vorherigen aktuellen Strom 
         in X, jeweils in ihrer vorherigen Reihenfolge in X. 
         In diesem Fall ist der aktuelle Strom von X undefiniert 
         und aktueller Strom von X1 ist der erste in X1. *)

PROCEDURE separieren (X, X1: Objekte; P: Praedikate);
(* Vor.: X und X1 sind mit verschiedenen Namen definiert.
   Eff.: Wenn X und X1 nicht die gleiche Stromlänge haben,
         ist nichts verändert. Andernfalls gilt:
         X1 besteht genau aus allen Strömen aus X 
         (in ihrer Reihenfolge in X), auf die P zutrifft. 
         Genau diese Ströme sind aus X entfernt. 
         Die aktuellen Ströme von X und X1 sind undefiniert. *)

PROCEDURE verketten (X, X1: Objekte);
(* Vor.: X und X1 sind mit verschiedenen Namen definiert.
   Eff.: Wenn X und X1 nicht die gleiche Stromlänge haben oder
         X1 leer war, ist nichts verändert. Andernfalls gilt:
         X besteht genau aus allen Strömen aus X vorher 
         (in ihrer Reihenfolge in X) und danach allen Strömen 
         aus X1 vorher (in ihrer Reihenfolge in X1).
         War der aktuelle Strom von X vorher undefiniert, ist
         jetzt der ehemals erste Strom aus X1 aktueller Strom von X,
         sonst ist aktueller Strom von X der, der vorher aktuell war.
         X1 ist leer mit undefiniertem aktuellen Strom. *)

PROCEDURE vereinigen (X, X1: Objekte; R: Relationen);
(* Vor.: X und X1 sind mit verschiedenen Namen definiert. 
         R ist eine strikte Ordnung ("<") und X und X1 sind 
         bezüglich R geordnet, ohne Ströme mehrfach zu enthalten, 
         oder R ist eine Ordnung ("<=").
   Eff.: Wenn X und X1 nicht die gleiche Stromlänge haben, ist nichts 
         verändert. Andernfalls besteht X genau aus allen Strömen 
         von X und X1 vorher. Ist R strikt ("<"), sind die Ströme, 
         die sowohl in X als auch in X1 vorkamen, nur einfach, 
         sonst ("<=") in ihrer Mehrfachheit in X enthalten. 
         X ist bezüglich R geordnet und X1 ist leer. 
         Die aktuellen Ströme von X und X1 sind undefiniert. *)

END PFolgen.
