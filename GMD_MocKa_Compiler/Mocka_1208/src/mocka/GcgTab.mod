  (**************************************************************) 
  (*   This module was generated by BEG V1.84        *)
  (*        GMD Forschunsstelle an der Universitaet Karlsruhe   *)
  (*        Vincenz-Priessnitz-Str. 1 76131 Karlsruhe Germany   *)
  (**************************************************************)
 IMPLEMENTATION MODULE GcgTab;
 FROM IR IMPORT Register, RegisterSet, Rule, MaxPscArity, NonTerminal;
 FROM IR      IMPORT OpCode;



 VAR  nt : NonTerminal;
 BEGIN
      RegDestroy [Regeax][0] := 
      { ORD (Regeax)-0};
      RegDestroy [Regebx][0] := 
      { ORD (Regebx)-0};
      RegDestroy [Regecx][0] := 
      { ORD (Regecx)-0};
      RegDestroy [Regedx][0] := 
      { ORD (Regedx)-0};
      RegDestroy [Regesi][0] := 
      { ORD (Regesi)-0};
      RegDestroy [Regedi][0] := 
      { ORD (Regedi)-0};
      RegDestroy [Regebp][0] := 
      { ORD (Regebp)-0};
      RegDestroy [Regesp][0] := 
      { ORD (Regesp)-0};
      RegDestroy [Regst][0] := 
      { ORD (Regst)-0};
      RegDestroy [Regst1][0] := 
      { ORD (Regst1)-0};

 (*   RULE 219/332  *)
   WITH RuleDescr [219] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 0;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 332;
     scrnum := 0;
  END;
 (*   RULE 233/336  *)
   WITH RuleDescr [233] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSymPlusOffset;
           path := 0;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 336;
     scrnum := 0;
  END;
 (*   RULE 232/341  *)
   WITH RuleDescr [232] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 0;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 341;
     scrnum := 0;
  END;
 (*   RULE 231/347  *)
   WITH RuleDescr [231] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 0;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 347;
     scrnum := 0;
  END;
 (*   RULE 242/357  *)
   WITH RuleDescr [242] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 0;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 357;
     scrnum := 0;
  END;
 (*   RULE 241/363  *)
   WITH RuleDescr [241] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 0;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 363;
     scrnum := 0;
  END;
 (*   RULE 258/373  *)
   WITH RuleDescr [258] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegPlusSymPlusOffset;
           path := 0;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 373;
     scrnum := 0;
  END;
 (*   RULE 257/382  *)
   WITH RuleDescr [257] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntOffsetPlusIndexMultFaktor;
           path := 0;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 382;
     scrnum := 0;
  END;
 (*   RULE 267/391  *)
   WITH RuleDescr [267] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 0;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 391;
     scrnum := 0;
  END;
 (*   RULE 269/397  *)
   WITH RuleDescr [269] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 0;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 397;
     scrnum := 0;
  END;
 (*   RULE 268/403  *)
   WITH RuleDescr [268] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntCMem;
           path := 0;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 403;
     scrnum := 0;
  END;
 (*   RULE 271/409  *)
   WITH RuleDescr [271] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegOrCMem;
           path := 0;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 409;
     scrnum := 0;
  END;
 (*   RULE 266/418  *)
   WITH RuleDescr [266] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 0;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 418;
     scrnum := 0;
  END;
 (*   RULE 270/424  *)
   WITH RuleDescr [270] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 0;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 424;
     scrnum := 0;
  END;
 (*   RULE 136/430  *)
   WITH RuleDescr [136] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 0;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 430;
     scrnum := 0;
  END;
 (*   RULE 135/445  *)
   WITH RuleDescr [135] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegOrCMemOrIm;
           path := 0;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 445;
     scrnum := 0;
  END;
 (*   RULE 265/452  *)
   WITH RuleDescr [265] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntFloatConstant;
           path := 0;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 452;
     scrnum := 0;
  END;
 (*   RULE 264/471  *)
   WITH RuleDescr [264] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntFloatConstant;
           path := 0;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 471;
     scrnum := 0;
  END;
 (*   RULE 169/490  *)
   WITH RuleDescr [169] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntCMem;
           path := 0;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 490;
     scrnum := 0;
  END;
 (*   RULE 170/497  *)
   WITH RuleDescr [170] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regst1)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 0;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 497;
     scrnum := 0;
  END;
 (*   RULE 193/507  *)
   WITH RuleDescr [193] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 507;
     scrnum := 0;
  END;
 (*   RULE 192/511  *)
   WITH RuleDescr [192] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 511;
     scrnum := 0;
  END;
 (*   RULE 191/515  *)
   WITH RuleDescr [191] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 515;
     scrnum := 0;
  END;
 (*   RULE 190/519  *)
   WITH RuleDescr [190] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 519;
     scrnum := 0;
  END;
 (*   RULE 200/523  *)
   WITH RuleDescr [200] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 523;
     scrnum := 0;
  END;
 (*   RULE 199/527  *)
   WITH RuleDescr [199] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 527;
     scrnum := 0;
  END;
 (*   RULE 189/531  *)
   WITH RuleDescr [189] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 531;
     scrnum := 0;
  END;
 (*   RULE 188/535  *)
   WITH RuleDescr [188] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 535;
     scrnum := 0;
  END;
 (*   RULE 187/540  *)
   WITH RuleDescr [187] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 540;
     scrnum := 0;
  END;
 (*   RULE 186/544  *)
   WITH RuleDescr [186] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 544;
     scrnum := 0;
  END;
 (*   RULE 218/548  *)
   WITH RuleDescr [218] DO
           register := RKAdrmode;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 548;
     scrnum := 0;
  END;
 (*   RULE 217/552  *)
   WITH RuleDescr [217] DO
           register := RKAdrmode;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 552;
     scrnum := 0;
  END;
 (*   RULE 211/559  *)
   WITH RuleDescr [211] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 559;
     scrnum := 0;
  END;
 (*   RULE 230/571  *)
   WITH RuleDescr [230] DO
           register := RKAdrmode;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 571;
     scrnum := 0;
  END;
 (*   RULE 210/579  *)
   WITH RuleDescr [210] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 579;
     scrnum := 0;
  END;
 (*   RULE 216/591  *)
   WITH RuleDescr [216] DO
           register := RKAdrmode;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 591;
     scrnum := 0;
  END;
 (*   RULE 134/620  *)
   WITH RuleDescr [134] DO
           register := RKRegister;
     pscarity := 0;
     resregs   [0]  := { ORD (Regebp)-0};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 620;
     scrnum := 0;
  END;
 (*   RULE 263/624  *)
   WITH RuleDescr [263] DO
           register := RKAdrmode;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 624;
     scrnum := 0;
  END;
 (*   RULE 209/634  *)
   WITH RuleDescr [209] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 634;
     scrnum := 0;
  END;
 (*   RULE 208/634  *)
   WITH RuleDescr [208] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 634;
     scrnum := 0;
  END;
 (*   RULE 262/689  *)
   WITH RuleDescr [262] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 689;
     scrnum := 0;
  END;
 (*   RULE 1/696  *)
   WITH RuleDescr [1] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 696;
     scrnum := 0;
  END;
 (*   RULE 2/701  *)
   WITH RuleDescr [2] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 701;
     scrnum := 0;
  END;
 (*   RULE 3/709  *)
   WITH RuleDescr [3] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntFloatConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 709;
     scrnum := 0;
  END;
 (*   RULE 4/717  *)
   WITH RuleDescr [4] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntFloatConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 717;
     scrnum := 0;
  END;
 (*   RULE 5/727  *)
   WITH RuleDescr [5] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntCMem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 727;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 6/736  *)
   WITH RuleDescr [6] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntCMem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 736;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 7/749  *)
   WITH RuleDescr [7] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 18;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 749;
     scrnum := 0;
  END;
 (*   RULE 8/773  *)
   WITH RuleDescr [8] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := { ORD (Regecx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntmem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 773;
     scrnum := 0;
  END;
 (*   RULE 9/807  *)
   WITH RuleDescr [9] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntmem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 807;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 10/838  *)
   WITH RuleDescr [10] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 838;
     scrnum := 0;
  END;
 (*   RULE 11/842  *)
   WITH RuleDescr [11] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 842;
     scrnum := 0;
  END;
 (*   RULE 12/846  *)
   WITH RuleDescr [12] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 846;
     scrnum := 0;
  END;
 (*   RULE 13/850  *)
   WITH RuleDescr [13] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 850;
     scrnum := 0;
  END;
 (*   RULE 14/865  *)
   WITH RuleDescr [14] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 865;
     scrnum := 0;
  END;
 (*   RULE 15/882  *)
   WITH RuleDescr [15] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 882;
     scrnum := 0;
  END;
 (*   RULE 16/889  *)
   WITH RuleDescr [16] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegOrCMemOrIm;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 889;
     scrnum := 0;
  END;
 (*   RULE 17/892  *)
   WITH RuleDescr [17] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegOrCMemOrIm;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 892;
     scrnum := 0;
  END;
 (*   RULE 185/898  *)
   WITH RuleDescr [185] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 898;
     scrnum := 0;
  END;
 (*   RULE 133/902  *)
   WITH RuleDescr [133] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 902;
     scrnum := 0;
  END;
 (*   RULE 184/910  *)
   WITH RuleDescr [184] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 910;
     scrnum := 0;
  END;
 (*   RULE 132/922  *)
   WITH RuleDescr [132] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 922;
     scrnum := 0;
  END;
 (*   RULE 183/935  *)
   WITH RuleDescr [183] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 935;
     scrnum := 0;
  END;
 (*   RULE 215/939  *)
   WITH RuleDescr [215] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSymPlusOffset;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 939;
     scrnum := 0;
  END;
 (*   RULE 214/939  *)
   WITH RuleDescr [214] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSymPlusOffset;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 939;
     scrnum := 0;
  END;
 (*   RULE 229/943  *)
   WITH RuleDescr [229] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntSymPlusOffset;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 943;
     scrnum := 0;
  END;
 (*   RULE 228/943  *)
   WITH RuleDescr [228] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSymPlusOffset;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 943;
     scrnum := 0;
  END;
 (*   RULE 227/949  *)
   WITH RuleDescr [227] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntSymPlusOffset;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 949;
     scrnum := 0;
  END;
 (*   RULE 226/949  *)
   WITH RuleDescr [226] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSymPlusOffset;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 949;
     scrnum := 0;
  END;
 (*   RULE 225/959  *)
   WITH RuleDescr [225] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegPlusSymPlusOffset;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 959;
     scrnum := 0;
  END;
 (*   RULE 224/959  *)
   WITH RuleDescr [224] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegPlusSymPlusOffset;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 959;
     scrnum := 0;
  END;
 (*   RULE 240/964  *)
   WITH RuleDescr [240] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntOffsetPlusIndexMultFaktor;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 964;
     scrnum := 0;
  END;
 (*   RULE 239/964  *)
   WITH RuleDescr [239] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntOffsetPlusIndexMultFaktor;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 964;
     scrnum := 0;
  END;
 (*   RULE 256/970  *)
   WITH RuleDescr [256] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegPlusSymPlusOffset;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntOffsetPlusIndexMultFaktor;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 970;
     scrnum := 0;
  END;
 (*   RULE 255/970  *)
   WITH RuleDescr [255] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntOffsetPlusIndexMultFaktor;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegPlusSymPlusOffset;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 970;
     scrnum := 0;
  END;
 (*   RULE 254/979  *)
   WITH RuleDescr [254] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntmem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 979;
     scrnum := 0;
  END;
 (*   RULE 253/979  *)
   WITH RuleDescr [253] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 979;
     scrnum := 0;
  END;
 (*   RULE 207/988  *)
   WITH RuleDescr [207] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 988;
     scrnum := 0;
  END;
 (*   RULE 206/988  *)
   WITH RuleDescr [206] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 988;
     scrnum := 0;
  END;
 (*   RULE 131/993  *)
   WITH RuleDescr [131] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegOrCMemOrIm;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 993;
     scrnum := 0;
  END;
 (*   RULE 130/993  *)
   WITH RuleDescr [130] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 993;
     scrnum := 0;
  END;
 (*   RULE 18/999  *)
   WITH RuleDescr [18] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 18;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntSimpleVariable;
           path := 290;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 999;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 19/999  *)
   WITH RuleDescr [19] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 274;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntConstant;
           path := 34;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 999;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 20/1013  *)
   WITH RuleDescr [20] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrIm;
           path := 18;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntSimpleVariable;
           path := 290;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1013;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 21/1013  *)
   WITH RuleDescr [21] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 274;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntRegOrIm;
           path := 34;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1013;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 22/1026  *)
   WITH RuleDescr [22] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 274;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntSimpleVariable;
           path := 290;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1026;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 182/1041  *)
   WITH RuleDescr [182] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1041;
     scrnum := 0;
  END;
 (*   RULE 213/1045  *)
   WITH RuleDescr [213] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSymPlusOffset;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1045;
     scrnum := 0;
  END;
 (*   RULE 223/1049  *)
   WITH RuleDescr [223] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1049;
     scrnum := 0;
  END;
 (*   RULE 222/1055  *)
   WITH RuleDescr [222] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1055;
     scrnum := 0;
  END;
 (*   RULE 221/1065  *)
   WITH RuleDescr [221] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegPlusSymPlusOffset;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1065;
     scrnum := 0;
  END;
 (*   RULE 238/1070  *)
   WITH RuleDescr [238] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntOffsetPlusIndexMultFaktor;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1070;
     scrnum := 0;
  END;
 (*   RULE 252/1076  *)
   WITH RuleDescr [252] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1076;
     scrnum := 0;
  END;
 (*   RULE 205/1085  *)
   WITH RuleDescr [205] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1085;
     scrnum := 0;
  END;
 (*   RULE 129/1090  *)
   WITH RuleDescr [129] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1090;
     scrnum := 0;
  END;
 (*   RULE 23/1096  *)
   WITH RuleDescr [23] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 274;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntConstant;
           path := 34;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1096;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 24/1110  *)
   WITH RuleDescr [24] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 274;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntRegOrIm;
           path := 34;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1110;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 181/1123  *)
   WITH RuleDescr [181] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 17;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 18;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1123;
     scrnum := 0;
  END;
 (*   RULE 180/1131  *)
   WITH RuleDescr [180] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1131;
     scrnum := 0;
  END;
 (*   RULE 179/1135  *)
   WITH RuleDescr [179] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1135;
     scrnum := 0;
  END;
 (*   RULE 178/1135  *)
   WITH RuleDescr [178] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegOrCMemOrIm;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1135;
     scrnum := 0;
  END;
 (*   RULE 128/1140  *)
   WITH RuleDescr [128] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1140;
     scrnum := 0;
  END;
 (*   RULE 127/1140  *)
   WITH RuleDescr [127] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1140;
     scrnum := 0;
  END;
 (*   RULE 25/1145  *)
   WITH RuleDescr [25] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 18;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntSimpleVariable;
           path := 290;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1145;
     scrnum := 0;
  END;
 (*   RULE 26/1145  *)
   WITH RuleDescr [26] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 274;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntConstant;
           path := 34;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1145;
     scrnum := 0;
  END;
 (*   RULE 126/1153  *)
   WITH RuleDescr [126] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1153;
     scrnum := 0;
  END;
 (*   RULE 125/1153  *)
   WITH RuleDescr [125] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1153;
     scrnum := 0;
  END;
 (*   RULE 124/1160  *)
   WITH RuleDescr [124] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1160;
     scrnum := 0;
  END;
 (*   RULE 123/1160  *)
   WITH RuleDescr [123] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1160;
     scrnum := 0;
  END;
 (*   RULE 237/1170  *)
   WITH RuleDescr [237] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntOffsetPlusIndexMultFaktor;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1170;
     scrnum := 0;
  END;
 (*   RULE 236/1170  *)
   WITH RuleDescr [236] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntOffsetPlusIndexMultFaktor;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1170;
     scrnum := 0;
  END;
 (*   RULE 251/1179  *)
   WITH RuleDescr [251] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntOffsetPlusIndexMultFaktor;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1179;
     scrnum := 0;
  END;
 (*   RULE 250/1179  *)
   WITH RuleDescr [250] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntOffsetPlusIndexMultFaktor;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1179;
     scrnum := 0;
  END;
 (*   RULE 204/1190  *)
   WITH RuleDescr [204] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 17;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 4385;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntSimpleVariable;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1190;
     scrnum := 0;
  END;
 (*   RULE 203/1190  *)
   WITH RuleDescr [203] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 4369;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 33;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntSimpleVariable;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1190;
     scrnum := 0;
  END;
 (*   RULE 202/1190  *)
   WITH RuleDescr [202] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 18;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntSimpleVariable;
           path := 4386;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1190;
     scrnum := 0;
  END;
 (*   RULE 201/1190  *)
   WITH RuleDescr [201] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 4370;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntConstant;
           path := 34;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1190;
     scrnum := 0;
  END;
 (*   RULE 122/1206  *)
   WITH RuleDescr [122] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1206;
     scrnum := 0;
  END;
 (*   RULE 121/1206  *)
   WITH RuleDescr [121] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1206;
     scrnum := 0;
  END;
 (*   RULE 27/1214  *)
   WITH RuleDescr [27] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 18;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntSimpleVariable;
           path := 290;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1214;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 28/1214  *)
   WITH RuleDescr [28] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 274;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntConstant;
           path := 34;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1214;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 249/1229  *)
   WITH RuleDescr [249] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1229;
     scrnum := 0;
  END;
 (*   RULE 248/1229  *)
   WITH RuleDescr [248] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1229;
     scrnum := 0;
  END;
 (*   RULE 247/1244  *)
   WITH RuleDescr [247] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1244;
     scrnum := 0;
  END;
 (*   RULE 246/1244  *)
   WITH RuleDescr [246] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1244;
     scrnum := 0;
  END;
 (*   RULE 245/1259  *)
   WITH RuleDescr [245] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1259;
     scrnum := 0;
  END;
 (*   RULE 244/1259  *)
   WITH RuleDescr [244] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1259;
     scrnum := 0;
  END;
 (*   RULE 120/1274  *)
   WITH RuleDescr [120] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegOrCMemOrIm;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1274;
     scrnum := 0;
  END;
 (*   RULE 119/1274  *)
   WITH RuleDescr [119] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1274;
     scrnum := 0;
  END;
 (*   RULE 118/1281  *)
   WITH RuleDescr [118] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegOrCMem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1281;
     scrnum := 0;
  END;
 (*   RULE 117/1281  *)
   WITH RuleDescr [117] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1281;
     scrnum := 0;
  END;
 (*   RULE 116/1287  *)
   WITH RuleDescr [116] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 17;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 18;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1287;
     scrnum := 0;
  END;
 (*   RULE 29/1300  *)
   WITH RuleDescr [29] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 274;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntSimpleVariable;
           path := 290;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1300;
     scrnum := 2;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
     scrrs [2] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 115/1317  *)
   WITH RuleDescr [115] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0};
     changeregs[0]  := { ORD (Regedx)-0};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1317;
     scrnum := 0;
  END;
 (*   RULE 177/1338  *)
   WITH RuleDescr [177] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1338;
     scrnum := 0;
  END;
 (*   RULE 114/1343  *)
   WITH RuleDescr [114] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1343;
     scrnum := 0;
  END;
 (*   RULE 113/1349  *)
   WITH RuleDescr [113] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1349;
     scrnum := 0;
  END;
 (*   RULE 235/1354  *)
   WITH RuleDescr [235] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntOffsetPlusIndexMultFaktor;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1354;
     scrnum := 0;
  END;
 (*   RULE 112/1365  *)
   WITH RuleDescr [112] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1365;
     scrnum := 0;
  END;
 (*   RULE 30/1373  *)
   WITH RuleDescr [30] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 274;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntConstant;
           path := 34;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1373;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 111/1388  *)
   WITH RuleDescr [111] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1388;
     scrnum := 0;
  END;
 (*   RULE 31/1396  *)
   WITH RuleDescr [31] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 274;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntConstant;
           path := 34;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1396;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 176/1411  *)
   WITH RuleDescr [176] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 17;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 18;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1411;
     scrnum := 0;
  END;
 (*   RULE 110/1419  *)
   WITH RuleDescr [110] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0};
     changeregs[0]  := { ORD (Regedx)-0};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1419;
     scrnum := 0;
  END;
 (*   RULE 109/1431  *)
   WITH RuleDescr [109] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0};
     changeregs[0]  := { ORD (Regedx)-0};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1431;
     scrnum := 0;
  END;
 (*   RULE 108/1443  *)
   WITH RuleDescr [108] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0};
     changeregs[0]  := { ORD (Regedx)-0};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1443;
     scrnum := 0;
  END;
 (*   RULE 175/1455  *)
   WITH RuleDescr [175] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1455;
     scrnum := 0;
  END;
 (*   RULE 107/1460  *)
   WITH RuleDescr [107] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1460;
     scrnum := 0;
  END;
 (*   RULE 32/1467  *)
   WITH RuleDescr [32] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 274;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntConstant;
           path := 34;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1467;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 106/1481  *)
   WITH RuleDescr [106] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regedx)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1481;
     scrnum := 0;
  END;
 (*   RULE 105/1492  *)
   WITH RuleDescr [105] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regedx)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1492;
     scrnum := 0;
  END;
 (*   RULE 104/1503  *)
   WITH RuleDescr [104] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regedx)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1503;
     scrnum := 0;
  END;
 (*   RULE 168/1517  *)
   WITH RuleDescr [168] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1517;
     scrnum := 0;
  END;
 (*   RULE 167/1522  *)
   WITH RuleDescr [167] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntCMem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1522;
     scrnum := 0;
  END;
 (*   RULE 166/1522  *)
   WITH RuleDescr [166] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
        WITH op[2] DO 
           nt   := ntCMem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1522;
     scrnum := 0;
  END;
 (*   RULE 165/1527  *)
   WITH RuleDescr [165] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfstack;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst1)-0};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1527;
     scrnum := 0;
  END;
 (*   RULE 164/1527  *)
   WITH RuleDescr [164] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
        WITH op[2] DO 
           nt   := ntfstack;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst1)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1527;
     scrnum := 0;
  END;
 (*   RULE 163/1532  *)
   WITH RuleDescr [163] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
        WITH op[2] DO 
           nt   := ntCMem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1532;
     scrnum := 0;
  END;
 (*   RULE 162/1537  *)
   WITH RuleDescr [162] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntCMem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1537;
     scrnum := 0;
  END;
 (*   RULE 161/1542  *)
   WITH RuleDescr [161] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfstack;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst1)-0};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1542;
     scrnum := 0;
  END;
 (*   RULE 160/1547  *)
   WITH RuleDescr [160] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
        WITH op[2] DO 
           nt   := ntfstack;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst1)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1547;
     scrnum := 0;
  END;
 (*   RULE 159/1552  *)
   WITH RuleDescr [159] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntCMem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1552;
     scrnum := 0;
  END;
 (*   RULE 158/1552  *)
   WITH RuleDescr [158] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
        WITH op[2] DO 
           nt   := ntCMem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1552;
     scrnum := 0;
  END;
 (*   RULE 157/1557  *)
   WITH RuleDescr [157] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfstack;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst1)-0};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1557;
     scrnum := 0;
  END;
 (*   RULE 156/1557  *)
   WITH RuleDescr [156] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
        WITH op[2] DO 
           nt   := ntfstack;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst1)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1557;
     scrnum := 0;
  END;
 (*   RULE 155/1562  *)
   WITH RuleDescr [155] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
        WITH op[2] DO 
           nt   := ntCMem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1562;
     scrnum := 0;
  END;
 (*   RULE 154/1567  *)
   WITH RuleDescr [154] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntCMem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1567;
     scrnum := 0;
  END;
 (*   RULE 153/1572  *)
   WITH RuleDescr [153] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfstack;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst1)-0};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1572;
     scrnum := 0;
  END;
 (*   RULE 152/1577  *)
   WITH RuleDescr [152] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
        WITH op[2] DO 
           nt   := ntfstack;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst1)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1577;
     scrnum := 0;
  END;
 (*   RULE 151/1582  *)
   WITH RuleDescr [151] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1582;
     scrnum := 0;
  END;
 (*   RULE 103/1590  *)
   WITH RuleDescr [103] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegOrCMemOrIm;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1590;
     scrnum := 0;
  END;
 (*   RULE 102/1590  *)
   WITH RuleDescr [102] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1590;
     scrnum := 0;
  END;
 (*   RULE 33/1596  *)
   WITH RuleDescr [33] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrIm;
           path := 18;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntSimpleVariable;
           path := 290;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1596;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 34/1596  *)
   WITH RuleDescr [34] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 274;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntRegOrIm;
           path := 34;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1596;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 101/1609  *)
   WITH RuleDescr [101] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegOrCMemOrIm;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1609;
     scrnum := 0;
  END;
 (*   RULE 100/1618  *)
   WITH RuleDescr [100] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1618;
     scrnum := 0;
  END;
 (*   RULE 35/1626  *)
   WITH RuleDescr [35] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 274;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntreg;
           path := 34;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1626;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 36/1640  *)
   WITH RuleDescr [36] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 274;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntConstant;
           path := 34;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1640;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 99/1653  *)
   WITH RuleDescr [99] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegOrCMemOrIm;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1653;
     scrnum := 0;
  END;
 (*   RULE 98/1653  *)
   WITH RuleDescr [98] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1653;
     scrnum := 0;
  END;
 (*   RULE 37/1659  *)
   WITH RuleDescr [37] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrIm;
           path := 18;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntSimpleVariable;
           path := 290;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1659;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 38/1659  *)
   WITH RuleDescr [38] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 274;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntRegOrIm;
           path := 34;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1659;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 97/1672  *)
   WITH RuleDescr [97] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegOrCMemOrIm;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1672;
     scrnum := 0;
  END;
 (*   RULE 96/1672  *)
   WITH RuleDescr [96] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1672;
     scrnum := 0;
  END;
 (*   RULE 39/1678  *)
   WITH RuleDescr [39] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrIm;
           path := 18;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntSimpleVariable;
           path := 290;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1678;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 40/1678  *)
   WITH RuleDescr [40] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 274;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntRegOrIm;
           path := 34;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1678;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 95/1695  *)
   WITH RuleDescr [95] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1695;
     scrnum := 0;
  END;
 (*   RULE 94/1701  *)
   WITH RuleDescr [94] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntRegOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1701;
     scrnum := 0;
  END;
 (*   RULE 93/1707  *)
   WITH RuleDescr [93] DO
           register := RKRegister;
     pscarity := 3;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntConstant;
           path := 3;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1707;
     scrnum := 0;
  END;
 (*   RULE 92/1713  *)
   WITH RuleDescr [92] DO
           register := RKRegister;
     pscarity := 3;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntreg;
           path := 3;              calc := FALSE;

           regs[0] := { ORD (Regecx)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1713;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 91/1735  *)
   WITH RuleDescr [91] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1735;
     scrnum := 0;
  END;
 (*   RULE 150/1748  *)
   WITH RuleDescr [150] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntCMem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1748;
     scrnum := 0;
  END;
 (*   RULE 149/1760  *)
   WITH RuleDescr [149] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1760;
     scrnum := 0;
  END;
 (*   RULE 198/1774  *)
   WITH RuleDescr [198] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1774;
     scrnum := 0;
  END;
 (*   RULE 174/1778  *)
   WITH RuleDescr [174] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntFloatConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1778;
     scrnum := 0;
  END;
 (*   RULE 90/1785  *)
   WITH RuleDescr [90] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := { ORD (Regeax)-0};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1785;
     scrnum := 0;
  END;
 (*   RULE 41/1804  *)
   WITH RuleDescr [41] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := { ORD (Regeax)-0};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 18;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1804;
     scrnum := 0;
  END;
 (*   RULE 173/1823  *)
   WITH RuleDescr [173] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1823;
     scrnum := 0;
  END;
 (*   RULE 212/1828  *)
   WITH RuleDescr [212] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSymPlusOffset;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1828;
     scrnum := 0;
  END;
 (*   RULE 220/1834  *)
   WITH RuleDescr [220] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegPlusSymPlusOffset;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1834;
     scrnum := 0;
  END;
 (*   RULE 234/1841  *)
   WITH RuleDescr [234] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntOffsetPlusIndexMultFaktor;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1841;
     scrnum := 0;
  END;
 (*   RULE 243/1848  *)
   WITH RuleDescr [243] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1848;
     scrnum := 0;
  END;
 (*   RULE 261/1859  *)
   WITH RuleDescr [261] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntCMem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1859;
     scrnum := 0;
  END;
 (*   RULE 89/1868  *)
   WITH RuleDescr [89] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegOrCMem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1868;
     scrnum := 0;
  END;
 (*   RULE 88/1881  *)
   WITH RuleDescr [88] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1881;
     scrnum := 0;
  END;
 (*   RULE 197/1887  *)
   WITH RuleDescr [197] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1887;
     scrnum := 0;
  END;
 (*   RULE 196/1892  *)
   WITH RuleDescr [196] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntFloatConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1892;
     scrnum := 0;
  END;
 (*   RULE 148/1897  *)
   WITH RuleDescr [148] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1897;
     scrnum := 0;
  END;
 (*   RULE 260/1901  *)
   WITH RuleDescr [260] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1901;
     scrnum := 0;
  END;
 (*   RULE 259/1917  *)
   WITH RuleDescr [259] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegOrIm;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1917;
     scrnum := 0;
  END;
 (*   RULE 87/1941  *)
   WITH RuleDescr [87] DO
           register := RKRegister;
     pscarity := 3;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntConstant;
           path := 3;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1941;
     scrnum := 0;
  END;
 (*   RULE 86/1946  *)
   WITH RuleDescr [86] DO
           register := RKRegister;
     pscarity := 3;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntConstant;
           path := 3;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1946;
     scrnum := 0;
  END;
 (*   RULE 85/1974  *)
   WITH RuleDescr [85] DO
           register := RKRegister;
     pscarity := 3;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntRegOrCMemOrIm;
           path := 3;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1974;
     scrnum := 0;
  END;
 (*   RULE 84/1987  *)
   WITH RuleDescr [84] DO
           register := RKRegister;
     pscarity := 3;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntRegOrCMemOrIm;
           path := 3;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1987;
     scrnum := 0;
  END;
 (*   RULE 147/2010  *)
   WITH RuleDescr [147] DO
           register := RKRegister;
     pscarity := 3;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := { ORD (Regeax)-0};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
        WITH op[2] DO 
           nt   := ntCMem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntCMem;
           path := 3;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2010;
     scrnum := 0;
  END;
 (*   RULE 83/2039  *)
   WITH RuleDescr [83] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2039;
     scrnum := 0;
  END;
 (*   RULE 82/2047  *)
   WITH RuleDescr [82] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntCMem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2047;
     scrnum := 0;
  END;
 (*   RULE 81/2055  *)
   WITH RuleDescr [81] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2055;
     scrnum := 0;
  END;
 (*   RULE 80/2063  *)
   WITH RuleDescr [80] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0};
     changeregs[0]  := { ORD (Regeax)-0};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
        WITH op[2] DO 
           nt   := ntCMem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2063;
     scrnum := 0;
  END;
 (*   RULE 79/2075  *)
   WITH RuleDescr [79] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0};
     changeregs[0]  := { ORD (Regeax)-0};
        WITH op[1] DO 
           nt   := ntCMem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2075;
     scrnum := 0;
  END;
 (*   RULE 78/2087  *)
   WITH RuleDescr [78] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0};
     changeregs[0]  := { ORD (Regeax)-0};
        WITH op[1] DO 
           nt   := ntfstack;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst1)-0};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2087;
     scrnum := 0;
  END;
 (*   RULE 77/2105  *)
   WITH RuleDescr [77] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2105;
     scrnum := 0;
  END;
 (*   RULE 76/2114  *)
   WITH RuleDescr [76] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2114;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 75/2146  *)
   WITH RuleDescr [75] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegOrIm;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2146;
     scrnum := 0;
  END;
 (*   RULE 74/2158  *)
   WITH RuleDescr [74] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2158;
     scrnum := 0;
  END;
 (*   RULE 42/2171  *)
   WITH RuleDescr [42] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2171;
     scrnum := 0;
  END;
 (*   RULE 43/2178  *)
   WITH RuleDescr [43] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2178;
     scrnum := 0;
  END;
 (*   RULE 44/2185  *)
   WITH RuleDescr [44] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2185;
     scrnum := 0;
  END;
 (*   RULE 45/2206  *)
   WITH RuleDescr [45] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2206;
     scrnum := 0;
  END;
 (*   RULE 46/2215  *)
   WITH RuleDescr [46] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntCMem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2215;
     scrnum := 0;
  END;
 (*   RULE 47/2224  *)
   WITH RuleDescr [47] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2224;
     scrnum := 0;
  END;
 (*   RULE 48/2232  *)
   WITH RuleDescr [48] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntCMem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2232;
     scrnum := 0;
  END;
 (*   RULE 49/2240  *)
   WITH RuleDescr [49] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2240;
     scrnum := 0;
  END;
 (*   RULE 50/2248  *)
   WITH RuleDescr [50] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := { ORD (Regeax)-0};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
        WITH op[2] DO 
           nt   := ntCMem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2248;
     scrnum := 0;
  END;
 (*   RULE 51/2260  *)
   WITH RuleDescr [51] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := { ORD (Regeax)-0};
        WITH op[1] DO 
           nt   := ntCMem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2260;
     scrnum := 0;
  END;
 (*   RULE 52/2272  *)
   WITH RuleDescr [52] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := { ORD (Regeax)-0};
        WITH op[1] DO 
           nt   := ntfstack;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst1)-0};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2272;
     scrnum := 0;
  END;
 (*   RULE 53/2290  *)
   WITH RuleDescr [53] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2290;
     scrnum := 0;
  END;
 (*   RULE 54/2299  *)
   WITH RuleDescr [54] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2299;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 55/2331  *)
   WITH RuleDescr [55] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegOrIm;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2331;
     scrnum := 0;
  END;
 (*   RULE 56/2343  *)
   WITH RuleDescr [56] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2343;
     scrnum := 0;
  END;
 (*   RULE 278/2416  *)
   WITH RuleDescr [278] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2416;
     scrnum := 0;
  END;
 (*   RULE 277/2418  *)
   WITH RuleDescr [277] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntarglist;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2418;
     scrnum := 0;
  END;
 (*   RULE 276/2436  *)
   WITH RuleDescr [276] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntarglist;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2436;
     scrnum := 0;
  END;
 (*   RULE 275/2442  *)
   WITH RuleDescr [275] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntarglist;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntCMem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2442;
     scrnum := 0;
  END;
 (*   RULE 274/2452  *)
   WITH RuleDescr [274] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntarglist;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2452;
     scrnum := 0;
  END;
 (*   RULE 273/2461  *)
   WITH RuleDescr [273] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntarglist;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntmem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2461;
     scrnum := 0;
  END;
 (*   RULE 272/2471  *)
   WITH RuleDescr [272] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := { ORD (Regecx)-0,  ORD (Regedi)-0};
        WITH op[1] DO 
           nt   := ntarglist;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regesi)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2471;
     scrnum := 0;
  END;
 (*   RULE 57/2483  *)
   WITH RuleDescr [57] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
        WITH op[1] DO 
           nt   := ntarglist;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2483;
     scrnum := 0;
  END;
 (*   RULE 58/2495  *)
   WITH RuleDescr [58] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
        WITH op[1] DO 
           nt   := ntarglist;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2495;
     scrnum := 0;
  END;
 (*   RULE 73/2507  *)
   WITH RuleDescr [73] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0};
     changeregs[0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
        WITH op[1] DO 
           nt   := ntarglist;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2507;
     scrnum := 0;
  END;
 (*   RULE 72/2522  *)
   WITH RuleDescr [72] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regeax)-0};
     changeregs[0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
        WITH op[1] DO 
           nt   := ntarglist;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2522;
     scrnum := 0;
  END;
 (*   RULE 146/2537  *)
   WITH RuleDescr [146] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
        WITH op[1] DO 
           nt   := ntarglist;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2537;
     scrnum := 0;
  END;
 (*   RULE 145/2552  *)
   WITH RuleDescr [145] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
        WITH op[1] DO 
           nt   := ntarglist;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2552;
     scrnum := 0;
  END;
 (*   RULE 59/2567  *)
   WITH RuleDescr [59] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
        WITH op[1] DO 
           nt   := ntarglist;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2567;
     scrnum := 0;
  END;
 (*   RULE 144/2592  *)
   WITH RuleDescr [144] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 33;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2592;
     scrnum := 0;
  END;
 (*   RULE 143/2603  *)
   WITH RuleDescr [143] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 33;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2603;
     scrnum := 0;
  END;
 (*   RULE 142/2641  *)
   WITH RuleDescr [142] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntloadln2;
           path := 17;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 33;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2641;
     scrnum := 0;
  END;
 (*   RULE 279/2668  *)
   WITH RuleDescr [279] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2668;
     scrnum := 0;
  END;
 (*   RULE 141/2675  *)
   WITH RuleDescr [141] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 33;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2675;
     scrnum := 0;
  END;
 (*   RULE 140/2686  *)
   WITH RuleDescr [140] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 33;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2686;
     scrnum := 0;
  END;
 (*   RULE 139/2697  *)
   WITH RuleDescr [139] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 33;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2697;
     scrnum := 0;
  END;
 (*   RULE 138/2713  *)
   WITH RuleDescr [138] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntCMem;
           path := 33;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2713;
     scrnum := 0;
  END;
 (*   RULE 137/2728  *)
   WITH RuleDescr [137] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 33;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2728;
     scrnum := 0;
  END;
 (*   RULE 195/2745  *)
   WITH RuleDescr [195] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 33;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2745;
     scrnum := 0;
  END;
 (*   RULE 194/2755  *)
   WITH RuleDescr [194] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 33;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2755;
     scrnum := 0;
  END;
 (*   RULE 71/2763  *)
   WITH RuleDescr [71] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 33;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2763;
     scrnum := 0;
  END;
 (*   RULE 172/2779  *)
   WITH RuleDescr [172] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntFloatConstant;
           path := 33;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2779;
     scrnum := 0;
  END;
 (*   RULE 60/2791  *)
   WITH RuleDescr [60] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 530;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2791;
     scrnum := 0;
  END;
 (*   RULE 70/2807  *)
   WITH RuleDescr [70] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 33;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2807;
     scrnum := 0;
  END;
 (*   RULE 171/2821  *)
   WITH RuleDescr [171] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntFloatConstant;
           path := 33;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2821;
     scrnum := 0;
  END;
 (*   RULE 61/2831  *)
   WITH RuleDescr [61] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 530;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2831;
     scrnum := 0;
  END;
 (*   RULE 62/2848  *)
   WITH RuleDescr [62] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2848;
     scrnum := 0;
  END;
 (*   RULE 63/2952  *)
   WITH RuleDescr [63] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := { ORD (Regecx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2952;
     scrnum := 0;
  END;
 (*   RULE 64/3000  *)
   WITH RuleDescr [64] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 3000;
     scrnum := 0;
  END;
 (*   RULE 65/3033  *)
   WITH RuleDescr [65] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 3033;
     scrnum := 0;
  END;
 (*   RULE 66/3036  *)
   WITH RuleDescr [66] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 3036;
     scrnum := 0;
  END;
 (*   RULE 67/3042  *)
   WITH RuleDescr [67] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 3042;
     scrnum := 0;
  END;
 (*   RULE 68/3052  *)
   WITH RuleDescr [68] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 3052;
     scrnum := 0;
  END;
 (*   RULE 69/3078  *)
   WITH RuleDescr [69] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 3078;
     scrnum := 0;
  END;
(******* empty insertion IpGcgTabInit *******)
 END GcgTab.
