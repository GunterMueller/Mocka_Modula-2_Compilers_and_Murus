  (**************************************************************) 
  (*   This module was generated by BEG V1.84        *)
  (*        GMD Forschunsstelle an der Universitaet Karlsruhe   *)
  (*        Vincenz-Priessnitz-Str. 1 76131 Karlsruhe Germany   *)
  (**************************************************************)
IMPLEMENTATION MODULE Emit;
IMPORT IR;
IMPORT  RegAlloc;
FROM    RegAlloc IMPORT Spilllocation, Action;
(******* empty insertion IpInOut *******)
FROM    InOut IMPORT Write, WriteLn, WriteInt, WriteCard, WriteString;
FROM IR      IMPORT PrintRegister;
FROM IR      IMPORT PrintINTEGER, PrintCARDINAL, PrintBOOLEAN;
(*++++++ start insertion IpTestImport ++++++*)

FROM	Prints	IMPORT	PrintSHORTCARD, PrintLONGCARD, PrintSHORTINT,
			PrintLONGINT, PrintDataTempo, PrintAddressTempo,
			PrintSysProc, PrintLabelList, PrintLabel,
			PrintMode, PrintString, PrintStringIndex, PrintLONGREAL,
			PrintREAL, PrintBITSET, PrintProcIndex, PrintRelation,
			PrintModuleIndex, PrintCHAR, PrintADDRESS,
			PrintRelSymb, PrintMemAdr, PrintAdrMode;


(*------ end   insertion IpTestImport ------*)
FROM    IR      IMPORT NonTerminal, RegisterSet, Register;
(*++++++ start insertion IpNtTypes ++++++*)

FROM IR	IMPORT	MemAdr, AdrMode, AdrModeMode;


(*------ end   insertion IpNtTypes ------*)
(******* empty insertion IpText *******)
(*++++++ start insertion IpTypes ++++++*)

IMPORT CgBase;
FROM Strings	IMPORT	String;


(*------ end   insertion IpTypes ------*)
(*++++++ start insertion IpEmit_i ++++++*)

FROM	SysLib		IMPORT	exit;
FROM	BasicIO		IMPORT	Erase;
FROM	SuBase		IMPORT	BuildLibraryFileName, KindAssemblerSourceFile,
				FileName, AssemblerScript, LibraryDirectory,
				DefineOption, Enabled, DebugOption,
				SystemCommand;
FROM	SuErrors	IMPORT	ERROR, CompilerError, UndefSourcePos, OK;
FROM	GcgStorage	IMPORT	ALLOCATE;
FROM	CgBase		IMPORT	Tempo, Mode, SysProc, Relation, MakeRelSymb,
				GetLabel, ElfOption, InitCgBase;
FROM	CgTypeMap	IMPORT	ByteSize, WordSize, LongSize,
				SizeREAL, SizeLONGREAL,
				CprocNumber, CompUnitProcNumber;
FROM	CgMobil		IMPORT	UndefOperand;
FROM	CgUtilities	IMPORT	StringAssign, StringLength,
				StringAppend1, StringAppend2, StringConcat2, 
				ConvertLONGINTtoString, ConvertREALtoString,
				IsPowerOfTwo, Log2;
FROM	CgAssOut	IMPORT	AssInt, AssLn, AssChar, AssString, AssHString,
				AssOpen, AssClose;

(* Control lines for the dottool: *)
















TYPE	RoundMode	 = (RndNearest, RndZero, RndInf, RndNegInf, RndUnknown);

CONST	MaxDisplay	 = 15;		(* Max. nesting Level of procedures *)
	MaxFloatTempo	 = 64;		(* Max. size of Float-Stack	    *)
	MaxPowerTable	 = 31;
	NoTempo		 = 1111111111;
	Kommentar	 = FALSE;	(* Kommentare ein/aus		    *)

VAR
    RelationTable    : ARRAY CgBase.Relation OF
			 ARRAY [FALSE..TRUE] OF ARRAY [0..2] OF CHAR;
			   (* maps Relation into e,ne,g,ge,l,le,a,ae,b,be  *)

    Reverse	     : ARRAY CgBase.Relation OF CgBase.Relation;
			   (* maps Relation into reverse Relation	   *)
    
    PowerTable       : ARRAY [0 .. MaxPowerTable] OF LONGINT;
                           (* powers of two, 1 <= 2^n <= 2^MaxPowerTable   *)

    WordReg, ByteReg : ARRAY Register OF ARRAY [0..4] OF CHAR;
			   (* maps to register parts                       *)

    SaveDisplay	     : ARRAY [0 .. MaxDisplay] OF BOOLEAN;
                           (* SaveDisplay [i] = TRUE <==> save display of  *)
                           (* current procedure level                      *)

    FStackTempo	     : ARRAY [0 .. MaxFloatTempo-1] OF CgBase.Tempo;
			   (* temporaries if FloatingPoint-Stack overflows *)

    TransferTempo    : CgBase.Tempo;
			   (* temporary for reg <-> freg transfers *)
			  
    oEmitIR, oEmitMatch, oRegAlloc, oAssemblerListing, oCCall : CARDINAL;

    AsmListFileName	: FileName;
    ModName		: ARRAY [0..80] OF CHAR;

    CurFrameSize	: LONGINT;
    CurRoundMode	: RoundMode;

    CurFStackSize	: INTEGER;
    FStackStart		: INTEGER;
	
    ProcLabel		: CgBase.Label;

(* local Variables for Emit-Routines *)
VAR   
	lab, lab2	: CgBase.Label;
	i,j             : LONGINT;
	k		: SHORTCARD;
	str, cmd        : ARRAY [0..255] OF CHAR;
	ok		: BOOLEAN;	
	tr1		: RECORD 
			    CASE : BOOLEAN OF
			    | TRUE : r : REAL;
			    | FALSE : c : LONGINT;
			    END;
			  END;
	tr2		: RECORD 
			    CASE : BOOLEAN OF
			    | TRUE : r : LONGREAL;
			    | FALSE : c2, c1 : LONGINT;
			    END;
			  END;


PROCEDURE   LR  (to, from : Register);
(*  Copy Register from into Register to *)
BEGIN
 AssHString(' 	movl	');  AssRegister(from);  AssHString(', ');  AssRegister(to);  AssLn; 
	IF Kommentar THEN
 AssHString('					/* LR */');  AssLn; 
	END;
END LR;

PROCEDURE   Spill (reg : Register; loc : Spilllocation);
BEGIN
  IF (reg # Regst) AND (reg # Regst1) THEN
 AssHString('	pushl	');  AssRegister(reg);  AssLn; 
	IF Kommentar THEN
 AssHString('					/* Spill */');  AssLn; 
	END;
  ELSE
	IF Kommentar THEN
 AssHString(' 					/* Spill ');  AssRegister(reg);  AssHString(' */');  AssLn; 
	END;
  END;
END Spill;

PROCEDURE   Restore (reg : Register; loc : Spilllocation);
BEGIN
  IF (reg # Regst) AND (reg # Regst1) THEN
 AssHString('	popl	');  AssRegister(reg);  AssLn; 
	IF Kommentar THEN
 AssHString('					/* Restore */');  AssLn; 
	END;
  ELSE
	IF Kommentar THEN
 AssHString(' 					/* Restore ');  AssRegister(reg);  AssHString(' */');  AssLn; 
	END;
  END;
END Restore;


PROCEDURE SpillFStack;
  VAR i : INTEGER;
BEGIN
  FOR i:=0 TO CurFStackSize - 1 DO
    DeclareTempo (FloatLong, FStackTempo[FStackStart + i]);
 AssHString('	fstpl	');  AssInt ( FStackTempo[FStackStart + i]);  AssHString('(%ebp)');  AssLn; 
    IF Kommentar THEN
 AssHString('					/* SpillFstack */');  AssLn; 
    END;
  END;
  CurFStackSize := 0;
END SpillFStack;

PROCEDURE PushFStack;
(* Ueberpruefung auf Floating-Point-Stack Ueberlauf *)
(* wird vor jedem push auf den 387 Stack aufgerufen *)
BEGIN
  IF CurFStackSize = 8 THEN
    (* tiefstes Stackelement als Tempo in den Speicher legen *)
    DeclareTempo (FloatLong, FStackTempo[FStackStart + 7]);
 AssHString('	fxch	%st(7)');  AssLn; 
 AssHString('	fstl	');  AssInt ( FStackTempo[FStackStart + 7]);  AssHString('(%ebp)');  AssLn; 
 AssHString('	fxch	%st(7)');  AssLn; 
 AssHString('	ffree	%st(7)');  AssLn; 
  ELSE
    INC (CurFStackSize);
  END;
  DEC (FStackStart);
  FStackTempo[FStackStart] := NoTempo;
END PushFStack;

PROCEDURE PopFStack;
(* wird nach jedem pop auf den 387 Stack aufgerufen *)
BEGIN
  INC (FStackStart);
  DEC (CurFStackSize);
END PopFStack;

PROCEDURE FloatOperation (VAR op: ARRAY OF CHAR);
BEGIN
  INC (FStackStart);
  IF FStackTempo[FStackStart] # NoTempo THEN
 AssHString('	');  AssString( op);  AssHString('l	');  AssInt ( FStackTempo[FStackStart]);  AssHString('(%ebp)');  AssLn; 
    FStackTempo[FStackStart] := NoTempo;
  ELSE
 AssHString('	');  AssString( op);  AssHString('p	%st,%st(1)');  AssLn; 
    DEC (CurFStackSize);
  END;
END FloatOperation;

PROCEDURE CheckRoundMode (newmode: RoundMode);
BEGIN
  IF CurRoundMode <> newmode THEN
    CASE newmode OF
    | RndNearest:
 AssHString('	fldcw	fpucw_round_to_nearest');  AssLn; 
    | RndZero:
 AssHString('	fldcw	fpucw_round_to_zero');  AssLn; 
    | RndInf:
 AssHString('	fldcw	fpucw_round_to_inf');  AssLn; 
    | RndNegInf:
 AssHString('	fldcw	fpucw_round_to_neginf');  AssLn; 
    ELSE
      CompilerError ("Unknown Round Mode");
    END;
    CurRoundMode := newmode;
  END;
END CheckRoundMode;

PROCEDURE CheckRoundMode2 (newmode1, newmode2: RoundMode);
BEGIN
  IF (CurRoundMode <> newmode1) AND (CurRoundMode <> newmode2) THEN
    CheckRoundMode (newmode1);
  END;
END CheckRoundMode2;


PROCEDURE IsNilMemAdr (a: MemAdr) : BOOLEAN;
BEGIN
  RETURN (a.offset = 0) AND
	 (a.faktor = 0) AND
	 (a.base = RegNil) AND
	 (a.symbol = NullSymb)
END IsNilMemAdr;

PROCEDURE EmitIndex (VAR base : MemAdr; index : MemAdr; reg : Register);
BEGIN
  IF NOT IsNilMemAdr (index)
   THEN base.index := reg;
 AssHString('	movl	');  AssMemAdr( index);  AssHString(',');  AssRegister(reg);  AssLn; 
  END (* IF *);
END EmitIndex;


PROCEDURE AssRegister (r : Register);
BEGIN
   AssChar ('%');
   IF r # Regst1
     THEN AssString (IR.RegNameTable[r]);
     ELSE AssString ('st(1)');
   END;
END AssRegister;

PROCEDURE AssRegister2 (r : Register; mode: CgBase.Mode);
BEGIN
  CASE SizeTable[mode] OF
  | 1: AssString (ByteReg[r]);
  | 2: AssString (WordReg[r]);
  | 4,8: AssChar ('%'); AssString (IR.RegNameTable[r]);
    ELSE CompilerError ('Backend: Unknown Register Size');
  END;
END AssRegister2;

PROCEDURE AssWordRegister (r : Register);
BEGIN
   AssString (WordReg[r])
END AssWordRegister;

PROCEDURE AssByteRegister (r : Register);
BEGIN
   AssString (ByteReg[r])
END AssByteRegister;

PROCEDURE AssPlusInt  (i : LONGINT);
BEGIN
   IF i>=0 THEN
      AssString (' + ')
   ELSE
      AssString (' - ')
   END;
   AssInt (ABS (i));
END AssPlusInt;

PROCEDURE AssMemAdr (am: MemAdr);
BEGIN
  WITH am DO
    IF symbol # NullSymb
      THEN AssString (symbol^);
	   IF offset # 0
	     THEN AssPlusInt (offset)
	   END;
      ELSE IF offset # 0
	     THEN AssInt (offset)
	   END;
    END;
    IF (base > RegNil) OR ((index > RegNil) AND (faktor > 0))
      THEN IF (base = RegNil) AND (faktor = 1)
	     THEN base := index;
		  faktor := 0;
	   END; (* IF *)
	   AssChar ('(');
	   IF (base > RegNil)
	     THEN AssRegister(base);
	   END;
	   IF (index > RegNil) AND (faktor > 0)
	     THEN AssChar (',');
		  AssRegister (index);
		  AssChar (',');
		  AssInt (faktor);
	   END;
	   AssChar (')');
    END;
  END;
END AssMemAdr;

PROCEDURE AssAdrMode (am: AdrMode);
BEGIN
  WITH am DO
    CASE kind OF
    | Mconst : AssChar ('$'); AssInt (constant);
    | Mreg   : AssRegister2 (reg,mode);
    | Mmem   : AssMemAdr (mem);
    END;
  END;
END AssAdrMode;

PROCEDURE AssSuffix (s: CgBase.Mode);
BEGIN
  AssChar (SuffixTable[s]);
END AssSuffix;

PROCEDURE AssSigned (s: CgBase.Mode);
BEGIN
  IF SignedTable[s]
    THEN AssChar ('s')
    ELSE AssChar ('z')
  END;
END AssSigned;


PROCEDURE DeclareModule
   (    extern       : BOOLEAN;
    VAR CompUnitName : ARRAY OF CHAR; 
    VAR ref          : CgBase.ModuleIndex);
  VAR str : String;
BEGIN
   NEW (ref);
   WITH ref^ DO
     Extern := extern;
     IF Enabled (ElfOption) THEN
       Name := MakeRelSymb (CompUnitName);
       StringAssign (str, CompUnitName);
       StringAppend1 (str, '_s');
     ELSE
       StringAssign (str,'_');
       StringAppend1 (str, CompUnitName);      
       Name := MakeRelSymb (str);
       StringAppend1 (str,'_s');
     END;
     Statics := MakeRelSymb (str);
   END;
END DeclareModule;


PROCEDURE DeclareProcedure
   (    extern       : BOOLEAN;
	isFunction   : BOOLEAN;
	ProcMode     : CgBase.Mode;
    VAR ProcName     : ARRAY OF CHAR; 
        ProcNumber   : SHORTCARD;
        module       : CgBase.ModuleIndex;
	level        : SHORTCARD;
	father       : CgBase.ProcIndex;
    VAR ref          : CgBase.ProcIndex);
  VAR s,t : String;
BEGIN
  NEW (ref);
  WITH ref^ DO 
     Extern := extern; IsFunction := isFunction;
     Name := MakeRelSymb (ProcName); Number := ProcNumber;
     Module := module; Level := level; Father := father;

     IF ProcNumber # CprocNumber THEN 

 	IF level = 0 THEN 
	   StringAssign (t,module^.Name^);
	ELSE
	   StringAssign (t,father^.Entry^);
	END;

        IF StringLength(t)+1+StringLength(ProcName)>=80 THEN 
	   (* Produce Name and Number   *)
	   ConvertLONGINTtoString (ProcNumber,s);
	   StringAssign (t,module^.Name^);
	   StringAppend1(t,'_');
	   StringAppend1(t,ProcName);
	   StringAppend1(t,'_');
	   StringAppend1(t,s);                  
	ELSE
	   IF ProcNumber # CompUnitProcNumber
	     THEN StringAppend2 (t,'_',ProcName);
	   END;
	END;
	Entry := MakeRelSymb (t);
     ELSE (* ProcNumber = CprocNumber *)
	IF Enabled (ElfOption) THEN
	  Entry := MakeRelSymb (ProcName);
	ELSE
	  StringConcat2 (t,'_',ProcName);
	  Entry := MakeRelSymb (t);
	END;
     END;
 AssHString('	.globl	');  AssString( Entry^);  AssLn; 
  END;
END DeclareProcedure;


PROCEDURE DeclareString
   (    length : SHORTCARD;
    VAR string : ARRAY OF CHAR; 
    VAR ref    : CgBase.StringIndex);
  VAR l   : CARDINAL;
      c   : CHAR;
      numbersNeedRestart: BOOLEAN;
BEGIN
   numbersNeedRestart:=FALSE;
   GetLabel (ref);
 AssHString('	.data');  AssLn; 
 AssString( ref^);  AssHString(':');  AssLn; 
 AssHString(' 	.ascii	"'); 
   FOR l := 0 TO length - 1 DO
      c := string[l];
      IF numbersNeedRestart AND ('0'<=c) AND (c<='9') THEN	(* Restart *)
 AssHString('"');  AssLn; 
 AssHString('	.ascii	"'); 
      END;
      IF (' ' <= c) AND (c <= 'z') AND (c # 42C) AND (c # '\') THEN 
	 AssChar (c);
         numbersNeedRestart:=FALSE;
      ELSE
	 IF l < length - 1 THEN
	    AssChar ('\');
 AssInt ( ORD (c) DIV 64);  AssInt ( (ORD (c) MOD 64) DIV 8);  AssInt ( ORD (c) MOD 8); 
	 END;
         numbersNeedRestart:=TRUE;
      END;
   END;
   AssString ('\000"'); AssLn;
 AssHString('	.text');  AssLn; 
END DeclareString;


PROCEDURE DeclareTempo (mode: CgBase.Mode; VAR tempo: CgBase.Tempo);
BEGIN
  IF mode = FloatLong
    THEN INC(CurFrameSize, 8);
    ELSE INC(CurFrameSize, 4);
  END;
  tempo := -CurFrameSize;
END DeclareTempo;

PROCEDURE DeclareTransferTempo;
BEGIN
  IF TransferTempo = NoTempo
    THEN DeclareTempo (FloatShort, TransferTempo);
  END;
END DeclareTransferTempo;

PROCEDURE  BeginModule
   (AtModulName  :  ARRAY OF CHAR;
    AtFrameSize  :  LONGINT);
BEGIN
   CallLevel := 0;
   CurPos.line := 0;
   CurPos.col := 0;

   DisplaySym := MakeRelSymb ('DISPLAY_');

   FOR i := 0 TO MaxDisplay DO SaveDisplay [i] := FALSE; END;

   IR.OptEmitIR		:= Enabled (oEmitIR);
   IR.OptEmitMatch	:= Enabled (oEmitMatch);
   IR.OptRegAlloc	:= Enabled (oRegAlloc);

   BuildLibraryFileName (AtModulName,
			 KindAssemblerSourceFile, AsmListFileName);
   AssOpen (AsmListFileName);
   StringAssign (ModName, AtModulName);

   InitCgBase;

   IF AtFrameSize > 0 THEN
     AssHString('	.comm ');
     IF NOT Enabled(ElfOption) THEN
       AssChar ('_')
     END;
     AssString( AtModulName);
     AssHString('_s, ');
     AssInt ( 4 * ((ABS(AtFrameSize)+3) DIV 4)); AssLn;
   END;
 AssHString('	.text'); AssLn;
END BeginModule;


(*------ end   insertion IpEmit_i ------*)

 VAR ai : CARDINAL;
      localavail : RegisterSet;

(******* empty insertion IpEmit *******)
TYPE   NtAttributes = RECORD
           CASE  : IR.NonTerminal OF 
    | ntreg : reg : RECORD
     END;
    | ntfreg : freg : RECORD
     END;
    | ntfstack : fstack : RECORD
     END;
    | ntConstant : Constant : RECORD
     END;
    | ntFloatConstant : FloatConstant : RECORD
     END;
    | ntSimpleVariable : SimpleVariable : RECORD
     END;
    | ntSymPlusOffset : SymPlusOffset : RECORD
                     symbol  :  CgBase.RelSymb;
     END;
    | ntRegPlusSymPlusOffset : RegPlusSymPlusOffset : RECORD
                     base  :  Register;
                     symbol  :  CgBase.RelSymb;
     END;
    | ntOffsetPlusIndexMultFaktor : OffsetPlusIndexMultFaktor : RECORD
                     index  :  Register;
     END;
    | ntmem : mem : RECORD
                     am  :  MemAdr;
     END;
    | ntCMem : CMem : RECORD
                     am  :  MemAdr;
     END;
    | ntRegOrIm : RegOrIm : RECORD
                     am  :  AdrMode;
     END;
    | ntRegOrCMem : RegOrCMem : RECORD
                     am  :  AdrMode;
     END;
    | ntRegOrCMemOrIm : RegOrCMemOrIm : RECORD
                     am  :  AdrMode;
     END;
    | ntarglist : arglist : RECORD
     END;
    | ntloadln2 : loadln2 : RECORD
     END;
           END;
   END;

PROCEDURE PerformActions (ai : RegAlloc.AllocIndex);
VAR i : CARDINAL;
BEGIN
   WITH RegAlloc.allocation [ai] DO
      FOR i:=1 TO num DO 
	 WITH a[i] DO
	    IF action=aLr THEN   
             LR (regto, regfrom);
    IF IR.OptEmitMatch THEN 
                WriteString (' Copy Register ');
                PrintRegister (regfrom);
                WriteString (' into ');
                PrintRegister (regto);
                WriteLn;
    END;
	    ELSE 
	       Restore (reg, spilllocation);
    IF IR.OptEmitMatch THEN 
                WriteString (' Restore Register ');
                PrintRegister (reg);
                WriteString (' from ');
                WriteInt (spilllocation,1);
                WriteLn;
    END;
         END;
	 END;
     END;
  END;
END PerformActions;
 
PROCEDURE WriteNest (i : INTEGER);
VAR j : INTEGER;
BEGIN
   FOR j:=1 TO i DO WriteString ('.  '); END;
END WriteNest;
PROCEDURE WriteAttrreg (at: NtAttributes);
BEGIN
END WriteAttrreg;
PROCEDURE WriteAttrfreg (at: NtAttributes);
BEGIN
END WriteAttrfreg;
PROCEDURE WriteAttrfstack (at: NtAttributes);
BEGIN
END WriteAttrfstack;
PROCEDURE WriteAttrConstant (at: NtAttributes);
BEGIN
END WriteAttrConstant;
PROCEDURE WriteAttrFloatConstant (at: NtAttributes);
BEGIN
END WriteAttrFloatConstant;
PROCEDURE WriteAttrSimpleVariable (at: NtAttributes);
BEGIN
END WriteAttrSimpleVariable;
PROCEDURE WriteAttrSymPlusOffset (at: NtAttributes);
BEGIN
       WriteString ('symbol=');
       PrintRelSymb ( at.SymPlusOffset.symbol ); 
       Write (' ');
END WriteAttrSymPlusOffset;
PROCEDURE WriteAttrRegPlusSymPlusOffset (at: NtAttributes);
BEGIN
       WriteString ('base=');
       PrintRegister ( at.RegPlusSymPlusOffset.base ); 
       Write (' ');
       WriteString ('symbol=');
       PrintRelSymb ( at.RegPlusSymPlusOffset.symbol ); 
       Write (' ');
END WriteAttrRegPlusSymPlusOffset;
PROCEDURE WriteAttrOffsetPlusIndexMultFaktor (at: NtAttributes);
BEGIN
       WriteString ('index=');
       PrintRegister ( at.OffsetPlusIndexMultFaktor.index ); 
       Write (' ');
END WriteAttrOffsetPlusIndexMultFaktor;
PROCEDURE WriteAttrmem (at: NtAttributes);
BEGIN
       WriteString ('am=');
       PrintMemAdr ( at.mem.am ); 
       Write (' ');
END WriteAttrmem;
PROCEDURE WriteAttrCMem (at: NtAttributes);
BEGIN
       WriteString ('am=');
       PrintMemAdr ( at.CMem.am ); 
       Write (' ');
END WriteAttrCMem;
PROCEDURE WriteAttrRegOrIm (at: NtAttributes);
BEGIN
       WriteString ('am=');
       PrintAdrMode ( at.RegOrIm.am ); 
       Write (' ');
END WriteAttrRegOrIm;
PROCEDURE WriteAttrRegOrCMem (at: NtAttributes);
BEGIN
       WriteString ('am=');
       PrintAdrMode ( at.RegOrCMem.am ); 
       Write (' ');
END WriteAttrRegOrCMem;
PROCEDURE WriteAttrRegOrCMemOrIm (at: NtAttributes);
BEGIN
       WriteString ('am=');
       PrintAdrMode ( at.RegOrCMemOrIm.am ); 
       Write (' ');
END WriteAttrRegOrCMemOrIm;
PROCEDURE WriteAttrarglist (at: NtAttributes);
BEGIN
END WriteAttrarglist;
PROCEDURE WriteAttrloadln2 (at: NtAttributes);
BEGIN
END WriteAttrloadln2;

PROCEDURE EmitNtreg (e : IR.Expression; nest : INTEGER
       ; VAR resAttributes : NtAttributes); 
VAR
    AT0   :  NtAttributes;
    AT1   :  NtAttributes;
    AT2   :  NtAttributes;

BEGIN
   CASE e^.gcg^.rule [ntreg] OF 
   | 70 : 
  EmitNtfreg(e^.son[1]^.son[2],nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 70/2807 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' FunctionCall ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

 AssHString('	subl	$4,%esp');  AssLn; 
	CheckRoundMode (RndZero);
 AssHString('	fistpl	(%esp)');  AssLn; 
 AssHString('	popl	');  AssRegister(RegAlloc.allocation[ai].reg);  AssLn; 
	PopFStack;
	
   | 71 : 
  EmitNtfreg(e^.son[1]^.son[2],nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 71/2763 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' FunctionCall ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

 AssHString('	subl	$4,%esp');  AssLn; 
	CheckRoundMode (RndNegInf);
 AssHString('	fistpl	(%esp)');  AssLn; 
 AssHString('	popl	');  AssRegister(RegAlloc.allocation[ai].reg);  AssLn; 
	PopFStack;
	
   | 72 : 
  EmitNtarglist(e^.son[1],nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 72/2522 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' FunctionCall ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

	SpillFStack;
	CurRoundMode := RndUnknown;
 AssHString('	call	');  AssString( e^.son[2]^.attr^.ProcedureConstant.index^.Entry^);  AssLn; 
	IF e^.attr^.FunctionCall.paramsize # 0 THEN 
	(* e^.attr^.FunctionCall.paramsize := (e^.attr^.FunctionCall.paramsize+3) DIV 4 * 4; *)
 AssHString('	addl	$');  AssInt ( e^.attr^.FunctionCall.paramsize);  AssHString(', %esp');  AssLn; 
	END;
	
   | 73 : 
  EmitNtarglist(e^.son[1],nest+1,AT0 ); 
  EmitNtreg(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 73/2507 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' FunctionCall ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

	SpillFStack;
	CurRoundMode := RndUnknown;
 AssHString('	call	');  AssRegister(RegAlloc.allocation[ai].op[2]);  AssLn; 
	IF e^.attr^.FunctionCall.paramsize # 0 THEN 
	(* e^.attr^.FunctionCall.paramsize := (e^.attr^.FunctionCall.paramsize+3) DIV 4 * 4; *)
 AssHString('	addl	$');  AssInt ( e^.attr^.FunctionCall.paramsize);  AssHString(', %esp');  AssLn; 
	END;
	
   | 74 : 
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 74/2158 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' TestOdd ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

 AssHString('	and');  AssSuffix( e^.attr^.TestOdd.mode);  AssHString('	$1,');  AssRegister2 ( RegAlloc.allocation[ai].op[1],e^.attr^.TestOdd.mode);  AssLn; 
	IF NOT e^.attr^.TestOdd.cond THEN
 AssHString('	xor');  AssSuffix( e^.attr^.TestOdd.mode);  AssHString('	$1,');  AssRegister2 ( RegAlloc.allocation[ai].op[1],e^.attr^.TestOdd.mode);  AssLn; 
	END;
	
   | 75 : 
  EmitNtRegOrIm(e^.son[1],nest+1,AT0 ); 
  EmitNtRegOrCMem(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 75/2146 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' TestMembershipL ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

 AssHString('	btl	');  AssAdrMode( AT0.RegOrIm.am);  AssHString(',');  AssAdrMode( AT1.RegOrCMem.am);  AssLn; 
	IF e^.attr^.TestMembershipL.cond THEN
 AssHString('	setb	');  AssByteRegister ( RegAlloc.allocation[ai].reg);  AssLn; 
	ELSE
 AssHString('	setnb	');  AssByteRegister ( RegAlloc.allocation[ai].reg);  AssLn; 
	END;
	
   | 76 : 
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
  EmitNtRegOrCMemOrIm(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 76/2114 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' SetCompare ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

 AssHString('	movl	');  AssRegister(RegAlloc.allocation[ai].op[1]);  AssHString(',');  AssRegister(RegAlloc.allocation[ai].scr[1]);  AssLn; 
	CASE e^.attr^.SetCompare.rel OF
	| RelLess:
 AssHString('	or	');  AssAdrMode( AT1.RegOrCMemOrIm.am);  AssHString(',');  AssRegister(RegAlloc.allocation[ai].scr[1]);  AssLn; 
	e^.attr^.SetCompare.rel := RelUnequal;
	| RelLessOrEqual:
 AssHString('	and	');  AssAdrMode( AT1.RegOrCMemOrIm.am);  AssHString(',');  AssRegister(RegAlloc.allocation[ai].scr[1]);  AssLn; 
	e^.attr^.SetCompare.rel := RelEqual;
	| RelGreater:
 AssHString('	and	');  AssAdrMode( AT1.RegOrCMemOrIm.am);  AssHString(',');  AssRegister(RegAlloc.allocation[ai].scr[1]);  AssLn; 
	e^.attr^.SetCompare.rel := RelUnequal;
	| RelGreaterOrEqual:
 AssHString('	or	');  AssAdrMode( AT1.RegOrCMemOrIm.am);  AssHString(',');  AssRegister(RegAlloc.allocation[ai].scr[1]);  AssLn; 
	e^.attr^.SetCompare.rel := RelEqual;
	END;
 AssHString('	cmpl	');  AssRegister(RegAlloc.allocation[ai].scr[1]);  AssHString(',');  AssRegister(RegAlloc.allocation[ai].op[1]);  AssLn; 
 AssHString('	set');  AssString( RelationTable[e^.attr^.SetCompare.rel][FALSE]);  AssHString('	');  AssByteRegister ( RegAlloc.allocation[ai].reg);  AssLn; 
	
   | 77 : 
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
  EmitNtRegOrCMemOrIm(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 77/2105 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' SetCompare ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

 AssHString('	cmpl	');  AssAdrMode( AT1.RegOrCMemOrIm.am);  AssHString(',');  AssRegister(RegAlloc.allocation[ai].op[1]);  AssLn; 
 AssHString('	set');  AssString( RelationTable[e^.attr^.SetCompare.rel][FALSE]);  AssHString('	');  AssByteRegister ( RegAlloc.allocation[ai].reg);  AssLn; 
	
   | 78 : 
  EmitNtfstack(e^.son[1],nest+1,AT0 ); 
  EmitNtfreg(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 78/2087 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' FloatCompare ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

	INC (FStackStart);
	IF FStackTempo[FStackStart] # NoTempo THEN
 AssHString('	fcompl	');  AssInt ( FStackTempo[FStackStart]);  AssHString('(%ebp)');  AssLn; 
	  DEC (CurFStackSize);
	ELSE
 AssHString('	fcompp');  AssLn; 
	  DEC (CurFStackSize, 2);
	END;
 AssHString('	fstsw	%ax');  AssLn; 
 AssHString('	sahf');  AssLn; 
 AssHString('	set');  AssString( RelationTable[Reverse[e^.attr^.FloatCompare.rel]][SignedTable[e^.attr^.FloatCompare.mode]]);  AssHString('	');  AssByteRegister ( RegAlloc.allocation[ai].reg);  AssLn; 
	
   | 79 : 
  EmitNtCMem(e^.son[1],nest+1,AT0 ); 
  EmitNtfreg(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 79/2075 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' FloatCompare ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

 AssHString('	fcomp');  AssSuffix( e^.son[1]^.gcg^.CMem.mode);  AssHString('	');  AssMemAdr( AT0.CMem.am);  AssLn; 
 AssHString('	fstsw	%ax');  AssLn; 
 AssHString('	sahf');  AssLn; 
 AssHString('	set');  AssString( RelationTable[Reverse[e^.attr^.FloatCompare.rel]][SignedTable[e^.attr^.FloatCompare.mode]]);  AssHString('	');  AssByteRegister ( RegAlloc.allocation[ai].reg);  AssLn; 
	PopFStack;
	
   | 80 : 
  EmitNtfreg(e^.son[1],nest+1,AT0 ); 
  EmitNtCMem(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 80/2063 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' FloatCompare ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

 AssHString('	fcomp');  AssSuffix( e^.son[2]^.gcg^.CMem.mode);  AssHString('	');  AssMemAdr( AT1.CMem.am);  AssLn; 
 AssHString('	fstsw	%ax');  AssLn; 
 AssHString('	sahf');  AssLn; 
 AssHString('	set');  AssString( RelationTable[e^.attr^.FloatCompare.rel][SignedTable[e^.attr^.FloatCompare.mode]]);  AssHString('	');  AssByteRegister ( RegAlloc.allocation[ai].reg);  AssLn; 
	PopFStack;
	
   | 81 : 
  EmitNtConstant(e^.son[1],nest+1,AT0 ); 
  EmitNtRegOrCMem(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 81/2055 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' FixedCompare ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

 AssHString('	cmp');  AssSuffix( e^.attr^.FixedCompare.mode);  AssHString('	$');  AssInt ( e^.son[1]^.gcg^.Constant.val);  AssHString(',');  AssAdrMode( AT1.RegOrCMem.am);  AssLn; 
 AssHString('	set');  AssString( RelationTable[Reverse[e^.attr^.FixedCompare.rel]][SignedTable[e^.attr^.FixedCompare.mode]]);  AssHString('	');  AssByteRegister ( RegAlloc.allocation[ai].reg);  AssLn; 
	
   | 82 : 
  EmitNtCMem(e^.son[1],nest+1,AT0 ); 
  EmitNtRegOrIm(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 82/2047 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' FixedCompare ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

 AssHString('	cmp');  AssSuffix( e^.attr^.FixedCompare.mode);  AssHString('	');  AssAdrMode( AT1.RegOrIm.am);  AssHString(',');  AssMemAdr( AT0.CMem.am);  AssLn; 
 AssHString('	set');  AssString( RelationTable[e^.attr^.FixedCompare.rel][SignedTable[e^.attr^.FixedCompare.mode]]);  AssHString('	');  AssByteRegister ( RegAlloc.allocation[ai].reg);  AssLn; 
	
   | 83 : 
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
  EmitNtRegOrCMemOrIm(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 83/2039 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' FixedCompare ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

 AssHString('	cmp');  AssSuffix( e^.attr^.FixedCompare.mode);  AssHString('	');  AssAdrMode( AT1.RegOrCMemOrIm.am);  AssHString(',');  AssRegister2 ( RegAlloc.allocation[ai].op[1],e^.attr^.FixedCompare.mode);  AssLn; 
 AssHString('	set');  AssString( RelationTable[e^.attr^.FixedCompare.rel][SignedTable[e^.attr^.FixedCompare.mode]]);  AssHString('	');  AssByteRegister ( RegAlloc.allocation[ai].reg);  AssLn; 
	
   | 84 : 
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
  EmitNtRegOrCMemOrIm(e^.son[2],nest+1,AT1 ); 
  EmitNtRegOrCMemOrIm(e^.son[3],nest+1,AT2 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 84/1987 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' CheckL ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

	GetLabel(lab);
	GetLabel(lab2);
	IF e^.attr^.CheckL.CheckLwb THEN
 AssHString('	cmp');  AssSuffix( e^.attr^.CheckL.LwbMode);  AssHString('	');  AssAdrMode( AT1.RegOrCMemOrIm.am);  AssHString(',');  AssRegister2 ( RegAlloc.allocation[ai].op[1],e^.attr^.CheckL.LwbMode);  AssLn; 
 AssHString('	j');  AssString( RelationTable[RelLess][SignedTable[e^.attr^.CheckL.LwbMode]]);  AssHString('	');  AssString( lab2^);  AssLn; 
	END;
	IF e^.attr^.CheckL.CheckUpb THEN
 AssHString('	cmp');  AssSuffix( e^.attr^.CheckL.UpbMode);  AssHString('	');  AssAdrMode( AT2.RegOrCMemOrIm.am);  AssHString(',');  AssRegister2 ( RegAlloc.allocation[ai].op[1],e^.attr^.CheckL.UpbMode);  AssLn; 
 AssHString('	j');  AssString( RelationTable[RelLessOrEqual][SignedTable[e^.attr^.CheckL.UpbMode]]);  AssHString('	');  AssString( lab^);  AssLn; 
	ELSE
 AssHString('	jmp	');  AssString( lab^);  AssLn; 
	END;
 AssString( lab2^);  AssHString(':');  AssLn; 
 AssHString('   	call	BoundErr_		');  AssLn; 
 AssString( lab^);  AssHString(':');  AssLn; 
	
   | 85 : 
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
  EmitNtRegOrCMemOrIm(e^.son[2],nest+1,AT1 ); 
  EmitNtRegOrCMemOrIm(e^.son[3],nest+1,AT2 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 85/1974 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' CheckL ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

 AssHString('	push');  AssSuffix( e^.son[1]^.gcg^.reg.mode);  AssHString('	');  AssAdrMode( AT2.RegOrCMemOrIm.am);  AssLn; 
 AssHString('	push');  AssSuffix( e^.son[1]^.gcg^.reg.mode);  AssHString('	');  AssAdrMode( AT1.RegOrCMemOrIm.am);  AssLn; 
 AssHString('	bound');  AssSuffix( e^.son[1]^.gcg^.reg.mode);  AssHString('	');  AssRegister2 ( RegAlloc.allocation[ai].op[1],e^.son[1]^.gcg^.reg.mode);  AssHString(',(%esp)');  AssLn; 
 AssHString('	addl	$');  AssInt ( 2*SizeTable[e^.son[1]^.gcg^.reg.mode]);  AssHString(',%esp');  AssLn; 
	
   | 86 : 
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
  EmitNtConstant(e^.son[2],nest+1,AT1 ); 
  EmitNtConstant(e^.son[3],nest+1,AT2 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 86/1946 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' CheckL ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

	GetLabel(lab);
 AssHString('	.data');  AssLn; 
	CASE SizeTable[e^.son[1]^.gcg^.reg.mode] OF
	| 4:
 AssHString('	.align 4');  AssLn; 
 AssString( lab^);  AssHString(':');  AssLn; 
 AssHString('	.long	');  AssInt ( e^.son[2]^.gcg^.Constant.val);  AssHString(',');  AssInt ( e^.son[3]^.gcg^.Constant.val);  AssLn; 
	| 2:
 AssHString('	.align 2');  AssLn; 
 AssString( lab^);  AssHString(':');  AssLn; 
 AssHString('	.word	');  AssInt ( e^.son[2]^.gcg^.Constant.val);  AssHString(',');  AssInt ( e^.son[3]^.gcg^.Constant.val);  AssLn; 
	END;
 AssHString('	.text');  AssLn; 
 AssHString('	bound');  AssSuffix( e^.son[1]^.gcg^.reg.mode);  AssHString('	');  AssRegister2 ( RegAlloc.allocation[ai].op[1],e^.son[1]^.gcg^.reg.mode);  AssHString(',');  AssString( lab^);  AssLn; 
	
   | 87 : 
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
  EmitNtConstant(e^.son[2],nest+1,AT1 ); 
  EmitNtConstant(e^.son[3],nest+1,AT2 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 87/1941 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' CheckL ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

   | 88 : 
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 88/1881 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' Coerce ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

   | 89 : 
  EmitNtRegOrCMem(e^.son[1],nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 89/1868 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' Coerce ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

	IF SignedTable[e^.attr^.Coerce.premode] AND SignedTable[e^.attr^.Coerce.postmode] THEN
 AssHString('	movs');  AssSuffix( e^.son[1]^.gcg^.RegOrCMem.mode);  AssSuffix( e^.attr^.Coerce.postmode);  AssHString('	');  AssAdrMode( AT0.RegOrCMem.am);  AssHString(',');  AssRegister2 ( RegAlloc.allocation[ai].reg,e^.attr^.Coerce.postmode);  AssLn; 
	ELSE
 AssHString('	movz');  AssSuffix( e^.son[1]^.gcg^.RegOrCMem.mode);  AssSuffix( e^.attr^.Coerce.postmode);  AssHString('	');  AssAdrMode( AT0.RegOrCMem.am);  AssHString(',');  AssRegister2 ( RegAlloc.allocation[ai].reg,e^.attr^.Coerce.postmode);  AssLn; 
	END;
	
   | 90 : 
  EmitNtfreg(e^.son[1],nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 90/1785 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' Trunc ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

	GetLabel(lab);
 AssHString('	fcoml	TwoExp31_');  AssLn; 
 AssHString('	fstsw	%ax');  AssLn; 
 AssHString('	sahf');  AssLn; 
 AssHString('	jb	');  AssString( lab^);  AssLn; 
 AssHString('	fsubl	TwoExp32_');  AssLn; 
 AssString( lab^);  AssHString(':');  AssLn; 
 AssHString('	subl	$4,%esp');  AssLn; 
	CheckRoundMode2 (RndZero, RndNegInf);
 AssHString('	fistpl	(%esp)');  AssLn; 
 AssHString('	popl	');  AssRegister(RegAlloc.allocation[ai].reg);  AssLn; 
	PopFStack;
	
   | 91 : 
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 91/1735 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' Cap ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 GetLabel(lab);
 AssHString('	cmpb	$');  AssInt ( ORD('a'));  AssHString(',');  AssByteRegister ( RegAlloc.allocation[ai].op[1]);  AssLn; 
 AssHString('	jl	');  AssString( lab^);  AssLn; 
 AssHString('	cmpb	$');  AssInt ( ORD('z'));  AssHString(',');  AssByteRegister ( RegAlloc.allocation[ai].op[1]);  AssLn; 
 AssHString('	jg	');  AssString( lab^);  AssLn; 
 AssHString('	subb	$');  AssInt ( ORD('a') - ORD('A'));  AssHString(',');  AssByteRegister ( RegAlloc.allocation[ai].op[1]);  AssLn; 
 AssString( lab^);  AssHString(':');  AssLn; 
	
   | 92 : 
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
  EmitNtRegOrCMemOrIm(e^.son[2],nest+1,AT1 ); 
  EmitNtreg(e^.son[3],nest+1,AT2 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 92/1713 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' SetPlusRange ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 GetLabel(lab);
 AssHString(' 	sub');  AssSuffix( e^.attr^.SetPlusRange.LwbMode);  AssHString(' 	');  AssAdrMode( AT1.RegOrCMemOrIm.am);  AssHString(',');  AssRegister2 ( Regecx,e^.attr^.SetPlusRange.LwbMode);  AssLn; 
 AssHString(' 	jl	');  AssString( lab^);  AssLn; 
 AssHString('	incb	%cl');  AssLn; 
 AssHString('	movl	$-1,');  AssRegister(RegAlloc.allocation[ai].scr[1]);  AssLn; 
 AssHString('	shll	%cl,');  AssRegister(RegAlloc.allocation[ai].scr[1]);  AssLn; 
 AssHString('	notl	');  AssRegister(RegAlloc.allocation[ai].scr[1]);  AssLn; 
 AssHString('	mov');  AssSuffix( e^.attr^.SetPlusRange.LwbMode);  AssHString('	');  AssAdrMode( AT1.RegOrCMemOrIm.am);  AssHString(',');  AssRegister2 ( Regecx,e^.attr^.SetPlusRange.LwbMode);  AssLn; 
 AssHString('	shll	%cl,');  AssRegister(RegAlloc.allocation[ai].scr[1]);  AssLn; 
 AssHString('	orl	');  AssRegister(RegAlloc.allocation[ai].scr[1]);  AssHString(',');  AssRegister(RegAlloc.allocation[ai].op[1]);  AssLn; 
 AssString( lab^);  AssHString(':');  AssLn; 
       
   | 93 : 
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
  EmitNtConstant(e^.son[2],nest+1,AT1 ); 
  EmitNtConstant(e^.son[3],nest+1,AT2 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 93/1707 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' SetPlusRange ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 AssHString('	orl	$');  AssInt ( PowerTable[e^.son[3]^.gcg^.Constant.val+1]-PowerTable[e^.son[2]^.gcg^.Constant.val]);  AssHString(',');  AssRegister(RegAlloc.allocation[ai].op[1]);  AssHString(' ');  AssLn; 
   | 94 : 
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
  EmitNtRegOrIm(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 94/1701 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' SetPlusSingleL ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 AssHString('	btsl	');  AssAdrMode( AT1.RegOrIm.am);  AssHString(', ');  AssRegister(RegAlloc.allocation[ai].op[1]);  AssHString(' ');  AssLn; 
   | 95 : 
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
  EmitNtConstant(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 95/1695 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' SetPlusSingleL ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 AssHString(' 	orl	$');  AssInt ( PowerTable[e^.son[2]^.gcg^.Constant.val]);  AssHString(', ');  AssRegister(RegAlloc.allocation[ai].op[1]);  AssHString(' ');  AssLn; 
   | 96 : 
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
  EmitNtRegOrCMemOrIm(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 96/1672 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' SetSymDifference ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 AssHString(' 	xorl	');  AssAdrMode( AT1.RegOrCMemOrIm.am);  AssHString(', ');  AssRegister(RegAlloc.allocation[ai].op[1]);  AssHString(' ');  AssLn; 
   | 97 : 
  EmitNtRegOrCMemOrIm(e^.son[1],nest+1,AT0 ); 
  EmitNtreg(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 97/1672 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' SetSymDifference ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 AssHString(' 	xorl	');  AssAdrMode( AT0.RegOrCMemOrIm.am);  AssHString(', ');  AssRegister(RegAlloc.allocation[ai].op[2]);  AssHString(' ');  AssLn; 
   | 98 : 
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
  EmitNtRegOrCMemOrIm(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 98/1653 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' SetIntersection ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 AssHString(' 	andl	');  AssAdrMode( AT1.RegOrCMemOrIm.am);  AssHString(', ');  AssRegister(RegAlloc.allocation[ai].op[1]);  AssHString(' ');  AssLn; 
   | 99 : 
  EmitNtRegOrCMemOrIm(e^.son[1],nest+1,AT0 ); 
  EmitNtreg(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 99/1653 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' SetIntersection ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 AssHString(' 	andl	');  AssAdrMode( AT0.RegOrCMemOrIm.am);  AssHString(', ');  AssRegister(RegAlloc.allocation[ai].op[2]);  AssHString(' ');  AssLn; 
   | 100 : 
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
  EmitNtConstant(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 100/1618 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' SetDifference ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

 AssHString(' 	andl	$');  AssInt ( INTEGER(BITSET(-1) - BITSET(e^.son[2]^.gcg^.Constant.val)));  AssHString(', ');  AssRegister(RegAlloc.allocation[ai].op[1]);  AssLn; 
	
   | 101 : 
  EmitNtRegOrCMemOrIm(e^.son[1],nest+1,AT0 ); 
  EmitNtreg(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 101/1609 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' SetDifference ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

 AssHString('	notl	');  AssRegister(RegAlloc.allocation[ai].op[2]);  AssLn; 
 AssHString(' 	andl	');  AssAdrMode( AT0.RegOrCMemOrIm.am);  AssHString(', ');  AssRegister(RegAlloc.allocation[ai].op[2]);  AssLn; 
	
   | 102 : 
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
  EmitNtRegOrCMemOrIm(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 102/1590 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' SetUnion ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 AssHString(' 	orl	');  AssAdrMode( AT1.RegOrCMemOrIm.am);  AssHString(', ');  AssRegister(RegAlloc.allocation[ai].op[1]);  AssHString(' ');  AssLn; 
   | 103 : 
  EmitNtRegOrCMemOrIm(e^.son[1],nest+1,AT0 ); 
  EmitNtreg(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 103/1590 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' SetUnion ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 AssHString(' 	orl	');  AssAdrMode( AT0.RegOrCMemOrIm.am);  AssHString(', ');  AssRegister(RegAlloc.allocation[ai].op[2]);  AssHString(' ');  AssLn; 
   | 104 : 
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
  EmitNtreg(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 104/1503 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' FixedMod ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

 AssHString('	cwd');  AssLn; 
 AssHString('	idiv');  AssSuffix( e^.attr^.FixedMod.mode);  AssHString('	');  AssRegister2 ( RegAlloc.allocation[ai].op[2],e^.attr^.FixedMod.mode);  AssLn; 
	
   | 105 : 
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
  EmitNtreg(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 105/1492 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' FixedMod ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

 AssHString('	xor');  AssSuffix( e^.attr^.FixedMod.mode);  AssHString('	');  AssRegister2 ( RegAlloc.allocation[ai].reg,e^.attr^.FixedMod.mode);  AssHString(',');  AssRegister2 ( RegAlloc.allocation[ai].reg,e^.attr^.FixedMod.mode);  AssLn; 
 AssHString('	div');  AssSuffix( e^.attr^.FixedMod.mode);  AssHString('	');  AssRegister2 ( RegAlloc.allocation[ai].op[2],e^.attr^.FixedMod.mode);  AssLn; 
	
   | 106 : 
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
  EmitNtreg(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 106/1481 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' FixedMod ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

 AssHString('	cdq');  AssLn; 
 AssHString('	idiv');  AssSuffix( e^.attr^.FixedMod.mode);  AssHString('	');  AssRegister2 ( RegAlloc.allocation[ai].op[2],e^.attr^.FixedMod.mode);  AssLn; 
	
   | 107 : 
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
  EmitNtConstant(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 107/1460 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' FixedMod ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 AssHString('	and');  AssSuffix( e^.attr^.FixedMod.mode);  AssHString('	$');  AssInt ( e^.son[2]^.gcg^.Constant.val-1);  AssHString(', ');  AssRegister2 ( RegAlloc.allocation[ai].op[1],e^.attr^.FixedMod.mode);  AssHString(' ');  AssLn; 
   | 108 : 
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
  EmitNtreg(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 108/1443 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' FixedDiv ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

 AssHString('	cwd');  AssLn; 
 AssHString('	idiv');  AssSuffix( e^.attr^.FixedDiv.mode);  AssHString('	');  AssRegister2 ( RegAlloc.allocation[ai].op[2],e^.attr^.FixedDiv.mode);  AssLn; 
	
   | 109 : 
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
  EmitNtreg(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 109/1431 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' FixedDiv ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

 AssHString('	xor');  AssSuffix( e^.attr^.FixedDiv.mode);  AssHString('	');  AssRegister2 ( Regedx,e^.attr^.FixedDiv.mode);  AssHString(',');  AssRegister2 ( Regedx,e^.attr^.FixedDiv.mode);  AssLn; 
 AssHString('	div');  AssSuffix( e^.attr^.FixedDiv.mode);  AssHString('	');  AssRegister2 ( RegAlloc.allocation[ai].op[2],e^.attr^.FixedDiv.mode);  AssLn; 
	
   | 110 : 
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
  EmitNtreg(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 110/1419 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' FixedDiv ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

 AssHString('	cdq');  AssLn; 
 AssHString('	idiv');  AssSuffix( e^.attr^.FixedDiv.mode);  AssHString('	');  AssRegister2 ( RegAlloc.allocation[ai].op[2],e^.attr^.FixedDiv.mode);  AssLn; 
	
   | 111 : 
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
  EmitNtConstant(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 111/1388 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' FixedDiv ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 AssHString('	sar');  AssSuffix( e^.attr^.FixedDiv.mode);  AssHString('	$');  AssInt ( Log2 (e^.son[2]^.gcg^.Constant.val));  AssHString(', ');  AssRegister2 ( RegAlloc.allocation[ai].op[1],e^.attr^.FixedDiv.mode);  AssHString(' ');  AssLn; 
   | 112 : 
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
  EmitNtConstant(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 112/1365 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' FixedDiv ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 AssHString('	shr');  AssSuffix( e^.attr^.FixedDiv.mode);  AssHString('	$');  AssInt ( Log2 (e^.son[2]^.gcg^.Constant.val));  AssHString(', ');  AssRegister2 ( RegAlloc.allocation[ai].op[1],e^.attr^.FixedDiv.mode);  AssHString(' ');  AssLn; 
   | 113 : 
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
  EmitNtConstant(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 113/1349 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' FixedDiv ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

   | 114 : 
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
  EmitNtConstant(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 114/1343 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' FixedDiv ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

   | 115 : 
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
  EmitNtreg(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 115/1317 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' FixedMult ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 AssHString('	mul');  AssSuffix( e^.attr^.FixedMult.mode);  AssHString('	');  AssRegister2 ( RegAlloc.allocation[ai].op[2],e^.attr^.FixedMult.mode);  AssHString(' ');  AssLn; 
   | 116 : 
  EmitNtSimpleVariable(e^.son[1]^.son[1],nest+1,AT0 ); 
  EmitNtSimpleVariable(e^.son[2]^.son[1],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 116/1287 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' FixedMult ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

EmitIndex (e^.son[1]^.son[1]^.gcg^.SimpleVariable.base, e^.son[1]^.son[1]^.gcg^.SimpleVariable.index, RegAlloc.allocation[ai].reg);
 AssHString('	mov');  AssSuffix( e^.attr^.FixedMult.mode);  AssHString('	');  AssMemAdr( e^.son[1]^.son[1]^.gcg^.SimpleVariable.base);  AssHString(',');  AssRegister2 ( RegAlloc.allocation[ai].reg,e^.attr^.FixedMult.mode);  AssLn; 
 AssHString('	imul');  AssSuffix( e^.attr^.FixedMult.mode);  AssHString('	');  AssRegister2 ( RegAlloc.allocation[ai].reg,e^.attr^.FixedMult.mode);  AssHString(',');  AssRegister2 ( RegAlloc.allocation[ai].reg,e^.attr^.FixedMult.mode);  AssLn; 
	
   | 117 : 
  EmitNtConstant(e^.son[1],nest+1,AT0 ); 
  EmitNtRegOrCMem(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 117/1281 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' FixedMult ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 AssHString('	imul');  AssSuffix( e^.attr^.FixedMult.mode);  AssHString('	$');  AssInt ( e^.son[1]^.gcg^.Constant.val);  AssHString(',');  AssAdrMode( AT1.RegOrCMem.am);  AssHString(',');  AssRegister2 ( RegAlloc.allocation[ai].reg,e^.attr^.FixedMult.mode);  AssHString(' ');  AssLn; 
   | 118 : 
  EmitNtRegOrCMem(e^.son[1],nest+1,AT0 ); 
  EmitNtConstant(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 118/1281 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' FixedMult ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 AssHString('	imul');  AssSuffix( e^.attr^.FixedMult.mode);  AssHString('	$');  AssInt ( e^.son[2]^.gcg^.Constant.val);  AssHString(',');  AssAdrMode( AT0.RegOrCMem.am);  AssHString(',');  AssRegister2 ( RegAlloc.allocation[ai].reg,e^.attr^.FixedMult.mode);  AssHString(' ');  AssLn; 
   | 119 : 
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
  EmitNtRegOrCMemOrIm(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 119/1274 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' FixedMult ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 AssHString('	imul');  AssSuffix( e^.attr^.FixedMult.mode);  AssHString('	');  AssAdrMode( AT1.RegOrCMemOrIm.am);  AssHString(',');  AssRegister2 ( RegAlloc.allocation[ai].op[1],e^.attr^.FixedMult.mode);  AssHString(' ');  AssLn; 
   | 120 : 
  EmitNtRegOrCMemOrIm(e^.son[1],nest+1,AT0 ); 
  EmitNtreg(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 120/1274 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' FixedMult ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 AssHString('	imul');  AssSuffix( e^.attr^.FixedMult.mode);  AssHString('	');  AssAdrMode( AT0.RegOrCMemOrIm.am);  AssHString(',');  AssRegister2 ( RegAlloc.allocation[ai].op[2],e^.attr^.FixedMult.mode);  AssHString(' ');  AssLn; 
   | 121 : 
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
  EmitNtConstant(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 121/1206 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' FixedMult ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 AssHString('	shl');  AssSuffix( e^.attr^.FixedMult.mode);  AssHString('	$');  AssInt ( Log2(e^.son[2]^.gcg^.Constant.val));  AssHString(', ');  AssRegister2 ( RegAlloc.allocation[ai].op[1],e^.attr^.FixedMult.mode);  AssHString(' ');  AssLn; 
   | 122 : 
  EmitNtConstant(e^.son[1],nest+1,AT0 ); 
  EmitNtreg(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 122/1206 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' FixedMult ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 AssHString('	shl');  AssSuffix( e^.attr^.FixedMult.mode);  AssHString('	$');  AssInt ( Log2(e^.son[1]^.gcg^.Constant.val));  AssHString(', ');  AssRegister2 ( RegAlloc.allocation[ai].op[2],e^.attr^.FixedMult.mode);  AssHString(' ');  AssLn; 
   | 123 : 
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
  EmitNtConstant(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 123/1160 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' FixedMult ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

 AssHString('	add');  AssSuffix( e^.attr^.FixedMult.mode);  AssHString('	');  AssRegister2 ( RegAlloc.allocation[ai].op[1],e^.attr^.FixedMult.mode);  AssHString(', ');  AssRegister2 ( RegAlloc.allocation[ai].op[1],e^.attr^.FixedMult.mode);  AssLn; 
 AssHString('	add');  AssSuffix( e^.attr^.FixedMult.mode);  AssHString('	');  AssRegister2 ( RegAlloc.allocation[ai].op[1],e^.attr^.FixedMult.mode);  AssHString(', ');  AssRegister2 ( RegAlloc.allocation[ai].op[1],e^.attr^.FixedMult.mode);  AssLn; 
	
   | 124 : 
  EmitNtConstant(e^.son[1],nest+1,AT0 ); 
  EmitNtreg(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 124/1160 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' FixedMult ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

 AssHString('	add');  AssSuffix( e^.attr^.FixedMult.mode);  AssHString('	');  AssRegister2 ( RegAlloc.allocation[ai].op[2],e^.attr^.FixedMult.mode);  AssHString(', ');  AssRegister2 ( RegAlloc.allocation[ai].op[2],e^.attr^.FixedMult.mode);  AssLn; 
 AssHString('	add');  AssSuffix( e^.attr^.FixedMult.mode);  AssHString('	');  AssRegister2 ( RegAlloc.allocation[ai].op[2],e^.attr^.FixedMult.mode);  AssHString(', ');  AssRegister2 ( RegAlloc.allocation[ai].op[2],e^.attr^.FixedMult.mode);  AssLn; 
	
   | 125 : 
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
  EmitNtConstant(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 125/1153 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' FixedMult ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 AssHString('	add');  AssSuffix( e^.attr^.FixedMult.mode);  AssHString('	');  AssRegister2 ( RegAlloc.allocation[ai].op[1],e^.attr^.FixedMult.mode);  AssHString(', ');  AssRegister2 ( RegAlloc.allocation[ai].op[1],e^.attr^.FixedMult.mode);  AssHString(' ');  AssLn; 
   | 126 : 
  EmitNtConstant(e^.son[1],nest+1,AT0 ); 
  EmitNtreg(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 126/1153 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' FixedMult ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 AssHString('	add');  AssSuffix( e^.attr^.FixedMult.mode);  AssHString('	');  AssRegister2 ( RegAlloc.allocation[ai].op[2],e^.attr^.FixedMult.mode);  AssHString(', ');  AssRegister2 ( RegAlloc.allocation[ai].op[2],e^.attr^.FixedMult.mode);  AssHString(' ');  AssLn; 
   | 127 : 
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
  EmitNtConstant(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 127/1140 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' FixedMult ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

   | 128 : 
  EmitNtConstant(e^.son[1],nest+1,AT0 ); 
  EmitNtreg(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 128/1140 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' FixedMult ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

   | 129 : 
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
  EmitNtRegOrCMemOrIm(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 129/1090 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' FixedMinus ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 AssHString(' 	sub');  AssSuffix( e^.son[2]^.gcg^.RegOrCMemOrIm.mode);  AssHString('	');  AssAdrMode( AT1.RegOrCMemOrIm.am);  AssHString(',');  AssRegister2 ( RegAlloc.allocation[ai].op[1],e^.son[2]^.gcg^.RegOrCMemOrIm.mode);  AssHString(' ');  AssLn; 
   | 130 : 
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
  EmitNtRegOrCMemOrIm(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 130/993 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' FixedPlus ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 AssHString(' 	add');  AssSuffix( e^.son[2]^.gcg^.RegOrCMemOrIm.mode);  AssHString('	');  AssAdrMode( AT1.RegOrCMemOrIm.am);  AssHString(',');  AssRegister2 ( RegAlloc.allocation[ai].op[1],e^.son[2]^.gcg^.RegOrCMemOrIm.mode);  AssHString(' ');  AssLn; 
   | 131 : 
  EmitNtRegOrCMemOrIm(e^.son[1],nest+1,AT0 ); 
  EmitNtreg(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 131/993 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' FixedPlus ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 AssHString(' 	add');  AssSuffix( e^.son[1]^.gcg^.RegOrCMemOrIm.mode);  AssHString('	');  AssAdrMode( AT0.RegOrCMemOrIm.am);  AssHString(',');  AssRegister2 ( RegAlloc.allocation[ai].op[2],e^.son[1]^.gcg^.RegOrCMemOrIm.mode);  AssHString(' ');  AssLn; 
   | 132 : 
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 132/922 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' FixedAbs ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

	GetLabel (lab);
 AssHString('	cmp');  AssSuffix( e^.attr^.FixedAbs.mode);  AssHString('	$0,');  AssRegister2 ( RegAlloc.allocation[ai].op[1],e^.attr^.FixedAbs.mode);  AssLn; 
 AssHString('	jg	');  AssString( lab^);  AssLn; 
 AssHString('	neg');  AssSuffix( e^.attr^.FixedAbs.mode);  AssHString('	');  AssRegister2 ( RegAlloc.allocation[ai].op[1],e^.attr^.FixedAbs.mode);  AssLn; 
 AssString( lab^);  AssHString(':');  AssLn; 
	
   | 133 : 
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 133/902 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' FixedNegate ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

 AssHString('	neg');  AssSuffix( e^.attr^.FixedNegate.mode);  AssHString('	');  AssRegister2 ( RegAlloc.allocation[ai].op[1],e^.attr^.FixedNegate.mode);  AssLn; 
	
   | 134 : 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 134/620 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' FrameBase ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

   | 135 : 
  EmitNtRegOrCMemOrIm(e,nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 135/445 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' RegOrCMemOrIm ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

 AssHString('	mov');  AssSuffix( e^.gcg^.RegOrCMemOrIm.mode);  AssHString('	');  AssAdrMode( AT0.RegOrCMemOrIm.am);  AssHString(',');  AssRegister2 ( RegAlloc.allocation[ai].reg,e^.gcg^.RegOrCMemOrIm.mode);  AssLn; 
	
   | 136 : 
  EmitNtmem(e,nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 136/430 Cost=');
          WriteInt    (e^.gcg^.cost [ntreg],1);
          WriteString (' mem ->   reg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

	IF (AT0.mem.am.offset = 0) AND
	   (AT0.mem.am.faktor = 1) AND
	   (AT0.mem.am.symbol = NullSymb) AND
	   (((AT0.mem.am.base  = RegAlloc.allocation[ai].reg) AND (AT0.mem.am.index = RegNil)) OR
	    ((AT0.mem.am.index = RegAlloc.allocation[ai].reg) AND (AT0.mem.am.base  = RegNil))) THEN
	  (* skip leal (reg),reg *)
	ELSE
 AssHString('	leal	');  AssMemAdr( AT0.mem.am);  AssHString(',');  AssRegister(RegAlloc.allocation[ai].reg);  AssLn; 
	END;
	
   END;
   IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteAttrreg (resAttributes);
       WriteLn;
   END;
   IF RegAlloc.allocation [ai].actionafter THEN  (* ++ he 08/91 *)
 ; 
      WITH RegAlloc.allocation[ai] DO 
         IF spilllocation#0 THEN 
            Spill (reg, spilllocation);
            IF IR.OptEmitMatch THEN 
                WriteString (' Spill Register ');
                PrintRegister (reg);
                WriteString (' into ');
                WriteInt (spilllocation,1);
                WriteLn;
            END;
         ELSE 
            LR (regmove, reg);
            IF IR.OptEmitMatch THEN 
                WriteString (' Copy Register ');
                PrintRegister (reg);
                WriteString (' into ');
                PrintRegister (regmove);
                WriteLn;
            END;
         END;   
      END;
   END;                                           (* -- he 08/91 *)
END EmitNtreg;

PROCEDURE EmitNtfreg (e : IR.Expression; nest : INTEGER
       ; VAR resAttributes : NtAttributes); 
VAR
    AT0   :  NtAttributes;
    AT1   :  NtAttributes;
    AT2   :  NtAttributes;

BEGIN
   CASE e^.gcg^.rule [ntfreg] OF 
   | 137 : 
  EmitNtreg(e^.son[1]^.son[2],nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 137/2728 Cost=');
          WriteInt    (e^.gcg^.cost [ntfreg],1);
          WriteString (' FunctionCall ->   freg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

	PushFStack;
 AssHString('	pushl	');  AssRegister(RegAlloc.allocation[ai].op[1]);  AssLn; 
 AssHString('	fildl	(%esp)');  AssLn; 
 AssHString('	addl	$4,%esp');  AssLn; 
	
   | 138 : 
  EmitNtCMem(e^.son[1]^.son[2],nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 138/2713 Cost=');
          WriteInt    (e^.gcg^.cost [ntfreg],1);
          WriteString (' FunctionCall ->   freg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

	PushFStack;
 AssHString('	fildl	');  AssMemAdr( AT0.CMem.am);  AssLn; 
	
   | 139 : 
  EmitNtfreg(e^.son[1]^.son[2],nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 139/2697 Cost=');
          WriteInt    (e^.gcg^.cost [ntfreg],1);
          WriteString (' FunctionCall ->   freg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

	PushFStack;
 AssHString('	flds	RealOne_');  AssLn; 
 AssHString('	fpatan');  AssLn; 
	PopFStack;
	
   | 140 : 
  EmitNtfreg(e^.son[1]^.son[2],nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 140/2686 Cost=');
          WriteInt    (e^.gcg^.cost [ntfreg],1);
          WriteString (' FunctionCall ->   freg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 AssHString('	fcos');  AssLn; 
   | 141 : 
  EmitNtfreg(e^.son[1]^.son[2],nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 141/2675 Cost=');
          WriteInt    (e^.gcg^.cost [ntfreg],1);
          WriteString (' FunctionCall ->   freg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 AssHString('	fsin');  AssLn; 
   | 142 : 
  EmitNtloadln2(e^.son[1]^.son[1],nest+1,AT0 ); 
  EmitNtfreg(e^.son[1]^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 142/2641 Cost=');
          WriteInt    (e^.gcg^.cost [ntfreg],1);
          WriteString (' FunctionCall ->   freg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

	IF CurFStackSize < 2 THEN
	(* Es wurde RealLn2_ zwar geladen, aber dann wegen Funktionsaufrufen *)
	(* als Tempo in den Speicher ausgelagert. Deshalb wird RealLn2_      *)
	(* hier erneut geladen, die ersten beiden Stackregister vertauscht,  *)
	(* und die Markierung als Tempo (die Speicherstelle) geloescht.      *)
	(* Im Normalfall wird durch das Nichtterminalloadln2 die Konstante   *)
	(* RealLn2_ vor (!) der Auswertung des Funktionsarguments in RegAlloc.allocation[ai].reg*)
	(* auf den Floating-Point-Stack geladen.			     *)
 AssHString('	fldl	RealLn2_');  AssLn; 
 AssHString('	fxch	%st(1)');  AssLn; 
	FStackTempo[FStackStart+1] := NoTempo;
	INC (CurFStackSize);
	END;
 AssHString('	fyl2x');  AssLn; 
	PopFStack;
	
   | 143 : 
  EmitNtfreg(e^.son[1]^.son[2],nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 143/2603 Cost=');
          WriteInt    (e^.gcg^.cost [ntfreg],1);
          WriteString (' FunctionCall ->   freg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

	(* e^x = 2^(x * log2e) *) 
 AssHString('	fmull	RealLog2e_');  AssLn; 
	(* Normierung noetig: Fuer f2xm1 muss -0.5 <= st <= +0.5 gelten *)
	(* Daher Aufteilung von x = hi + lo mit |lo| <= 0.5		*)
	(* Neues Register fuer hi, weil x noch gebraucht wird 		*)
	PushFStack;
 AssHString('	fld	%st');  AssLn; 
	(* Rundung hier zur naechsten ganzen Zahl, deshalb Aenderung    *)
	(* des Steuerwortes						*)
	CheckRoundMode (RndNearest);
 AssHString('	frndint');  AssLn; 
	(* Neues Register fuer lo, weil hi noch gebraucht wird 		*)
	PushFStack;
 AssHString('	fld	%st');  AssLn; 
	(* Differenz von x und hi -> lo					*)
 AssHString('	fsubr	%st(2),%st');  AssLn; 
	(* Berechnung von 2^lo						*)
 AssHString('	f2xm1');  AssLn; 
 AssHString('	fadds	RealOne_');  AssLn; 
	(* Berechnung 2^hi * 2^lo					*)
 AssHString('	fscale');  AssLn; 
	(* Benutzte Register wieder poppen (und Ergebnis weitergeben)	*)
 AssHString('	fstp	%st(1)');  AssLn; 
	PopFStack;
 AssHString('	fstp	%st(1)');  AssLn; 
	PopFStack;
	
   | 144 : 
  EmitNtfreg(e^.son[1]^.son[2],nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 144/2592 Cost=');
          WriteInt    (e^.gcg^.cost [ntfreg],1);
          WriteString (' FunctionCall ->   freg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 AssHString('	fsqrt');  AssLn; 
   | 145 : 
  EmitNtarglist(e^.son[1],nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 145/2552 Cost=');
          WriteInt    (e^.gcg^.cost [ntfreg],1);
          WriteString (' FunctionCall ->   freg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

	SpillFStack;
	CurRoundMode := RndUnknown;
 AssHString('	call	');  AssString( e^.son[2]^.attr^.ProcedureConstant.index^.Entry^);  AssLn; 
	IF e^.attr^.FunctionCall.paramsize # 0 THEN 
	(* e^.attr^.FunctionCall.paramsize := (e^.attr^.FunctionCall.paramsize+3) DIV 4 * 4; *)
 AssHString('	addl	$');  AssInt ( e^.attr^.FunctionCall.paramsize);  AssHString(', %esp');  AssLn; 
	END;
	PushFStack;
	
   | 146 : 
  EmitNtarglist(e^.son[1],nest+1,AT0 ); 
  EmitNtreg(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 146/2537 Cost=');
          WriteInt    (e^.gcg^.cost [ntfreg],1);
          WriteString (' FunctionCall ->   freg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

	SpillFStack;
	CurRoundMode := RndUnknown;
 AssHString('	call	');  AssRegister(RegAlloc.allocation[ai].op[2]);  AssLn; 
	IF e^.attr^.FunctionCall.paramsize # 0 THEN 
	(* e^.attr^.FunctionCall.paramsize := (e^.attr^.FunctionCall.paramsize+3) DIV 4 * 4; *)
 AssHString('	addl	$');  AssInt ( e^.attr^.FunctionCall.paramsize);  AssHString(', %esp');  AssLn; 
	END;
	PushFStack;
	
   | 147 : 
  EmitNtfreg(e^.son[1],nest+1,AT0 ); 
  EmitNtCMem(e^.son[2],nest+1,AT1 ); 
  EmitNtCMem(e^.son[3],nest+1,AT2 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 147/2010 Cost=');
          WriteInt    (e^.gcg^.cost [ntfreg],1);
          WriteString (' CheckL ->   freg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

	GetLabel(lab);
	GetLabel(lab2);
	IF e^.attr^.CheckL.CheckLwb THEN
 AssHString('	fcom');  AssSuffix( e^.attr^.CheckL.LwbMode);  AssHString('	');  AssMemAdr( AT1.CMem.am);  AssLn; 
 AssHString('	fstsw	%ax');  AssLn; 
 AssHString('	sahf');  AssLn; 
 AssHString('	jb	');  AssString( lab2^);  AssLn; 
	END;
	IF e^.attr^.CheckL.CheckUpb THEN
 AssHString('	fcom');  AssSuffix( e^.attr^.CheckL.UpbMode);  AssHString('	');  AssMemAdr( AT2.CMem.am);  AssLn; 
 AssHString('	fstsw	%ax');  AssLn; 
 AssHString('	sahf');  AssLn; 
 AssHString('	jbe	');  AssString( lab^);  AssLn; 
	ELSE
 AssHString('	jmp	');  AssString( lab^);  AssLn; 
	END;
 AssString( lab2^);  AssHString(':');  AssLn; 
 AssHString('   	call	BoundErr_		');  AssLn; 
 AssString( lab^);  AssHString(':');  AssLn; 
	
   | 148 : 
  EmitNtfreg(e^.son[1],nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 148/1897 Cost=');
          WriteInt    (e^.gcg^.cost [ntfreg],1);
          WriteString (' Coerce ->   freg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

   | 149 : 
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 149/1760 Cost=');
          WriteInt    (e^.gcg^.cost [ntfreg],1);
          WriteString (' Float ->   freg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

	GetLabel(lab);
	PushFStack;
 AssHString('	pushl	');  AssRegister(RegAlloc.allocation[ai].op[1]);  AssLn; 
 AssHString('	fildl	(%esp)');  AssLn; 
 AssHString('	addl	$4,%esp');  AssLn; 
 AssHString('	cmpl	$0x7fffffff,');  AssRegister(RegAlloc.allocation[ai].op[1]);  AssLn; 
 AssHString('	jbe	');  AssString( lab^);  AssLn; 
 AssHString('	faddl	TwoExp32_');  AssLn; 
 AssString( lab^);  AssHString(':');  AssLn; 
	
   | 150 : 
  EmitNtCMem(e^.son[1],nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 150/1748 Cost=');
          WriteInt    (e^.gcg^.cost [ntfreg],1);
          WriteString (' Float ->   freg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

	GetLabel(lab);
	PushFStack;
 AssHString('	fildl	');  AssMemAdr( AT0.CMem.am);  AssLn; 
 AssHString('	cmpl	$0x7fffffff,');  AssMemAdr( AT0.CMem.am);  AssLn; 
 AssHString('	jbe	');  AssString( lab^);  AssLn; 
 AssHString('	faddl	TwoExp32_');  AssLn; 
 AssString( lab^);  AssHString(':');  AssLn; 
	
   | 151 : 
  EmitNtfreg(e^.son[1],nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 151/1582 Cost=');
          WriteInt    (e^.gcg^.cost [ntfreg],1);
          WriteString (' FloatAbs ->   freg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 AssHString('	fabs ');  AssLn; 
   | 152 : 
  EmitNtfreg(e^.son[1],nest+1,AT0 ); 
  EmitNtfstack(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 152/1577 Cost=');
          WriteInt    (e^.gcg^.cost [ntfreg],1);
          WriteString (' FloatDiv ->   freg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 FloatOperation ('fdivr'); 
   | 153 : 
  EmitNtfstack(e^.son[1],nest+1,AT0 ); 
  EmitNtreg(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 153/1572 Cost=');
          WriteInt    (e^.gcg^.cost [ntfreg],1);
          WriteString (' FloatDiv ->   freg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 FloatOperation ('fdiv'); 
   | 154 : 
  EmitNtCMem(e^.son[1],nest+1,AT0 ); 
  EmitNtfreg(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 154/1567 Cost=');
          WriteInt    (e^.gcg^.cost [ntfreg],1);
          WriteString (' FloatDiv ->   freg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 AssHString('	fdivr');  AssSuffix( e^.attr^.FloatDiv.mode);  AssHString('	');  AssMemAdr( AT0.CMem.am);  AssHString(' ');  AssLn; 
   | 155 : 
  EmitNtfreg(e^.son[1],nest+1,AT0 ); 
  EmitNtCMem(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 155/1562 Cost=');
          WriteInt    (e^.gcg^.cost [ntfreg],1);
          WriteString (' FloatDiv ->   freg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 AssHString('	fdiv');  AssSuffix( e^.attr^.FloatDiv.mode);  AssHString('	');  AssMemAdr( AT1.CMem.am);  AssHString(' ');  AssLn; 
   | 156 : 
  EmitNtfreg(e^.son[1],nest+1,AT0 ); 
  EmitNtfstack(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 156/1557 Cost=');
          WriteInt    (e^.gcg^.cost [ntfreg],1);
          WriteString (' FloatMult ->   freg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 FloatOperation ('fmul'); 
   | 157 : 
  EmitNtfstack(e^.son[1],nest+1,AT0 ); 
  EmitNtfreg(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 157/1557 Cost=');
          WriteInt    (e^.gcg^.cost [ntfreg],1);
          WriteString (' FloatMult ->   freg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 FloatOperation ('fmul'); 
   | 158 : 
  EmitNtfreg(e^.son[1],nest+1,AT0 ); 
  EmitNtCMem(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 158/1552 Cost=');
          WriteInt    (e^.gcg^.cost [ntfreg],1);
          WriteString (' FloatMult ->   freg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 AssHString('	fmul');  AssSuffix( e^.attr^.FloatMult.mode);  AssHString('	');  AssMemAdr( AT1.CMem.am);  AssHString(' ');  AssLn; 
   | 159 : 
  EmitNtCMem(e^.son[1],nest+1,AT0 ); 
  EmitNtfreg(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 159/1552 Cost=');
          WriteInt    (e^.gcg^.cost [ntfreg],1);
          WriteString (' FloatMult ->   freg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 AssHString('	fmul');  AssSuffix( e^.attr^.FloatMult.mode);  AssHString('	');  AssMemAdr( AT0.CMem.am);  AssHString(' ');  AssLn; 
   | 160 : 
  EmitNtfreg(e^.son[1],nest+1,AT0 ); 
  EmitNtfstack(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 160/1547 Cost=');
          WriteInt    (e^.gcg^.cost [ntfreg],1);
          WriteString (' FloatMinus ->   freg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 FloatOperation ('fsub'); 
   | 161 : 
  EmitNtfstack(e^.son[1],nest+1,AT0 ); 
  EmitNtfreg(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 161/1542 Cost=');
          WriteInt    (e^.gcg^.cost [ntfreg],1);
          WriteString (' FloatMinus ->   freg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 FloatOperation ('fsubr'); 
   | 162 : 
  EmitNtCMem(e^.son[1],nest+1,AT0 ); 
  EmitNtfreg(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 162/1537 Cost=');
          WriteInt    (e^.gcg^.cost [ntfreg],1);
          WriteString (' FloatMinus ->   freg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 AssHString('	fsubr');  AssSuffix( e^.attr^.FloatMinus.mode);  AssHString('	');  AssMemAdr( AT0.CMem.am);  AssHString(' ');  AssLn; 
   | 163 : 
  EmitNtfreg(e^.son[1],nest+1,AT0 ); 
  EmitNtCMem(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 163/1532 Cost=');
          WriteInt    (e^.gcg^.cost [ntfreg],1);
          WriteString (' FloatMinus ->   freg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 AssHString('	fsub');  AssSuffix( e^.attr^.FloatMinus.mode);  AssHString('	');  AssMemAdr( AT1.CMem.am);  AssHString(' ');  AssLn; 
   | 164 : 
  EmitNtfreg(e^.son[1],nest+1,AT0 ); 
  EmitNtfstack(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 164/1527 Cost=');
          WriteInt    (e^.gcg^.cost [ntfreg],1);
          WriteString (' FloatPlus ->   freg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 FloatOperation ('fadd'); 
   | 165 : 
  EmitNtfstack(e^.son[1],nest+1,AT0 ); 
  EmitNtfreg(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 165/1527 Cost=');
          WriteInt    (e^.gcg^.cost [ntfreg],1);
          WriteString (' FloatPlus ->   freg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 FloatOperation ('fadd'); 
   | 166 : 
  EmitNtfreg(e^.son[1],nest+1,AT0 ); 
  EmitNtCMem(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 166/1522 Cost=');
          WriteInt    (e^.gcg^.cost [ntfreg],1);
          WriteString (' FloatPlus ->   freg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 AssHString('	fadd');  AssSuffix( e^.attr^.FloatPlus.mode);  AssHString('	');  AssMemAdr( AT1.CMem.am);  AssHString(' ');  AssLn; 
   | 167 : 
  EmitNtCMem(e^.son[1],nest+1,AT0 ); 
  EmitNtfreg(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 167/1522 Cost=');
          WriteInt    (e^.gcg^.cost [ntfreg],1);
          WriteString (' FloatPlus ->   freg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 AssHString('	fadd');  AssSuffix( e^.attr^.FloatPlus.mode);  AssHString('	');  AssMemAdr( AT0.CMem.am);  AssHString(' ');  AssLn; 
   | 168 : 
  EmitNtfreg(e^.son[1],nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 168/1517 Cost=');
          WriteInt    (e^.gcg^.cost [ntfreg],1);
          WriteString (' FloatNegate ->   freg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 AssHString('	fchs ');  AssLn; 
   | 169 : 
  EmitNtCMem(e,nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 169/490 Cost=');
          WriteInt    (e^.gcg^.cost [ntfreg],1);
          WriteString (' CMem ->   freg');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

	PushFStack;
 AssHString('	fld');  AssSuffix( e^.gcg^.CMem.mode);  AssHString('	');  AssMemAdr( AT0.CMem.am);  AssLn; 
	
   END;
   IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteAttrfreg (resAttributes);
       WriteLn;
   END;
   IF RegAlloc.allocation [ai].actionafter THEN  (* ++ he 08/91 *)
 ; 
      WITH RegAlloc.allocation[ai] DO 
         IF spilllocation#0 THEN 
            Spill (reg, spilllocation);
            IF IR.OptEmitMatch THEN 
                WriteString (' Spill Register ');
                PrintRegister (reg);
                WriteString (' into ');
                WriteInt (spilllocation,1);
                WriteLn;
            END;
         ELSE 
            LR (regmove, reg);
            IF IR.OptEmitMatch THEN 
                WriteString (' Copy Register ');
                PrintRegister (reg);
                WriteString (' into ');
                PrintRegister (regmove);
                WriteLn;
            END;
         END;   
      END;
   END;                                           (* -- he 08/91 *)
END EmitNtfreg;

PROCEDURE EmitNtfstack (e : IR.Expression; nest : INTEGER
       ; VAR resAttributes : NtAttributes); 
VAR
    AT0   :  NtAttributes;

BEGIN
   CASE e^.gcg^.rule [ntfstack] OF 
   | 170 : 
  EmitNtfreg(e,nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 170/497 Cost=');
          WriteInt    (e^.gcg^.cost [ntfstack],1);
          WriteString (' freg ->   fstack');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

	IF Kommentar THEN
 AssHString('					/* Kettenregel ');  AssRegister(RegAlloc.allocation[ai].op[1]);  AssHString(' -> ');  AssRegister(RegAlloc.allocation[ai].reg);  AssHString(' */');  AssLn; 
	END;
	
   END;
   IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteAttrfstack (resAttributes);
       WriteLn;
   END;
   IF RegAlloc.allocation [ai].actionafter THEN  (* ++ he 08/91 *)
 ; 
      WITH RegAlloc.allocation[ai] DO 
         IF spilllocation#0 THEN 
            Spill (reg, spilllocation);
            IF IR.OptEmitMatch THEN 
                WriteString (' Spill Register ');
                PrintRegister (reg);
                WriteString (' into ');
                WriteInt (spilllocation,1);
                WriteLn;
            END;
         ELSE 
            LR (regmove, reg);
            IF IR.OptEmitMatch THEN 
                WriteString (' Copy Register ');
                PrintRegister (reg);
                WriteString (' into ');
                PrintRegister (regmove);
                WriteLn;
            END;
         END;   
      END;
   END;                                           (* -- he 08/91 *)
END EmitNtfstack;

PROCEDURE EmitNtConstant (e : IR.Expression; nest : INTEGER
       ; VAR resAttributes : NtAttributes); 
VAR
    AT0   :  NtAttributes;
    AT1   :  NtAttributes;

BEGIN
   CASE e^.gcg^.rule [ntConstant] OF 
   | 171 : 
  EmitNtFloatConstant(e^.son[1]^.son[2],nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 171/2821 Cost=');
          WriteInt    (e^.gcg^.cost [ntConstant],1);
          WriteString (' FunctionCall ->   Constant');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

   | 172 : 
  EmitNtFloatConstant(e^.son[1]^.son[2],nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 172/2779 Cost=');
          WriteInt    (e^.gcg^.cost [ntConstant],1);
          WriteString (' FunctionCall ->   Constant');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

   | 173 : 
  EmitNtConstant(e^.son[1],nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 173/1823 Cost=');
          WriteInt    (e^.gcg^.cost [ntConstant],1);
          WriteString (' Coerce ->   Constant');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

   | 174 : 
  EmitNtFloatConstant(e^.son[1],nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 174/1778 Cost=');
          WriteInt    (e^.gcg^.cost [ntConstant],1);
          WriteString (' Trunc ->   Constant');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

   | 175 : 
  EmitNtConstant(e^.son[1],nest+1,AT0 ); 
  EmitNtConstant(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 175/1455 Cost=');
          WriteInt    (e^.gcg^.cost [ntConstant],1);
          WriteString (' FixedMod ->   Constant');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

   | 176 : 
  EmitNtSimpleVariable(e^.son[1]^.son[1],nest+1,AT0 ); 
  EmitNtSimpleVariable(e^.son[2]^.son[1],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 176/1411 Cost=');
          WriteInt    (e^.gcg^.cost [ntConstant],1);
          WriteString (' FixedDiv ->   Constant');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

   | 177 : 
  EmitNtConstant(e^.son[1],nest+1,AT0 ); 
  EmitNtConstant(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 177/1338 Cost=');
          WriteInt    (e^.gcg^.cost [ntConstant],1);
          WriteString (' FixedDiv ->   Constant');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

   | 178 : 
  EmitNtRegOrCMemOrIm(e^.son[1],nest+1,AT0 ); 
  EmitNtConstant(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 178/1135 Cost=');
          WriteInt    (e^.gcg^.cost [ntConstant],1);
          WriteString (' FixedMult ->   Constant');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

   | 179 : 
  EmitNtConstant(e^.son[1],nest+1,AT0 ); 
  EmitNtRegOrCMemOrIm(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 179/1135 Cost=');
          WriteInt    (e^.gcg^.cost [ntConstant],1);
          WriteString (' FixedMult ->   Constant');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

   | 180 : 
  EmitNtConstant(e^.son[1],nest+1,AT0 ); 
  EmitNtConstant(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 180/1131 Cost=');
          WriteInt    (e^.gcg^.cost [ntConstant],1);
          WriteString (' FixedMult ->   Constant');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

   | 181 : 
  EmitNtSimpleVariable(e^.son[1]^.son[1],nest+1,AT0 ); 
  EmitNtSimpleVariable(e^.son[2]^.son[1],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 181/1123 Cost=');
          WriteInt    (e^.gcg^.cost [ntConstant],1);
          WriteString (' FixedMinus ->   Constant');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

   | 182 : 
  EmitNtConstant(e^.son[1],nest+1,AT0 ); 
  EmitNtConstant(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 182/1041 Cost=');
          WriteInt    (e^.gcg^.cost [ntConstant],1);
          WriteString (' FixedMinus ->   Constant');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

   | 183 : 
  EmitNtConstant(e^.son[1],nest+1,AT0 ); 
  EmitNtConstant(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 183/935 Cost=');
          WriteInt    (e^.gcg^.cost [ntConstant],1);
          WriteString (' FixedPlus ->   Constant');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

   | 184 : 
  EmitNtConstant(e^.son[1],nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 184/910 Cost=');
          WriteInt    (e^.gcg^.cost [ntConstant],1);
          WriteString (' FixedAbs ->   Constant');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

   | 185 : 
  EmitNtConstant(e^.son[1],nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 185/898 Cost=');
          WriteInt    (e^.gcg^.cost [ntConstant],1);
          WriteString (' FixedNegate ->   Constant');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

   | 186 : 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 186/544 Cost=');
          WriteInt    (e^.gcg^.cost [ntConstant],1);
          WriteString (' NilConstant ->   Constant');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

   | 187 : 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 187/540 Cost=');
          WriteInt    (e^.gcg^.cost [ntConstant],1);
          WriteString (' SetConstant ->   Constant');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

   | 188 : 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 188/535 Cost=');
          WriteInt    (e^.gcg^.cost [ntConstant],1);
          WriteString (' BoolConstant ->   Constant');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

   | 189 : 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 189/531 Cost=');
          WriteInt    (e^.gcg^.cost [ntConstant],1);
          WriteString (' CharConstant ->   Constant');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

   | 190 : 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 190/519 Cost=');
          WriteInt    (e^.gcg^.cost [ntConstant],1);
          WriteString (' LongIntConstant ->   Constant');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

   | 191 : 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 191/515 Cost=');
          WriteInt    (e^.gcg^.cost [ntConstant],1);
          WriteString (' ShortIntConstant ->   Constant');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

   | 192 : 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 192/511 Cost=');
          WriteInt    (e^.gcg^.cost [ntConstant],1);
          WriteString (' LongCardConstant ->   Constant');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

   | 193 : 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 193/507 Cost=');
          WriteInt    (e^.gcg^.cost [ntConstant],1);
          WriteString (' ShortCardConstant ->   Constant');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

   END;
   IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteAttrConstant (resAttributes);
       WriteLn;
   END;
END EmitNtConstant;

PROCEDURE EmitNtFloatConstant (e : IR.Expression; nest : INTEGER
       ; VAR resAttributes : NtAttributes); 
VAR
    AT0   :  NtAttributes;

BEGIN
   CASE e^.gcg^.rule [ntFloatConstant] OF 
   | 194 : 
  EmitNtConstant(e^.son[1]^.son[2],nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 194/2755 Cost=');
          WriteInt    (e^.gcg^.cost [ntFloatConstant],1);
          WriteString (' FunctionCall ->   FloatConstant');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

   | 195 : 
  EmitNtConstant(e^.son[1]^.son[2],nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 195/2745 Cost=');
          WriteInt    (e^.gcg^.cost [ntFloatConstant],1);
          WriteString (' FunctionCall ->   FloatConstant');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

   | 196 : 
  EmitNtFloatConstant(e^.son[1],nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 196/1892 Cost=');
          WriteInt    (e^.gcg^.cost [ntFloatConstant],1);
          WriteString (' Coerce ->   FloatConstant');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

   | 197 : 
  EmitNtConstant(e^.son[1],nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 197/1887 Cost=');
          WriteInt    (e^.gcg^.cost [ntFloatConstant],1);
          WriteString (' Coerce ->   FloatConstant');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

   | 198 : 
  EmitNtConstant(e^.son[1],nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 198/1774 Cost=');
          WriteInt    (e^.gcg^.cost [ntFloatConstant],1);
          WriteString (' Float ->   FloatConstant');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

   | 199 : 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 199/527 Cost=');
          WriteInt    (e^.gcg^.cost [ntFloatConstant],1);
          WriteString (' LongRealConstant ->   FloatConstant');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

   | 200 : 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 200/523 Cost=');
          WriteInt    (e^.gcg^.cost [ntFloatConstant],1);
          WriteString (' RealConstant ->   FloatConstant');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

   END;
   IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteAttrFloatConstant (resAttributes);
       WriteLn;
   END;
END EmitNtFloatConstant;

PROCEDURE EmitNtSimpleVariable (e : IR.Expression; nest : INTEGER
       ; VAR resAttributes : NtAttributes); 
VAR
    AT0   :  NtAttributes;
    AT1   :  NtAttributes;
    AT2   :  NtAttributes;

BEGIN
   CASE e^.gcg^.rule [ntSimpleVariable] OF 
   | 201 : 
  EmitNtSimpleVariable(e^.son[1],nest+1,AT0 ); 
  EmitNtSimpleVariable(e^.son[2]^.son[1]^.son[1]^.son[1],nest+1,AT1 ); 
  EmitNtConstant(e^.son[2]^.son[2],nest+1,AT2 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 201/1190 Cost=');
          WriteInt    (e^.gcg^.cost [ntSimpleVariable],1);
          WriteString (' FixedPlus ->   SimpleVariable');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

   | 202 : 
  EmitNtSimpleVariable(e^.son[1],nest+1,AT0 ); 
  EmitNtConstant(e^.son[2]^.son[1],nest+1,AT1 ); 
  EmitNtSimpleVariable(e^.son[2]^.son[2]^.son[1]^.son[1],nest+1,AT2 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 202/1190 Cost=');
          WriteInt    (e^.gcg^.cost [ntSimpleVariable],1);
          WriteString (' FixedPlus ->   SimpleVariable');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

   | 203 : 
  EmitNtSimpleVariable(e^.son[1]^.son[1]^.son[1]^.son[1],nest+1,AT0 ); 
  EmitNtConstant(e^.son[1]^.son[2],nest+1,AT1 ); 
  EmitNtSimpleVariable(e^.son[2],nest+1,AT2 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 203/1190 Cost=');
          WriteInt    (e^.gcg^.cost [ntSimpleVariable],1);
          WriteString (' FixedPlus ->   SimpleVariable');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

   | 204 : 
  EmitNtConstant(e^.son[1]^.son[1],nest+1,AT0 ); 
  EmitNtSimpleVariable(e^.son[1]^.son[2]^.son[1]^.son[1],nest+1,AT1 ); 
  EmitNtSimpleVariable(e^.son[2],nest+1,AT2 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 204/1190 Cost=');
          WriteInt    (e^.gcg^.cost [ntSimpleVariable],1);
          WriteString (' FixedPlus ->   SimpleVariable');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

   | 205 : 
  EmitNtSimpleVariable(e^.son[1],nest+1,AT0 ); 
  EmitNtConstant(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 205/1085 Cost=');
          WriteInt    (e^.gcg^.cost [ntSimpleVariable],1);
          WriteString (' FixedMinus ->   SimpleVariable');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

   | 206 : 
  EmitNtSimpleVariable(e^.son[1],nest+1,AT0 ); 
  EmitNtConstant(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 206/988 Cost=');
          WriteInt    (e^.gcg^.cost [ntSimpleVariable],1);
          WriteString (' FixedPlus ->   SimpleVariable');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

   | 207 : 
  EmitNtConstant(e^.son[1],nest+1,AT0 ); 
  EmitNtSimpleVariable(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 207/988 Cost=');
          WriteInt    (e^.gcg^.cost [ntSimpleVariable],1);
          WriteString (' FixedPlus ->   SimpleVariable');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

   | 208 : 
  EmitNtConstant(e^.son[2],nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 208/634 Cost=');
          WriteInt    (e^.gcg^.cost [ntSimpleVariable],1);
          WriteString (' FixedPlus ->   SimpleVariable');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 SaveDisplay [e^.son[1]^.attr^.FrameBase.level] := TRUE; 
   | 209 : 
  EmitNtConstant(e^.son[1],nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 209/634 Cost=');
          WriteInt    (e^.gcg^.cost [ntSimpleVariable],1);
          WriteString (' FixedPlus ->   SimpleVariable');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 SaveDisplay [e^.son[2]^.attr^.FrameBase.level] := TRUE; 
   | 210 : 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 210/579 Cost=');
          WriteInt    (e^.gcg^.cost [ntSimpleVariable],1);
          WriteString (' StaticVariable ->   SimpleVariable');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

   | 211 : 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 211/559 Cost=');
          WriteInt    (e^.gcg^.cost [ntSimpleVariable],1);
          WriteString (' LocalVariable ->   SimpleVariable');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

   END;
   IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteAttrSimpleVariable (resAttributes);
       WriteLn;
   END;
END EmitNtSimpleVariable;

PROCEDURE EmitNtSymPlusOffset (e : IR.Expression; nest : INTEGER
       ; VAR resAttributes : NtAttributes); 
VAR
    AT0   :  NtAttributes;
    AT1   :  NtAttributes;

BEGIN
   CASE e^.gcg^.rule [ntSymPlusOffset] OF 
   | 212 : 
  EmitNtSymPlusOffset(e^.son[1],nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 212/1828 Cost=');
          WriteInt    (e^.gcg^.cost [ntSymPlusOffset],1);
          WriteString (' Coerce ->   SymPlusOffset');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 resAttributes.SymPlusOffset.symbol	:= AT0.SymPlusOffset.symbol; 
   | 213 : 
  EmitNtSymPlusOffset(e^.son[1],nest+1,AT0 ); 
  EmitNtConstant(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 213/1045 Cost=');
          WriteInt    (e^.gcg^.cost [ntSymPlusOffset],1);
          WriteString (' FixedMinus ->   SymPlusOffset');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 resAttributes.SymPlusOffset.symbol	:= AT0.SymPlusOffset.symbol; 
   | 214 : 
  EmitNtSymPlusOffset(e^.son[1],nest+1,AT0 ); 
  EmitNtConstant(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 214/939 Cost=');
          WriteInt    (e^.gcg^.cost [ntSymPlusOffset],1);
          WriteString (' FixedPlus ->   SymPlusOffset');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 resAttributes.SymPlusOffset.symbol	:= AT0.SymPlusOffset.symbol; 
   | 215 : 
  EmitNtConstant(e^.son[1],nest+1,AT0 ); 
  EmitNtSymPlusOffset(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 215/939 Cost=');
          WriteInt    (e^.gcg^.cost [ntSymPlusOffset],1);
          WriteString (' FixedPlus ->   SymPlusOffset');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 resAttributes.SymPlusOffset.symbol	:= AT1.SymPlusOffset.symbol; 
   | 216 : 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 216/591 Cost=');
          WriteInt    (e^.gcg^.cost [ntSymPlusOffset],1);
          WriteString (' StaticVariable ->   SymPlusOffset');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 resAttributes.SymPlusOffset.symbol	:= e^.attr^.StaticVariable.module^.Statics; 
   | 217 : 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 217/552 Cost=');
          WriteInt    (e^.gcg^.cost [ntSymPlusOffset],1);
          WriteString (' StringAddr ->   SymPlusOffset');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 resAttributes.SymPlusOffset.symbol	:= e^.attr^.StringAddr.index; 
   | 218 : 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 218/548 Cost=');
          WriteInt    (e^.gcg^.cost [ntSymPlusOffset],1);
          WriteString (' ProcedureConstant ->   SymPlusOffset');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 resAttributes.SymPlusOffset.symbol	:= e^.attr^.ProcedureConstant.index^.Entry; 
   | 219 : 
  EmitNtConstant(e,nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 219/332 Cost=');
          WriteInt    (e^.gcg^.cost [ntSymPlusOffset],1);
          WriteString (' Constant ->   SymPlusOffset');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 resAttributes.SymPlusOffset.symbol	:= NullSymb; 
   END;
   IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteAttrSymPlusOffset (resAttributes);
       WriteLn;
   END;
END EmitNtSymPlusOffset;

PROCEDURE EmitNtRegPlusSymPlusOffset (e : IR.Expression; nest : INTEGER
       ; VAR resAttributes : NtAttributes); 
VAR
    AT0   :  NtAttributes;
    AT1   :  NtAttributes;

BEGIN
   CASE e^.gcg^.rule [ntRegPlusSymPlusOffset] OF 
   | 220 : 
  EmitNtRegPlusSymPlusOffset(e^.son[1],nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 220/1834 Cost=');
          WriteInt    (e^.gcg^.cost [ntRegPlusSymPlusOffset],1);
          WriteString (' Coerce ->   RegPlusSymPlusOffset');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 resAttributes.RegPlusSymPlusOffset.base	:= AT0.RegPlusSymPlusOffset.base;
	  resAttributes.RegPlusSymPlusOffset.symbol	:= AT0.RegPlusSymPlusOffset.symbol; 
   | 221 : 
  EmitNtRegPlusSymPlusOffset(e^.son[1],nest+1,AT0 ); 
  EmitNtConstant(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 221/1065 Cost=');
          WriteInt    (e^.gcg^.cost [ntRegPlusSymPlusOffset],1);
          WriteString (' FixedMinus ->   RegPlusSymPlusOffset');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 resAttributes.RegPlusSymPlusOffset.base	:= AT0.RegPlusSymPlusOffset.base;
	  resAttributes.RegPlusSymPlusOffset.symbol	:= AT0.RegPlusSymPlusOffset.symbol; 
   | 222 : 
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
  EmitNtConstant(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 222/1055 Cost=');
          WriteInt    (e^.gcg^.cost [ntRegPlusSymPlusOffset],1);
          WriteString (' FixedMinus ->   RegPlusSymPlusOffset');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

	resAttributes.RegPlusSymPlusOffset.base		:= RegAlloc.allocation[ai].op[1];
	resAttributes.RegPlusSymPlusOffset.symbol	:= NullSymb;
 AssHString('	mov');  AssSigned( e^.son[1]^.gcg^.reg.mode);  AssSuffix( e^.son[1]^.gcg^.reg.mode);  AssHString('l	');  AssRegister2 ( RegAlloc.allocation[ai].op[1],e^.son[1]^.gcg^.reg.mode);  AssHString(',');  AssRegister(RegAlloc.allocation[ai].op[1]);  AssLn; 
	
   | 223 : 
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
  EmitNtConstant(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 223/1049 Cost=');
          WriteInt    (e^.gcg^.cost [ntRegPlusSymPlusOffset],1);
          WriteString (' FixedMinus ->   RegPlusSymPlusOffset');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 resAttributes.RegPlusSymPlusOffset.base	:= RegAlloc.allocation[ai].op[1];
	  resAttributes.RegPlusSymPlusOffset.symbol	:= NullSymb; 
   | 224 : 
  EmitNtRegPlusSymPlusOffset(e^.son[1],nest+1,AT0 ); 
  EmitNtConstant(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 224/959 Cost=');
          WriteInt    (e^.gcg^.cost [ntRegPlusSymPlusOffset],1);
          WriteString (' FixedPlus ->   RegPlusSymPlusOffset');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 resAttributes.RegPlusSymPlusOffset.base	:= AT0.RegPlusSymPlusOffset.base;
	  resAttributes.RegPlusSymPlusOffset.symbol	:= AT0.RegPlusSymPlusOffset.symbol; 
   | 225 : 
  EmitNtConstant(e^.son[1],nest+1,AT0 ); 
  EmitNtRegPlusSymPlusOffset(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 225/959 Cost=');
          WriteInt    (e^.gcg^.cost [ntRegPlusSymPlusOffset],1);
          WriteString (' FixedPlus ->   RegPlusSymPlusOffset');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 resAttributes.RegPlusSymPlusOffset.base	:= AT1.RegPlusSymPlusOffset.base;
	  resAttributes.RegPlusSymPlusOffset.symbol	:= AT1.RegPlusSymPlusOffset.symbol; 
   | 226 : 
  EmitNtSymPlusOffset(e^.son[1],nest+1,AT0 ); 
  EmitNtreg(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 226/949 Cost=');
          WriteInt    (e^.gcg^.cost [ntRegPlusSymPlusOffset],1);
          WriteString (' FixedPlus ->   RegPlusSymPlusOffset');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

	resAttributes.RegPlusSymPlusOffset.base		:= RegAlloc.allocation[ai].op[2];
	resAttributes.RegPlusSymPlusOffset.symbol	:= AT0.SymPlusOffset.symbol;
 AssHString('	mov');  AssSigned( e^.son[2]^.gcg^.reg.mode);  AssSuffix( e^.son[2]^.gcg^.reg.mode);  AssHString('l	');  AssRegister2 ( RegAlloc.allocation[ai].op[2],e^.son[2]^.gcg^.reg.mode);  AssHString(',');  AssRegister(RegAlloc.allocation[ai].op[2]);  AssLn; 
	
   | 227 : 
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
  EmitNtSymPlusOffset(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 227/949 Cost=');
          WriteInt    (e^.gcg^.cost [ntRegPlusSymPlusOffset],1);
          WriteString (' FixedPlus ->   RegPlusSymPlusOffset');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

	resAttributes.RegPlusSymPlusOffset.base		:= RegAlloc.allocation[ai].op[1];
	resAttributes.RegPlusSymPlusOffset.symbol	:= AT1.SymPlusOffset.symbol;
 AssHString('	mov');  AssSigned( e^.son[1]^.gcg^.reg.mode);  AssSuffix( e^.son[1]^.gcg^.reg.mode);  AssHString('l	');  AssRegister2 ( RegAlloc.allocation[ai].op[1],e^.son[1]^.gcg^.reg.mode);  AssHString(',');  AssRegister(RegAlloc.allocation[ai].op[1]);  AssLn; 
	
   | 228 : 
  EmitNtSymPlusOffset(e^.son[1],nest+1,AT0 ); 
  EmitNtreg(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 228/943 Cost=');
          WriteInt    (e^.gcg^.cost [ntRegPlusSymPlusOffset],1);
          WriteString (' FixedPlus ->   RegPlusSymPlusOffset');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 resAttributes.RegPlusSymPlusOffset.base	:= RegAlloc.allocation[ai].op[2];
	  resAttributes.RegPlusSymPlusOffset.symbol	:= AT0.SymPlusOffset.symbol; 
   | 229 : 
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
  EmitNtSymPlusOffset(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 229/943 Cost=');
          WriteInt    (e^.gcg^.cost [ntRegPlusSymPlusOffset],1);
          WriteString (' FixedPlus ->   RegPlusSymPlusOffset');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 resAttributes.RegPlusSymPlusOffset.base	:= RegAlloc.allocation[ai].op[1];
	  resAttributes.RegPlusSymPlusOffset.symbol	:= AT1.SymPlusOffset.symbol; 
   | 230 : 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 230/571 Cost=');
          WriteInt    (e^.gcg^.cost [ntRegPlusSymPlusOffset],1);
          WriteString (' LocalVariable ->   RegPlusSymPlusOffset');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 resAttributes.RegPlusSymPlusOffset.base	:= Regebp;
	  resAttributes.RegPlusSymPlusOffset.symbol	:= NullSymb; 
   | 231 : 
  EmitNtreg(e,nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 231/347 Cost=');
          WriteInt    (e^.gcg^.cost [ntRegPlusSymPlusOffset],1);
          WriteString (' reg ->   RegPlusSymPlusOffset');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

	resAttributes.RegPlusSymPlusOffset.symbol	:= NullSymb;
	resAttributes.RegPlusSymPlusOffset.base		:= RegAlloc.allocation[ai].op[1];
 AssHString('	mov');  AssSigned( e^.gcg^.reg.mode);  AssSuffix( e^.gcg^.reg.mode);  AssHString('l	');  AssRegister2 ( RegAlloc.allocation[ai].op[1],e^.gcg^.reg.mode);  AssHString(',');  AssRegister(RegAlloc.allocation[ai].op[1]);  AssLn; 
	
   | 232 : 
  EmitNtreg(e,nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 232/341 Cost=');
          WriteInt    (e^.gcg^.cost [ntRegPlusSymPlusOffset],1);
          WriteString (' reg ->   RegPlusSymPlusOffset');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 resAttributes.RegPlusSymPlusOffset.symbol	:= NullSymb;
	  resAttributes.RegPlusSymPlusOffset.base	:= RegAlloc.allocation[ai].op[1]; 
   | 233 : 
  EmitNtSymPlusOffset(e,nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 233/336 Cost=');
          WriteInt    (e^.gcg^.cost [ntRegPlusSymPlusOffset],1);
          WriteString (' SymPlusOffset ->   RegPlusSymPlusOffset');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 resAttributes.RegPlusSymPlusOffset.base	:= RegNil;
	  resAttributes.RegPlusSymPlusOffset.symbol	:= AT0.SymPlusOffset.symbol; 
   END;
   IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteAttrRegPlusSymPlusOffset (resAttributes);
       WriteLn;
   END;
END EmitNtRegPlusSymPlusOffset;

PROCEDURE EmitNtOffsetPlusIndexMultFaktor (e : IR.Expression; nest : INTEGER
       ; VAR resAttributes : NtAttributes); 
VAR
    AT0   :  NtAttributes;
    AT1   :  NtAttributes;

BEGIN
   CASE e^.gcg^.rule [ntOffsetPlusIndexMultFaktor] OF 
   | 234 : 
  EmitNtOffsetPlusIndexMultFaktor(e^.son[1],nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 234/1841 Cost=');
          WriteInt    (e^.gcg^.cost [ntOffsetPlusIndexMultFaktor],1);
          WriteString (' Coerce ->   OffsetPlusIndexMultFaktor');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 resAttributes.OffsetPlusIndexMultFaktor.index	:= AT0.OffsetPlusIndexMultFaktor.index; 
   | 235 : 
  EmitNtOffsetPlusIndexMultFaktor(e^.son[1],nest+1,AT0 ); 
  EmitNtConstant(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 235/1354 Cost=');
          WriteInt    (e^.gcg^.cost [ntOffsetPlusIndexMultFaktor],1);
          WriteString (' FixedDiv ->   OffsetPlusIndexMultFaktor');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 resAttributes.OffsetPlusIndexMultFaktor.index  := AT0.OffsetPlusIndexMultFaktor.index; 
   | 236 : 
  EmitNtOffsetPlusIndexMultFaktor(e^.son[1],nest+1,AT0 ); 
  EmitNtConstant(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 236/1170 Cost=');
          WriteInt    (e^.gcg^.cost [ntOffsetPlusIndexMultFaktor],1);
          WriteString (' FixedMult ->   OffsetPlusIndexMultFaktor');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 resAttributes.OffsetPlusIndexMultFaktor.index  := AT0.OffsetPlusIndexMultFaktor.index; 
   | 237 : 
  EmitNtConstant(e^.son[1],nest+1,AT0 ); 
  EmitNtOffsetPlusIndexMultFaktor(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 237/1170 Cost=');
          WriteInt    (e^.gcg^.cost [ntOffsetPlusIndexMultFaktor],1);
          WriteString (' FixedMult ->   OffsetPlusIndexMultFaktor');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 resAttributes.OffsetPlusIndexMultFaktor.index  := AT1.OffsetPlusIndexMultFaktor.index; 
   | 238 : 
  EmitNtOffsetPlusIndexMultFaktor(e^.son[1],nest+1,AT0 ); 
  EmitNtConstant(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 238/1070 Cost=');
          WriteInt    (e^.gcg^.cost [ntOffsetPlusIndexMultFaktor],1);
          WriteString (' FixedMinus ->   OffsetPlusIndexMultFaktor');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 resAttributes.OffsetPlusIndexMultFaktor.index	:= AT0.OffsetPlusIndexMultFaktor.index; 
   | 239 : 
  EmitNtOffsetPlusIndexMultFaktor(e^.son[1],nest+1,AT0 ); 
  EmitNtConstant(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 239/964 Cost=');
          WriteInt    (e^.gcg^.cost [ntOffsetPlusIndexMultFaktor],1);
          WriteString (' FixedPlus ->   OffsetPlusIndexMultFaktor');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 resAttributes.OffsetPlusIndexMultFaktor.index	:= AT0.OffsetPlusIndexMultFaktor.index; 
   | 240 : 
  EmitNtConstant(e^.son[1],nest+1,AT0 ); 
  EmitNtOffsetPlusIndexMultFaktor(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 240/964 Cost=');
          WriteInt    (e^.gcg^.cost [ntOffsetPlusIndexMultFaktor],1);
          WriteString (' FixedPlus ->   OffsetPlusIndexMultFaktor');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 resAttributes.OffsetPlusIndexMultFaktor.index	:= AT1.OffsetPlusIndexMultFaktor.index; 
   | 241 : 
  EmitNtreg(e,nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 241/363 Cost=');
          WriteInt    (e^.gcg^.cost [ntOffsetPlusIndexMultFaktor],1);
          WriteString (' reg ->   OffsetPlusIndexMultFaktor');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

	resAttributes.OffsetPlusIndexMultFaktor.index		:= RegAlloc.allocation[ai].op[1];
 AssHString('	mov');  AssSigned( e^.gcg^.reg.mode);  AssSuffix( e^.gcg^.reg.mode);  AssHString('l	');  AssRegister2 ( RegAlloc.allocation[ai].op[1],e^.gcg^.reg.mode);  AssHString(',');  AssRegister(RegAlloc.allocation[ai].op[1]);  AssLn; 
	
   | 242 : 
  EmitNtreg(e,nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 242/357 Cost=');
          WriteInt    (e^.gcg^.cost [ntOffsetPlusIndexMultFaktor],1);
          WriteString (' reg ->   OffsetPlusIndexMultFaktor');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 resAttributes.OffsetPlusIndexMultFaktor.index	:= RegAlloc.allocation[ai].op[1]; 
   END;
   IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteAttrOffsetPlusIndexMultFaktor (resAttributes);
       WriteLn;
   END;
END EmitNtOffsetPlusIndexMultFaktor;

PROCEDURE EmitNtmem (e : IR.Expression; nest : INTEGER
       ; VAR resAttributes : NtAttributes); 
VAR
    AT0   :  NtAttributes;
    AT1   :  NtAttributes;

BEGIN
   CASE e^.gcg^.rule [ntmem] OF 
   | 243 : 
  EmitNtmem(e^.son[1],nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 243/1848 Cost=');
          WriteInt    (e^.gcg^.cost [ntmem],1);
          WriteString (' Coerce ->   mem');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 resAttributes.mem.am.offset	:= AT0.mem.am.offset;
	  resAttributes.mem.am.faktor	:= AT0.mem.am.faktor;
	  resAttributes.mem.am.base	:= AT0.mem.am.base;
	  resAttributes.mem.am.index	:= AT0.mem.am.index;
	  resAttributes.mem.am.symbol	:= AT0.mem.am.symbol; 
   | 244 : 
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
  EmitNtConstant(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 244/1259 Cost=');
          WriteInt    (e^.gcg^.cost [ntmem],1);
          WriteString (' FixedMult ->   mem');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

 AssHString('	shl');  AssSuffix( e^.attr^.FixedMult.mode);  AssHString('	$');  AssInt ( Log2(e^.son[2]^.gcg^.Constant.val DIV 9));  AssHString(', ');  AssRegister2 ( RegAlloc.allocation[ai].op[1],e^.attr^.FixedMult.mode);  AssLn; 
	  resAttributes.mem.am.faktor := 8;
	  resAttributes.mem.am.offset := 0;
	  resAttributes.mem.am.index  := RegAlloc.allocation[ai].op[1];
	  resAttributes.mem.am.base   := RegAlloc.allocation[ai].op[1];
	  resAttributes.mem.am.symbol := NullSymb;
	
   | 245 : 
  EmitNtConstant(e^.son[1],nest+1,AT0 ); 
  EmitNtreg(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 245/1259 Cost=');
          WriteInt    (e^.gcg^.cost [ntmem],1);
          WriteString (' FixedMult ->   mem');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

 AssHString('	shl');  AssSuffix( e^.attr^.FixedMult.mode);  AssHString('	$');  AssInt ( Log2(e^.son[1]^.gcg^.Constant.val DIV 9));  AssHString(', ');  AssRegister2 ( RegAlloc.allocation[ai].op[2],e^.attr^.FixedMult.mode);  AssLn; 
	  resAttributes.mem.am.faktor := 8;
	  resAttributes.mem.am.offset := 0;
	  resAttributes.mem.am.index  := RegAlloc.allocation[ai].op[2];
	  resAttributes.mem.am.base   := RegAlloc.allocation[ai].op[2];
	  resAttributes.mem.am.symbol := NullSymb;
	
   | 246 : 
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
  EmitNtConstant(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 246/1244 Cost=');
          WriteInt    (e^.gcg^.cost [ntmem],1);
          WriteString (' FixedMult ->   mem');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

 AssHString('	shl');  AssSuffix( e^.attr^.FixedMult.mode);  AssHString('	$');  AssInt ( Log2(e^.son[2]^.gcg^.Constant.val DIV 5));  AssHString(', ');  AssRegister2 ( RegAlloc.allocation[ai].op[1],e^.attr^.FixedMult.mode);  AssLn; 
	  resAttributes.mem.am.faktor := 4;
	  resAttributes.mem.am.offset := 0;
	  resAttributes.mem.am.index  := RegAlloc.allocation[ai].op[1];
	  resAttributes.mem.am.base   := RegAlloc.allocation[ai].op[1];
	  resAttributes.mem.am.symbol := NullSymb;
	
   | 247 : 
  EmitNtConstant(e^.son[1],nest+1,AT0 ); 
  EmitNtreg(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 247/1244 Cost=');
          WriteInt    (e^.gcg^.cost [ntmem],1);
          WriteString (' FixedMult ->   mem');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

 AssHString('	shl');  AssSuffix( e^.attr^.FixedMult.mode);  AssHString('	$');  AssInt ( Log2(e^.son[1]^.gcg^.Constant.val DIV 5));  AssHString(', ');  AssRegister2 ( RegAlloc.allocation[ai].op[2],e^.attr^.FixedMult.mode);  AssLn; 
	  resAttributes.mem.am.faktor := 4;
	  resAttributes.mem.am.offset := 0;
	  resAttributes.mem.am.index  := RegAlloc.allocation[ai].op[2];
	  resAttributes.mem.am.base   := RegAlloc.allocation[ai].op[2];
	  resAttributes.mem.am.symbol := NullSymb;
	
   | 248 : 
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
  EmitNtConstant(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 248/1229 Cost=');
          WriteInt    (e^.gcg^.cost [ntmem],1);
          WriteString (' FixedMult ->   mem');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

 AssHString('	shl');  AssSuffix( e^.attr^.FixedMult.mode);  AssHString('	$');  AssInt ( Log2(e^.son[2]^.gcg^.Constant.val DIV 3));  AssHString(', ');  AssRegister2 ( RegAlloc.allocation[ai].op[1],e^.attr^.FixedMult.mode);  AssLn; 
	  resAttributes.mem.am.faktor := 2;
	  resAttributes.mem.am.offset := 0;
	  resAttributes.mem.am.index  := RegAlloc.allocation[ai].op[1];
	  resAttributes.mem.am.base   := RegAlloc.allocation[ai].op[1];
	  resAttributes.mem.am.symbol := NullSymb;
	
   | 249 : 
  EmitNtConstant(e^.son[1],nest+1,AT0 ); 
  EmitNtreg(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 249/1229 Cost=');
          WriteInt    (e^.gcg^.cost [ntmem],1);
          WriteString (' FixedMult ->   mem');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

 AssHString('	shl');  AssSuffix( e^.attr^.FixedMult.mode);  AssHString('	$');  AssInt ( Log2(e^.son[1]^.gcg^.Constant.val DIV 3));  AssHString(', ');  AssRegister2 ( RegAlloc.allocation[ai].op[2],e^.attr^.FixedMult.mode);  AssLn; 
	  resAttributes.mem.am.faktor := 2;
	  resAttributes.mem.am.offset := 0;
	  resAttributes.mem.am.index  := RegAlloc.allocation[ai].op[2];
	  resAttributes.mem.am.base   := RegAlloc.allocation[ai].op[2];
	  resAttributes.mem.am.symbol := NullSymb;
	
   | 250 : 
  EmitNtOffsetPlusIndexMultFaktor(e^.son[1],nest+1,AT0 ); 
  EmitNtConstant(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 250/1179 Cost=');
          WriteInt    (e^.gcg^.cost [ntmem],1);
          WriteString (' FixedMult ->   mem');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 resAttributes.mem.am.faktor := e^.son[1]^.gcg^.OffsetPlusIndexMultFaktor.faktor * e^.son[2]^.gcg^.Constant.val - 1;
	  resAttributes.mem.am.offset := e^.son[1]^.gcg^.OffsetPlusIndexMultFaktor.offset * e^.son[2]^.gcg^.Constant.val;
	  resAttributes.mem.am.index  := AT0.OffsetPlusIndexMultFaktor.index;
	  resAttributes.mem.am.base   := AT0.OffsetPlusIndexMultFaktor.index;
	  resAttributes.mem.am.symbol := NullSymb; 
   | 251 : 
  EmitNtConstant(e^.son[1],nest+1,AT0 ); 
  EmitNtOffsetPlusIndexMultFaktor(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 251/1179 Cost=');
          WriteInt    (e^.gcg^.cost [ntmem],1);
          WriteString (' FixedMult ->   mem');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 resAttributes.mem.am.faktor := e^.son[2]^.gcg^.OffsetPlusIndexMultFaktor.faktor * e^.son[1]^.gcg^.Constant.val - 1;
	  resAttributes.mem.am.offset := e^.son[2]^.gcg^.OffsetPlusIndexMultFaktor.offset * e^.son[1]^.gcg^.Constant.val;
	  resAttributes.mem.am.index  := AT1.OffsetPlusIndexMultFaktor.index;
	  resAttributes.mem.am.base   := AT1.OffsetPlusIndexMultFaktor.index;
	  resAttributes.mem.am.symbol := NullSymb; 
   | 252 : 
  EmitNtmem(e^.son[1],nest+1,AT0 ); 
  EmitNtConstant(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 252/1076 Cost=');
          WriteInt    (e^.gcg^.cost [ntmem],1);
          WriteString (' FixedMinus ->   mem');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 resAttributes.mem.am.offset	:= AT0.mem.am.offset - e^.son[2]^.gcg^.Constant.val;
	  resAttributes.mem.am.faktor	:= AT0.mem.am.faktor;
	  resAttributes.mem.am.base	:= AT0.mem.am.base;
	  resAttributes.mem.am.index	:= AT0.mem.am.index;
	  resAttributes.mem.am.symbol	:= AT0.mem.am.symbol; 
   | 253 : 
  EmitNtmem(e^.son[1],nest+1,AT0 ); 
  EmitNtConstant(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 253/979 Cost=');
          WriteInt    (e^.gcg^.cost [ntmem],1);
          WriteString (' FixedPlus ->   mem');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 resAttributes.mem.am.offset	:= AT0.mem.am.offset + e^.son[2]^.gcg^.Constant.val;
	  resAttributes.mem.am.faktor	:= AT0.mem.am.faktor;
	  resAttributes.mem.am.base	:= AT0.mem.am.base;
	  resAttributes.mem.am.index	:= AT0.mem.am.index;
	  resAttributes.mem.am.symbol	:= AT0.mem.am.symbol; 
   | 254 : 
  EmitNtConstant(e^.son[1],nest+1,AT0 ); 
  EmitNtmem(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 254/979 Cost=');
          WriteInt    (e^.gcg^.cost [ntmem],1);
          WriteString (' FixedPlus ->   mem');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 resAttributes.mem.am.offset	:= AT1.mem.am.offset + e^.son[1]^.gcg^.Constant.val;
	  resAttributes.mem.am.faktor	:= AT1.mem.am.faktor;
	  resAttributes.mem.am.base	:= AT1.mem.am.base;
	  resAttributes.mem.am.index	:= AT1.mem.am.index;
	  resAttributes.mem.am.symbol	:= AT1.mem.am.symbol; 
   | 255 : 
  EmitNtOffsetPlusIndexMultFaktor(e^.son[1],nest+1,AT0 ); 
  EmitNtRegPlusSymPlusOffset(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 255/970 Cost=');
          WriteInt    (e^.gcg^.cost [ntmem],1);
          WriteString (' FixedPlus ->   mem');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 resAttributes.mem.am.offset	:= e^.son[1]^.gcg^.OffsetPlusIndexMultFaktor.offset + e^.son[2]^.gcg^.RegPlusSymPlusOffset.offset;
	  resAttributes.mem.am.faktor	:= e^.son[1]^.gcg^.OffsetPlusIndexMultFaktor.faktor;
	  resAttributes.mem.am.base	:= AT1.RegPlusSymPlusOffset.base;
	  resAttributes.mem.am.index	:= AT0.OffsetPlusIndexMultFaktor.index;
	  resAttributes.mem.am.symbol	:= AT1.RegPlusSymPlusOffset.symbol; 
   | 256 : 
  EmitNtRegPlusSymPlusOffset(e^.son[1],nest+1,AT0 ); 
  EmitNtOffsetPlusIndexMultFaktor(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 256/970 Cost=');
          WriteInt    (e^.gcg^.cost [ntmem],1);
          WriteString (' FixedPlus ->   mem');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 resAttributes.mem.am.offset	:= e^.son[2]^.gcg^.OffsetPlusIndexMultFaktor.offset + e^.son[1]^.gcg^.RegPlusSymPlusOffset.offset;
	  resAttributes.mem.am.faktor	:= e^.son[2]^.gcg^.OffsetPlusIndexMultFaktor.faktor;
	  resAttributes.mem.am.base	:= AT0.RegPlusSymPlusOffset.base;
	  resAttributes.mem.am.index	:= AT1.OffsetPlusIndexMultFaktor.index;
	  resAttributes.mem.am.symbol	:= AT0.RegPlusSymPlusOffset.symbol; 
   | 257 : 
  EmitNtOffsetPlusIndexMultFaktor(e,nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 257/382 Cost=');
          WriteInt    (e^.gcg^.cost [ntmem],1);
          WriteString (' OffsetPlusIndexMultFaktor ->   mem');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 resAttributes.mem.am.offset	:= e^.gcg^.OffsetPlusIndexMultFaktor.offset;
	  resAttributes.mem.am.faktor	:= e^.gcg^.OffsetPlusIndexMultFaktor.faktor;
	  resAttributes.mem.am.base	:= RegNil;
	  resAttributes.mem.am.index	:= AT0.OffsetPlusIndexMultFaktor.index;
	  resAttributes.mem.am.symbol	:= NullSymb; 
   | 258 : 
  EmitNtRegPlusSymPlusOffset(e,nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 258/373 Cost=');
          WriteInt    (e^.gcg^.cost [ntmem],1);
          WriteString (' RegPlusSymPlusOffset ->   mem');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 resAttributes.mem.am.offset	:= e^.gcg^.RegPlusSymPlusOffset.offset;
	  resAttributes.mem.am.faktor	:= 1;
	  resAttributes.mem.am.base	:= AT0.RegPlusSymPlusOffset.base;
	  resAttributes.mem.am.index	:= RegNil;
	  resAttributes.mem.am.symbol	:= AT0.RegPlusSymPlusOffset.symbol; 
   END;
   IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteAttrmem (resAttributes);
       WriteLn;
   END;
END EmitNtmem;

PROCEDURE EmitNtCMem (e : IR.Expression; nest : INTEGER
       ; VAR resAttributes : NtAttributes); 
VAR
    AT0   :  NtAttributes;

BEGIN
   CASE e^.gcg^.rule [ntCMem] OF 
   | 259 : 
  EmitNtRegOrIm(e^.son[1],nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 259/1917 Cost=');
          WriteInt    (e^.gcg^.cost [ntCMem],1);
          WriteString (' Coerce ->   CMem');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

	DeclareTransferTempo;
	resAttributes.CMem.am.offset	:= TransferTempo;
	resAttributes.CMem.am.faktor	:= 0;
	resAttributes.CMem.am.base	:= Regebp;
	resAttributes.CMem.am.index	:= RegNil;
	resAttributes.CMem.am.symbol	:= NullSymb;
 AssHString('	mov');  AssSuffix( e^.attr^.Coerce.premode);  AssHString('	');  AssAdrMode( AT0.RegOrIm.am);  AssHString(',');  AssMemAdr( resAttributes.CMem.am);  AssLn; 
	
   | 260 : 
  EmitNtfreg(e^.son[1],nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 260/1901 Cost=');
          WriteInt    (e^.gcg^.cost [ntCMem],1);
          WriteString (' Coerce ->   CMem');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

	DeclareTransferTempo;
	resAttributes.CMem.am.offset	:= TransferTempo;
	resAttributes.CMem.am.faktor	:= 0;
	resAttributes.CMem.am.base	:= Regebp;
	resAttributes.CMem.am.index	:= RegNil;
	resAttributes.CMem.am.symbol	:= NullSymb;
 AssHString('	fstp');  AssSuffix( e^.attr^.Coerce.premode);  AssHString('	');  AssMemAdr( resAttributes.CMem.am);  AssLn; 
	PopFStack;
	
   | 261 : 
  EmitNtCMem(e^.son[1],nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 261/1859 Cost=');
          WriteInt    (e^.gcg^.cost [ntCMem],1);
          WriteString (' Coerce ->   CMem');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 resAttributes.CMem.am.offset	:= AT0.CMem.am.offset;
	  resAttributes.CMem.am.faktor	:= AT0.CMem.am.faktor;
	  resAttributes.CMem.am.base	:= AT0.CMem.am.base;
	  resAttributes.CMem.am.index	:= AT0.CMem.am.index;
	  resAttributes.CMem.am.symbol	:= AT0.CMem.am.symbol; 
   | 262 : 
  EmitNtmem(e^.son[1],nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 262/689 Cost=');
          WriteInt    (e^.gcg^.cost [ntCMem],1);
          WriteString (' Content ->   CMem');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 resAttributes.CMem.am	 := AT0.mem.am; 
   | 263 : 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 263/624 Cost=');
          WriteInt    (e^.gcg^.cost [ntCMem],1);
          WriteString (' FrameBase ->   CMem');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 resAttributes.CMem.am.offset	:= 4*e^.attr^.FrameBase.level;
	  resAttributes.CMem.am.faktor	:= 0;
	  resAttributes.CMem.am.base	:= RegNil;
	  resAttributes.CMem.am.index	:= RegNil;
	  resAttributes.CMem.am.symbol	:= DisplaySym;
	  SaveDisplay [e^.attr^.FrameBase.level] := TRUE; 
   | 264 : 
  EmitNtFloatConstant(e,nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 264/471 Cost=');
          WriteInt    (e^.gcg^.cost [ntCMem],1);
          WriteString (' FloatConstant ->   CMem');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

	GetLabel (lab);
	resAttributes.CMem.am.offset	:= 0;
	resAttributes.CMem.am.faktor	:= 0;
	resAttributes.CMem.am.base	:= RegNil;
	resAttributes.CMem.am.index	:= RegNil;
	resAttributes.CMem.am.symbol	:= lab;
	tr2.r := e^.gcg^.FloatConstant.val;
	ConvertREALtoString (e^.gcg^.FloatConstant.val, str);
 AssHString('	.data');  AssLn; 
 AssHString('	.align 4');  AssLn; 
 AssString( lab^);  AssHString(':');  AssLn; 
 AssHString('	.long	');  AssInt ( tr2.c2);  AssHString(',');  AssInt ( tr2.c1);  AssHString('		# ');  AssString( str);  AssLn; 
 AssHString('	.text');  AssLn; 
	
   | 265 : 
  EmitNtFloatConstant(e,nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 265/452 Cost=');
          WriteInt    (e^.gcg^.cost [ntCMem],1);
          WriteString (' FloatConstant ->   CMem');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

	GetLabel (lab);
	resAttributes.CMem.am.offset	:= 0;
	resAttributes.CMem.am.faktor	:= 0;
	resAttributes.CMem.am.base	:= RegNil;
	resAttributes.CMem.am.index	:= RegNil;
	resAttributes.CMem.am.symbol	:= lab;
	tr1.r := e^.gcg^.FloatConstant.val;
	ConvertREALtoString (e^.gcg^.FloatConstant.val, str);
 AssHString('	.data');  AssLn; 
 AssHString('	.align 4');  AssLn; 
 AssString( lab^);  AssHString(':');  AssLn; 
 AssHString('	.long	');  AssInt ( tr1.c);  AssHString('		# ');  AssString( str);  AssLn; 
 AssHString('	.text');  AssLn; 
	
   END;
   IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteAttrCMem (resAttributes);
       WriteLn;
   END;
END EmitNtCMem;

PROCEDURE EmitNtRegOrIm (e : IR.Expression; nest : INTEGER
       ; VAR resAttributes : NtAttributes); 
VAR
    AT0   :  NtAttributes;

BEGIN
   CASE e^.gcg^.rule [ntRegOrIm] OF 
   | 266 : 
  EmitNtConstant(e,nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 266/418 Cost=');
          WriteInt    (e^.gcg^.cost [ntRegOrIm],1);
          WriteString (' Constant ->   RegOrIm');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 resAttributes.RegOrIm.am.kind  := Mconst;
	  resAttributes.RegOrIm.am.mode  := e^.gcg^.Constant.mode;
	  resAttributes.RegOrIm.am.constant := e^.gcg^.Constant.val; 
   | 267 : 
  EmitNtreg(e,nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 267/391 Cost=');
          WriteInt    (e^.gcg^.cost [ntRegOrIm],1);
          WriteString (' reg ->   RegOrIm');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 resAttributes.RegOrIm.am.kind := Mreg;
	  resAttributes.RegOrIm.am.mode := e^.gcg^.reg.mode;
	  resAttributes.RegOrIm.am.reg  := RegAlloc.allocation[ai].op[1]; 
   END;
   IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteAttrRegOrIm (resAttributes);
       WriteLn;
   END;
END EmitNtRegOrIm;

PROCEDURE EmitNtRegOrCMem (e : IR.Expression; nest : INTEGER
       ; VAR resAttributes : NtAttributes); 
VAR
    AT0   :  NtAttributes;

BEGIN
   CASE e^.gcg^.rule [ntRegOrCMem] OF 
   | 268 : 
  EmitNtCMem(e,nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 268/403 Cost=');
          WriteInt    (e^.gcg^.cost [ntRegOrCMem],1);
          WriteString (' CMem ->   RegOrCMem');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 resAttributes.RegOrCMem.am.kind := Mmem;
	  resAttributes.RegOrCMem.am.mode := e^.gcg^.CMem.mode;
	  resAttributes.RegOrCMem.am.mem  := AT0.CMem.am; 
   | 269 : 
  EmitNtreg(e,nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 269/397 Cost=');
          WriteInt    (e^.gcg^.cost [ntRegOrCMem],1);
          WriteString (' reg ->   RegOrCMem');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 resAttributes.RegOrCMem.am.kind := Mreg;
	  resAttributes.RegOrCMem.am.mode := e^.gcg^.reg.mode;
	  resAttributes.RegOrCMem.am.reg  := RegAlloc.allocation[ai].op[1]; 
   END;
   IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteAttrRegOrCMem (resAttributes);
       WriteLn;
   END;
END EmitNtRegOrCMem;

PROCEDURE EmitNtRegOrCMemOrIm (e : IR.Expression; nest : INTEGER
       ; VAR resAttributes : NtAttributes); 
VAR
    AT0   :  NtAttributes;

BEGIN
   CASE e^.gcg^.rule [ntRegOrCMemOrIm] OF 
   | 270 : 
  EmitNtConstant(e,nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 270/424 Cost=');
          WriteInt    (e^.gcg^.cost [ntRegOrCMemOrIm],1);
          WriteString (' Constant ->   RegOrCMemOrIm');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 resAttributes.RegOrCMemOrIm.am.kind  := Mconst;
	  resAttributes.RegOrCMemOrIm.am.mode  := e^.gcg^.Constant.mode;
	  resAttributes.RegOrCMemOrIm.am.constant := e^.gcg^.Constant.val; 
   | 271 : 
  EmitNtRegOrCMem(e,nest+1,AT0 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 271/409 Cost=');
          WriteInt    (e^.gcg^.cost [ntRegOrCMemOrIm],1);
          WriteString (' RegOrCMem ->   RegOrCMemOrIm');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;
 resAttributes.RegOrCMemOrIm.am.kind := AT0.RegOrCMem.am.kind;
	  resAttributes.RegOrCMemOrIm.am.mode := e^.gcg^.RegOrCMem.mode;
	  IF AT0.RegOrCMem.am.kind = Mreg
	    THEN resAttributes.RegOrCMemOrIm.am.reg := AT0.RegOrCMem.am.reg;
	    ELSE resAttributes.RegOrCMemOrIm.am.mem := AT0.RegOrCMem.am.mem;
	  END; 
   END;
   IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteAttrRegOrCMemOrIm (resAttributes);
       WriteLn;
   END;
END EmitNtRegOrCMemOrIm;

PROCEDURE EmitNtarglist (e : IR.Expression; nest : INTEGER
       ; VAR resAttributes : NtAttributes); 
VAR
    AT0   :  NtAttributes;
    AT1   :  NtAttributes;

BEGIN
   CASE e^.gcg^.rule [ntarglist] OF 
   | 272 : 
  EmitNtarglist(e^.son[1],nest+1,AT0 ); 
  EmitNtreg(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 272/2471 Cost=');
          WriteInt    (e^.gcg^.cost [ntarglist],1);
          WriteString (' PassLong ->   arglist');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

 AssHString('	subl	$');  AssInt ( e^.attr^.PassLong.space);  AssHString(',%esp');  AssLn; 
 AssHString('	movl	%esp,%edi');  AssLn; 
 AssHString('	movl	$');  AssInt ( (e^.attr^.PassLong.size + 3) DIV 4);  AssHString(',%ecx');  AssLn; 
 AssHString('	cld');  AssLn; 
 AssHString('	repz');  AssLn; 
 AssHString('	movsl');  AssLn; 
	
   | 273 : 
  EmitNtarglist(e^.son[1],nest+1,AT0 ); 
  EmitNtmem(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 273/2461 Cost=');
          WriteInt    (e^.gcg^.cost [ntarglist],1);
          WriteString (' PassLong ->   arglist');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

	IF e^.attr^.PassLong.space > 4 THEN
 AssHString('	subl	$');  AssInt ( e^.attr^.PassLong.space - 4);  AssHString(',%esp');  AssLn; 
	END;	
 AssHString('	pushl	');  AssMemAdr( AT1.mem.am);  AssLn; 
	
   | 274 : 
  EmitNtarglist(e^.son[1],nest+1,AT0 ); 
  EmitNtfreg(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 274/2452 Cost=');
          WriteInt    (e^.gcg^.cost [ntarglist],1);
          WriteString (' Pass ->   arglist');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

 AssHString('	subl	$');  AssInt ( SizeTable[e^.attr^.Pass.mode]);  AssHString(',%esp');  AssLn; 
 AssHString('	fstp');  AssSuffix( e^.attr^.Pass.mode);  AssHString('	(%esp)');  AssLn; 
	PopFStack;
	
   | 275 : 
  EmitNtarglist(e^.son[1],nest+1,AT0 ); 
  EmitNtCMem(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 275/2442 Cost=');
          WriteInt    (e^.gcg^.cost [ntarglist],1);
          WriteString (' Pass ->   arglist');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

	INC (AT1.CMem.am.offset, 4);
 AssHString('	pushl	');  AssMemAdr( AT1.CMem.am);  AssLn; 
	DEC (AT1.CMem.am.offset, 4);
 AssHString('	pushl	');  AssMemAdr( AT1.CMem.am);  AssLn; 
	
   | 276 : 
  EmitNtarglist(e^.son[1],nest+1,AT0 ); 
  EmitNtConstant(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 276/2436 Cost=');
          WriteInt    (e^.gcg^.cost [ntarglist],1);
          WriteString (' Pass ->   arglist');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

 AssHString('	pushl	$');  AssInt ( e^.son[2]^.gcg^.Constant.val);  AssLn; 
	
   | 277 : 
  EmitNtarglist(e^.son[1],nest+1,AT0 ); 
  EmitNtRegOrCMemOrIm(e^.son[2],nest+1,AT1 ); 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 277/2418 Cost=');
          WriteInt    (e^.gcg^.cost [ntarglist],1);
          WriteString (' Pass ->   arglist');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

 AssHString('	pushl	');  AssAdrMode( AT1.RegOrCMemOrIm.am);  AssLn; 
	
   | 278 : 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 278/2416 Cost=');
          WriteInt    (e^.gcg^.cost [ntarglist],1);
          WriteString (' Nil ->   arglist');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

   END;
   IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteAttrarglist (resAttributes);
       WriteLn;
   END;
END EmitNtarglist;

PROCEDURE EmitNtloadln2 (e : IR.Expression; nest : INTEGER
       ; VAR resAttributes : NtAttributes); 
VAR

BEGIN
   CASE e^.gcg^.rule [ntloadln2] OF 
   | 279 : 
       ai:=ai-1;
       IF RegAlloc.allocation [ai]. num>0 THEN 
          PerformActions (ai);
       END;
       IF IR.OptEmitMatch THEN
          WriteNest (nest);
          WriteString ('Rule 279/2668 Cost=');
          WriteInt    (e^.gcg^.cost [ntloadln2],1);
          WriteString (' Nil ->   loadln2');
          WriteLn;
          WriteNest (nest); 
          WriteCard (CARDINAL(e),1); Write(' ');
          IF e#NIL THEN IR.PrintAttributes (e^.attr^); ELSE WriteLn; END;
          WriteNest (nest); 
          RegAlloc.PrintAllocation (ai); 
       END;

	PushFStack;
 AssHString('	fldl	RealLn2_');  AssLn; 
	
   END;
   IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteAttrloadln2 (resAttributes);
       WriteLn;
   END;
END EmitNtloadln2;

PROCEDURE EmitStatement (e : IR.Expression);
CONST nest = 0;  
VAR
    AT0   :  NtAttributes;
    AT1   :  NtAttributes;
    AT2   :  NtAttributes;

VAR   i        : INTEGER;
BEGIN
   ai := RegAlloc.ai;
   IF e^.gcg^.stmtcost >= IR.infcost THEN 
     (*************** Compiler Error ******************)
     (******** No code selected, no cover found *******)
     WriteString ('no code selected'); WriteLn;
     IR.PrintInstrCosts (e);
     WriteLn;
     IR.Error ('internal error');
     i := 0; i := 1 DIV i; HALT;
   ELSE
     CASE e^.gcg^.stmtrule OF 
     | 1 :
  EmitNtmem(e^.son[1],nest+1,AT0 ); 
  EmitNtRegOrIm(e^.son[2],nest+1,AT1 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 1/696 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' Assign');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;
 AssHString('	mov');  AssSuffix( e^.attr^.Assign.mode);  AssHString('	');  AssAdrMode( AT1.RegOrIm.am);  AssHString(',');  AssMemAdr( AT0.mem.am);  AssHString(' ');  AssLn; 
     | 2 :
  EmitNtmem(e^.son[1],nest+1,AT0 ); 
  EmitNtfreg(e^.son[2],nest+1,AT1 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 2/701 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' Assign');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

 AssHString('	fstp');  AssSuffix( e^.attr^.Assign.mode);  AssHString('	');  AssMemAdr( AT0.mem.am);  AssLn; 
	PopFStack;
	
     | 3 :
  EmitNtmem(e^.son[1],nest+1,AT0 ); 
  EmitNtFloatConstant(e^.son[2],nest+1,AT1 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 3/709 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' Assign');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

	tr1.r := e^.son[2]^.gcg^.FloatConstant.val;
 AssHString('	movl	$');  AssInt ( tr1.c);  AssHString(',');  AssMemAdr( AT0.mem.am);  AssLn; 
	
     | 4 :
  EmitNtmem(e^.son[1],nest+1,AT0 ); 
  EmitNtFloatConstant(e^.son[2],nest+1,AT1 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 4/717 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' Assign');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

	tr2.r := e^.son[2]^.gcg^.FloatConstant.val;
 AssHString('	movl	$');  AssInt ( tr2.c2);  AssHString(',');  AssMemAdr( AT0.mem.am);  AssLn; 
	INC (AT0.mem.am.offset, 4);
 AssHString('	movl	$');  AssInt ( tr2.c1);  AssHString(',');  AssMemAdr( AT0.mem.am);  AssHString('	');  AssLn; 
	
     | 5 :
  EmitNtmem(e^.son[1],nest+1,AT0 ); 
  EmitNtCMem(e^.son[2],nest+1,AT1 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 5/727 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' Assign');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

 AssHString('	movl	');  AssMemAdr( AT1.CMem.am);  AssHString(',');  AssRegister(RegAlloc.allocation[1].scr[1]);  AssLn; 
 AssHString('	movl	');  AssRegister(RegAlloc.allocation[1].scr[1]);  AssHString(',');  AssMemAdr( AT0.mem.am);  AssLn; 
	
     | 6 :
  EmitNtmem(e^.son[1],nest+1,AT0 ); 
  EmitNtCMem(e^.son[2],nest+1,AT1 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 6/736 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' Assign');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

 AssHString('	movl	');  AssMemAdr( AT1.CMem.am);  AssHString(',');  AssRegister(RegAlloc.allocation[1].scr[1]);  AssLn; 
 AssHString('	movl	');  AssRegister(RegAlloc.allocation[1].scr[1]);  AssHString(',');  AssMemAdr( AT0.mem.am);  AssLn; 
	INC (AT0.mem.am.offset, 4);
	INC (AT1.CMem.am.offset, 4);
 AssHString('	movl	');  AssMemAdr( AT1.CMem.am);  AssHString(',');  AssRegister(RegAlloc.allocation[1].scr[1]);  AssLn; 
 AssHString('	movl	');  AssRegister(RegAlloc.allocation[1].scr[1]);  AssHString(',');  AssMemAdr( AT0.mem.am);  AssLn; 
	
     | 7 :
  EmitNtSimpleVariable(e^.son[1],nest+1,AT0 ); 
  EmitNtSimpleVariable(e^.son[2]^.son[1],nest+1,AT1 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 7/749 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' Assign');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

     | 8 :
  EmitNtmem(e^.son[1],nest+1,AT0 ); 
  EmitNtmem(e^.son[2],nest+1,AT1 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 8/773 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' AssignLong');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

 AssHString('	leal	');  AssMemAdr( AT1.mem.am);  AssHString(',%esi');  AssLn; 
 AssHString('	leal	');  AssMemAdr( AT0.mem.am);  AssHString(',%edi');  AssLn; 
	IF AT0.mem.am.offset MOD 4 >= 1 THEN
	  DEC (e^.attr^.AssignLong.size, 4-(AT0.mem.am.offset MOD 4));
	END;
	IF e^.attr^.AssignLong.size >= 4 THEN
 AssHString('	movl	$');  AssInt ( e^.attr^.AssignLong.size DIV 4);  AssHString(',%ecx');  AssLn; 
	END;
 AssHString('	cld');  AssLn; 
	IF AT0.mem.am.offset MOD 2 = 1 THEN
 AssHString('	movsb');  AssLn; 
	END;
	IF (AT0.mem.am.offset MOD 4 = 1) OR (AT0.mem.am.offset MOD 4 = 2) THEN
 AssHString('	movsw');  AssLn; 
	END;
	IF e^.attr^.AssignLong.size >= 8 THEN
 AssHString('	repz');  AssLn; 
	END;
	IF e^.attr^.AssignLong.size >= 4 THEN
 AssHString('	movsl');  AssLn; 
	END;
	IF e^.attr^.AssignLong.size MOD 4 >= 2 THEN
 AssHString('	movsw');  AssLn; 
	END;
	IF e^.attr^.AssignLong.size MOD 2 >= 1 THEN
 AssHString('	movsb');  AssLn; 
	END;
	
     | 9 :
  EmitNtmem(e^.son[1],nest+1,AT0 ); 
  EmitNtmem(e^.son[2],nest+1,AT1 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 9/807 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' AssignLong');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

	IF e^.attr^.AssignLong.size >= 4 THEN
 AssHString('	movl	');  AssMemAdr( AT1.mem.am);  AssHString(',');  AssRegister(RegAlloc.allocation[1].scr[1]);  AssLn; 
 AssHString('	movl	');  AssRegister(RegAlloc.allocation[1].scr[1]);  AssHString(',');  AssMemAdr( AT0.mem.am);  AssLn; 
	INC (AT1.mem.am.offset, 4);
	INC (AT0.mem.am.offset, 4);
	DEC (e^.attr^.AssignLong.size, 4);
	END;
	IF e^.attr^.AssignLong.size >= 4 THEN
 AssHString('	movl	');  AssMemAdr( AT1.mem.am);  AssHString(',');  AssRegister(RegAlloc.allocation[1].scr[1]);  AssLn; 
 AssHString('	movl	');  AssRegister(RegAlloc.allocation[1].scr[1]);  AssHString(',');  AssMemAdr( AT0.mem.am);  AssLn; 
	INC (AT1.mem.am.offset, 4);
	INC (AT0.mem.am.offset, 4);
	DEC (e^.attr^.AssignLong.size, 4);
	END;
	IF e^.attr^.AssignLong.size DIV 2 > 0 THEN
 AssHString('	movw	');  AssMemAdr( AT1.mem.am);  AssHString(',');  AssWordRegister ( RegAlloc.allocation[1].scr[1]);  AssLn; 
 AssHString('	movw	');  AssWordRegister ( RegAlloc.allocation[1].scr[1]);  AssHString(',');  AssMemAdr( AT0.mem.am);  AssLn; 
	INC (AT1.mem.am.offset, 2);
	INC (AT0.mem.am.offset, 2);
	END;
	IF e^.attr^.AssignLong.size MOD 2 > 0 THEN
 AssHString('	movb	');  AssMemAdr( AT1.mem.am);  AssHString(',');  AssByteRegister ( RegAlloc.allocation[1].scr[1]);  AssLn; 
 AssHString('	movb	');  AssByteRegister ( RegAlloc.allocation[1].scr[1]);  AssHString(',');  AssMemAdr( AT0.mem.am);  AssLn; 
	END;
	
     | 10 :
  EmitNtmem(e^.son[1],nest+1,AT0 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 10/838 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' Inc1');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;
 AssHString('	inc');  AssSuffix( e^.attr^.Inc1.mode);  AssHString('	');  AssMemAdr( AT0.mem.am);  AssHString(' ');  AssLn; 
     | 11 :
  EmitNtmem(e^.son[1],nest+1,AT0 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 11/842 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' Dec1');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;
 AssHString('	dec');  AssSuffix( e^.attr^.Dec1.mode);  AssHString('	');  AssMemAdr( AT0.mem.am);  AssHString(' ');  AssLn; 
     | 12 :
  EmitNtmem(e^.son[1],nest+1,AT0 ); 
  EmitNtRegOrIm(e^.son[2],nest+1,AT1 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 12/846 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' Inc2');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;
 AssHString('	add');  AssSuffix( e^.attr^.Inc2.mode);  AssHString('	');  AssAdrMode( AT1.RegOrIm.am);  AssHString(',');  AssMemAdr( AT0.mem.am);  AssHString(' ');  AssLn; 
     | 13 :
  EmitNtmem(e^.son[1],nest+1,AT0 ); 
  EmitNtRegOrIm(e^.son[2],nest+1,AT1 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 13/850 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' Dec2');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;
 AssHString('	sub');  AssSuffix( e^.attr^.Dec2.mode);  AssHString('	');  AssAdrMode( AT1.RegOrIm.am);  AssHString(',');  AssMemAdr( AT0.mem.am);  AssHString(' ');  AssLn; 
     | 14 :
  EmitNtmem(e^.son[1],nest+1,AT0 ); 
  EmitNtRegOrIm(e^.son[2],nest+1,AT1 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 14/865 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' InclL');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;
 AssHString('	btsl	');  AssAdrMode( AT1.RegOrIm.am);  AssHString(',');  AssMemAdr( AT0.mem.am);  AssHString(' ');  AssLn; 
     | 15 :
  EmitNtmem(e^.son[1],nest+1,AT0 ); 
  EmitNtRegOrIm(e^.son[2],nest+1,AT1 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 15/882 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' ExclL');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;
 AssHString('	btrl	');  AssAdrMode( AT1.RegOrIm.am);  AssHString(',');  AssMemAdr( AT0.mem.am);  AssHString(' ');  AssLn; 
     | 16 :
  EmitNtRegOrCMemOrIm(e^.son[1],nest+1,AT0 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 16/889 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' SkipAddress');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

     | 17 :
  EmitNtRegOrCMemOrIm(e^.son[1],nest+1,AT0 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 17/892 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' SkipData');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

     | 18 :
  EmitNtSimpleVariable(e^.son[1],nest+1,AT0 ); 
  EmitNtConstant(e^.son[2]^.son[1],nest+1,AT1 ); 
  EmitNtSimpleVariable(e^.son[2]^.son[2]^.son[1],nest+1,AT2 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 18/999 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' Assign');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

	EmitIndex (e^.son[1]^.gcg^.SimpleVariable.base, e^.son[1]^.gcg^.SimpleVariable.index, RegAlloc.allocation[1].scr[1]);
 AssHString('	inc');  AssSuffix( e^.attr^.Assign.mode);  AssHString('	');  AssMemAdr( e^.son[1]^.gcg^.SimpleVariable.base);  AssLn; 
	
     | 19 :
  EmitNtSimpleVariable(e^.son[1],nest+1,AT0 ); 
  EmitNtSimpleVariable(e^.son[2]^.son[1]^.son[1],nest+1,AT1 ); 
  EmitNtConstant(e^.son[2]^.son[2],nest+1,AT2 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 19/999 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' Assign');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

	EmitIndex (e^.son[1]^.gcg^.SimpleVariable.base, e^.son[1]^.gcg^.SimpleVariable.index, RegAlloc.allocation[1].scr[1]);
 AssHString('	inc');  AssSuffix( e^.attr^.Assign.mode);  AssHString('	');  AssMemAdr( e^.son[1]^.gcg^.SimpleVariable.base);  AssLn; 
	
     | 20 :
  EmitNtSimpleVariable(e^.son[1],nest+1,AT0 ); 
  EmitNtRegOrIm(e^.son[2]^.son[1],nest+1,AT1 ); 
  EmitNtSimpleVariable(e^.son[2]^.son[2]^.son[1],nest+1,AT2 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 20/1013 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' Assign');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

	EmitIndex (e^.son[1]^.gcg^.SimpleVariable.base, e^.son[1]^.gcg^.SimpleVariable.index, RegAlloc.allocation[1].scr[1]);
 AssHString('	add');  AssSuffix( e^.attr^.Assign.mode);  AssHString('	');  AssAdrMode( AT1.RegOrIm.am);  AssHString(',');  AssMemAdr( e^.son[1]^.gcg^.SimpleVariable.base);  AssLn; 
	
     | 21 :
  EmitNtSimpleVariable(e^.son[1],nest+1,AT0 ); 
  EmitNtSimpleVariable(e^.son[2]^.son[1]^.son[1],nest+1,AT1 ); 
  EmitNtRegOrIm(e^.son[2]^.son[2],nest+1,AT2 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 21/1013 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' Assign');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

	EmitIndex (e^.son[1]^.gcg^.SimpleVariable.base, e^.son[1]^.gcg^.SimpleVariable.index, RegAlloc.allocation[1].scr[1]);
 AssHString('	add');  AssSuffix( e^.attr^.Assign.mode);  AssHString('	');  AssAdrMode( AT2.RegOrIm.am);  AssHString(',');  AssMemAdr( e^.son[1]^.gcg^.SimpleVariable.base);  AssLn; 
	
     | 22 :
  EmitNtSimpleVariable(e^.son[1],nest+1,AT0 ); 
  EmitNtSimpleVariable(e^.son[2]^.son[1]^.son[1],nest+1,AT1 ); 
  EmitNtSimpleVariable(e^.son[2]^.son[2]^.son[1],nest+1,AT2 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 22/1026 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' Assign');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

	EmitIndex (e^.son[1]^.gcg^.SimpleVariable.base, e^.son[1]^.gcg^.SimpleVariable.index, RegAlloc.allocation[1].scr[1]);
 AssHString('	shl');  AssSuffix( e^.attr^.Assign.mode);  AssHString('	$1, ');  AssMemAdr( e^.son[1]^.gcg^.SimpleVariable.base);  AssLn; 
	
     | 23 :
  EmitNtSimpleVariable(e^.son[1],nest+1,AT0 ); 
  EmitNtSimpleVariable(e^.son[2]^.son[1]^.son[1],nest+1,AT1 ); 
  EmitNtConstant(e^.son[2]^.son[2],nest+1,AT2 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 23/1096 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' Assign');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

	EmitIndex (e^.son[1]^.gcg^.SimpleVariable.base, e^.son[1]^.gcg^.SimpleVariable.index, RegAlloc.allocation[1].scr[1]);
 AssHString('	dec');  AssSuffix( e^.attr^.Assign.mode);  AssHString('	');  AssMemAdr( e^.son[1]^.gcg^.SimpleVariable.base);  AssLn; 
	
     | 24 :
  EmitNtSimpleVariable(e^.son[1],nest+1,AT0 ); 
  EmitNtSimpleVariable(e^.son[2]^.son[1]^.son[1],nest+1,AT1 ); 
  EmitNtRegOrIm(e^.son[2]^.son[2],nest+1,AT2 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 24/1110 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' Assign');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

	EmitIndex (e^.son[1]^.gcg^.SimpleVariable.base, e^.son[1]^.gcg^.SimpleVariable.index, RegAlloc.allocation[1].scr[1]);
 AssHString('	sub');  AssSuffix( e^.attr^.Assign.mode);  AssHString('	');  AssAdrMode( AT2.RegOrIm.am);  AssHString(',');  AssMemAdr( e^.son[1]^.gcg^.SimpleVariable.base);  AssLn; 
	
     | 25 :
  EmitNtSimpleVariable(e^.son[1],nest+1,AT0 ); 
  EmitNtConstant(e^.son[2]^.son[1],nest+1,AT1 ); 
  EmitNtSimpleVariable(e^.son[2]^.son[2]^.son[1],nest+1,AT2 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 25/1145 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' Assign');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

     | 26 :
  EmitNtSimpleVariable(e^.son[1],nest+1,AT0 ); 
  EmitNtSimpleVariable(e^.son[2]^.son[1]^.son[1],nest+1,AT1 ); 
  EmitNtConstant(e^.son[2]^.son[2],nest+1,AT2 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 26/1145 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' Assign');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

     | 27 :
  EmitNtSimpleVariable(e^.son[1],nest+1,AT0 ); 
  EmitNtConstant(e^.son[2]^.son[1],nest+1,AT1 ); 
  EmitNtSimpleVariable(e^.son[2]^.son[2]^.son[1],nest+1,AT2 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 27/1214 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' Assign');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

	EmitIndex (e^.son[1]^.gcg^.SimpleVariable.base, e^.son[1]^.gcg^.SimpleVariable.index, RegAlloc.allocation[1].scr[1]);
 AssHString('	shl');  AssSuffix( e^.attr^.Assign.mode);  AssHString('	$');  AssInt ( Log2(e^.son[2]^.son[1]^.gcg^.Constant.val));  AssHString(', ');  AssMemAdr( e^.son[1]^.gcg^.SimpleVariable.base);  AssLn; 
	
     | 28 :
  EmitNtSimpleVariable(e^.son[1],nest+1,AT0 ); 
  EmitNtSimpleVariable(e^.son[2]^.son[1]^.son[1],nest+1,AT1 ); 
  EmitNtConstant(e^.son[2]^.son[2],nest+1,AT2 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 28/1214 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' Assign');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

	EmitIndex (e^.son[1]^.gcg^.SimpleVariable.base, e^.son[1]^.gcg^.SimpleVariable.index, RegAlloc.allocation[1].scr[1]);
 AssHString('	shl');  AssSuffix( e^.attr^.Assign.mode);  AssHString('	$');  AssInt ( Log2(e^.son[2]^.son[2]^.gcg^.Constant.val));  AssHString(', ');  AssMemAdr( e^.son[1]^.gcg^.SimpleVariable.base);  AssLn; 
	
     | 29 :
  EmitNtSimpleVariable(e^.son[1],nest+1,AT0 ); 
  EmitNtSimpleVariable(e^.son[2]^.son[1]^.son[1],nest+1,AT1 ); 
  EmitNtSimpleVariable(e^.son[2]^.son[2]^.son[1],nest+1,AT2 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 29/1300 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' Assign');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

	EmitIndex (e^.son[1]^.gcg^.SimpleVariable.base, e^.son[1]^.gcg^.SimpleVariable.index, RegAlloc.allocation[1].scr[1]);
 AssHString('	mov');  AssSuffix( e^.attr^.Assign.mode);  AssHString('	');  AssMemAdr( e^.son[1]^.gcg^.SimpleVariable.base);  AssHString(',');  AssRegister2 ( RegAlloc.allocation[1].scr[2],e^.attr^.Assign.mode);  AssLn; 
 AssHString('	imul');  AssSuffix( e^.attr^.Assign.mode);  AssHString('	');  AssRegister2 ( RegAlloc.allocation[1].scr[2],e^.attr^.Assign.mode);  AssHString(',');  AssRegister2 ( RegAlloc.allocation[1].scr[2],e^.attr^.Assign.mode);  AssLn; 
 AssHString('	mov');  AssSuffix( e^.attr^.Assign.mode);  AssHString('	');  AssRegister2 ( RegAlloc.allocation[1].scr[2],e^.attr^.Assign.mode);  AssHString(',');  AssMemAdr( e^.son[1]^.gcg^.SimpleVariable.base);  AssLn; 
	
     | 30 :
  EmitNtSimpleVariable(e^.son[1],nest+1,AT0 ); 
  EmitNtSimpleVariable(e^.son[2]^.son[1]^.son[1],nest+1,AT1 ); 
  EmitNtConstant(e^.son[2]^.son[2],nest+1,AT2 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 30/1373 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' Assign');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

	EmitIndex (e^.son[1]^.gcg^.SimpleVariable.base, e^.son[1]^.gcg^.SimpleVariable.index, RegAlloc.allocation[1].scr[1]);
 AssHString('	shr');  AssSuffix( e^.attr^.Assign.mode);  AssHString('	$');  AssInt ( Log2(e^.son[2]^.son[2]^.gcg^.Constant.val));  AssHString(', ');  AssMemAdr( e^.son[1]^.gcg^.SimpleVariable.base);  AssLn; 
	
     | 31 :
  EmitNtSimpleVariable(e^.son[1],nest+1,AT0 ); 
  EmitNtSimpleVariable(e^.son[2]^.son[1]^.son[1],nest+1,AT1 ); 
  EmitNtConstant(e^.son[2]^.son[2],nest+1,AT2 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 31/1396 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' Assign');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

	EmitIndex (e^.son[1]^.gcg^.SimpleVariable.base, e^.son[1]^.gcg^.SimpleVariable.index, RegAlloc.allocation[1].scr[1]);
 AssHString('	sar');  AssSuffix( e^.attr^.Assign.mode);  AssHString('	$');  AssInt ( Log2(e^.son[2]^.son[2]^.gcg^.Constant.val));  AssHString(', ');  AssMemAdr( e^.son[1]^.gcg^.SimpleVariable.base);  AssLn; 
	
     | 32 :
  EmitNtSimpleVariable(e^.son[1],nest+1,AT0 ); 
  EmitNtSimpleVariable(e^.son[2]^.son[1]^.son[1],nest+1,AT1 ); 
  EmitNtConstant(e^.son[2]^.son[2],nest+1,AT2 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 32/1467 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' Assign');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

	EmitIndex (e^.son[1]^.gcg^.SimpleVariable.base, e^.son[1]^.gcg^.SimpleVariable.index, RegAlloc.allocation[1].scr[1]);
 AssHString('	and');  AssSuffix( e^.attr^.Assign.mode);  AssHString('	$');  AssInt ( e^.son[2]^.son[2]^.gcg^.Constant.val-1);  AssHString(', ');  AssMemAdr( e^.son[1]^.gcg^.SimpleVariable.base);  AssLn; 
	
     | 33 :
  EmitNtSimpleVariable(e^.son[1],nest+1,AT0 ); 
  EmitNtRegOrIm(e^.son[2]^.son[1],nest+1,AT1 ); 
  EmitNtSimpleVariable(e^.son[2]^.son[2]^.son[1],nest+1,AT2 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 33/1596 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' Assign');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

	EmitIndex (e^.son[1]^.gcg^.SimpleVariable.base, e^.son[1]^.gcg^.SimpleVariable.index, RegAlloc.allocation[1].scr[1]);
 AssHString('	orl	');  AssAdrMode( AT1.RegOrIm.am);  AssHString(',');  AssMemAdr( e^.son[1]^.gcg^.SimpleVariable.base);  AssLn; 
	
     | 34 :
  EmitNtSimpleVariable(e^.son[1],nest+1,AT0 ); 
  EmitNtSimpleVariable(e^.son[2]^.son[1]^.son[1],nest+1,AT1 ); 
  EmitNtRegOrIm(e^.son[2]^.son[2],nest+1,AT2 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 34/1596 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' Assign');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

	EmitIndex (e^.son[1]^.gcg^.SimpleVariable.base, e^.son[1]^.gcg^.SimpleVariable.index, RegAlloc.allocation[1].scr[1]);
 AssHString('	orl	');  AssAdrMode( AT2.RegOrIm.am);  AssHString(',');  AssMemAdr( e^.son[1]^.gcg^.SimpleVariable.base);  AssLn; 
	
     | 35 :
  EmitNtSimpleVariable(e^.son[1],nest+1,AT0 ); 
  EmitNtSimpleVariable(e^.son[2]^.son[1]^.son[1],nest+1,AT1 ); 
  EmitNtreg(e^.son[2]^.son[2],nest+1,AT2 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 35/1626 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' Assign');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

	EmitIndex (e^.son[1]^.gcg^.SimpleVariable.base, e^.son[1]^.gcg^.SimpleVariable.index, RegAlloc.allocation[1].scr[1]);
 AssHString('	notl	');  AssRegister(RegAlloc.allocation[1].op[3]);  AssLn; 
 AssHString(' 	andl	');  AssRegister(RegAlloc.allocation[1].op[3]);  AssHString(',');  AssMemAdr( e^.son[1]^.gcg^.SimpleVariable.base);  AssLn; 
	
     | 36 :
  EmitNtSimpleVariable(e^.son[1],nest+1,AT0 ); 
  EmitNtSimpleVariable(e^.son[2]^.son[1]^.son[1],nest+1,AT1 ); 
  EmitNtConstant(e^.son[2]^.son[2],nest+1,AT2 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 36/1640 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' Assign');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

	EmitIndex (e^.son[1]^.gcg^.SimpleVariable.base, e^.son[1]^.gcg^.SimpleVariable.index, RegAlloc.allocation[1].scr[1]);
 AssHString(' 	andl	$');  AssInt ( INTEGER(BITSET(-1) - BITSET(e^.son[2]^.son[2]^.gcg^.Constant.val)));  AssHString(',');  AssMemAdr( e^.son[1]^.gcg^.SimpleVariable.base);  AssLn; 
	
     | 37 :
  EmitNtSimpleVariable(e^.son[1],nest+1,AT0 ); 
  EmitNtRegOrIm(e^.son[2]^.son[1],nest+1,AT1 ); 
  EmitNtSimpleVariable(e^.son[2]^.son[2]^.son[1],nest+1,AT2 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 37/1659 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' Assign');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

	EmitIndex (e^.son[1]^.gcg^.SimpleVariable.base, e^.son[1]^.gcg^.SimpleVariable.index, RegAlloc.allocation[1].scr[1]);
 AssHString('	andl	');  AssAdrMode( AT1.RegOrIm.am);  AssHString(',');  AssMemAdr( e^.son[1]^.gcg^.SimpleVariable.base);  AssLn; 
	
     | 38 :
  EmitNtSimpleVariable(e^.son[1],nest+1,AT0 ); 
  EmitNtSimpleVariable(e^.son[2]^.son[1]^.son[1],nest+1,AT1 ); 
  EmitNtRegOrIm(e^.son[2]^.son[2],nest+1,AT2 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 38/1659 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' Assign');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

	EmitIndex (e^.son[1]^.gcg^.SimpleVariable.base, e^.son[1]^.gcg^.SimpleVariable.index, RegAlloc.allocation[1].scr[1]);
 AssHString('	andl	');  AssAdrMode( AT2.RegOrIm.am);  AssHString(',');  AssMemAdr( e^.son[1]^.gcg^.SimpleVariable.base);  AssLn; 
	
     | 39 :
  EmitNtSimpleVariable(e^.son[1],nest+1,AT0 ); 
  EmitNtRegOrIm(e^.son[2]^.son[1],nest+1,AT1 ); 
  EmitNtSimpleVariable(e^.son[2]^.son[2]^.son[1],nest+1,AT2 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 39/1678 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' Assign');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

	EmitIndex (e^.son[1]^.gcg^.SimpleVariable.base, e^.son[1]^.gcg^.SimpleVariable.index, RegAlloc.allocation[1].scr[1]);
 AssHString('	xorl	');  AssAdrMode( AT1.RegOrIm.am);  AssHString(',');  AssMemAdr( e^.son[1]^.gcg^.SimpleVariable.base);  AssLn; 
	
     | 40 :
  EmitNtSimpleVariable(e^.son[1],nest+1,AT0 ); 
  EmitNtSimpleVariable(e^.son[2]^.son[1]^.son[1],nest+1,AT1 ); 
  EmitNtRegOrIm(e^.son[2]^.son[2],nest+1,AT2 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 40/1678 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' Assign');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

	EmitIndex (e^.son[1]^.gcg^.SimpleVariable.base, e^.son[1]^.gcg^.SimpleVariable.index, RegAlloc.allocation[1].scr[1]);
 AssHString('	xorl	');  AssAdrMode( AT2.RegOrIm.am);  AssHString(',');  AssMemAdr( e^.son[1]^.gcg^.SimpleVariable.base);  AssLn; 
	
     | 41 :
  EmitNtmem(e^.son[1],nest+1,AT0 ); 
  EmitNtfreg(e^.son[2]^.son[1],nest+1,AT1 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 41/1804 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' Assign');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

	GetLabel(lab);
 AssHString('	fcoml	TwoExp31_');  AssLn; 
 AssHString('	fstsw	%ax');  AssLn; 
 AssHString('	sahf');  AssLn; 
 AssHString('	jb	');  AssString( lab^);  AssLn; 
 AssHString('	fsubl	TwoExp32_');  AssLn; 
 AssString( lab^);  AssHString(':');  AssLn; 
	CheckRoundMode2 (RndZero, RndNegInf);
 AssHString('	fistpl	');  AssMemAdr( AT0.mem.am );  AssLn; 
	PopFStack;
	
     | 42 :
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 42/2171 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' PlaceLabel');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

	CurRoundMode := RndUnknown;
 AssString( e^.attr^.PlaceLabel.lab^);  AssHString(':');  AssLn; 
	
     | 43 :
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 43/2178 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' Goto');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

	CurRoundMode := RndUnknown;
 AssHString('	jmp	');  AssString( e^.attr^.Goto.tar^);  AssLn; 
	
     | 44 :
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 44/2185 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' SwitchL');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

	GetLabel (lab);
 AssHString('	.data');  AssLn; 
 AssHString('	.align 4');  AssLn; 
 AssString( lab^);  AssHString(':');  AssLn; 
	WHILE e^.attr^.SwitchL.CaseLabels # NIL DO
 AssHString('	.long	');  AssString( e^.attr^.SwitchL.CaseLabels^.label^);  AssLn; 
	  e^.attr^.SwitchL.CaseLabels := e^.attr^.SwitchL.CaseLabels^.next;
	END;
 AssHString('	.text');  AssLn; 
	CurRoundMode := RndUnknown;
 AssHString('	sub');  AssSuffix( e^.attr^.SwitchL.mode);  AssHString('	$');  AssInt ( e^.attr^.SwitchL.lwb);  AssHString(',');  AssRegister2 ( RegAlloc.allocation[1].op[1],e^.attr^.SwitchL.mode);  AssLn; 
 AssHString('	j');  AssString( RelationTable[RelLess][SignedTable[e^.attr^.SwitchL.mode]]);  AssHString('	');  AssString( e^.attr^.SwitchL.DefaultLabel^);  AssLn; 
 AssHString('	cmp');  AssSuffix( e^.attr^.SwitchL.mode);  AssHString('	$');  AssInt ( e^.attr^.SwitchL.upb - e^.attr^.SwitchL.lwb);  AssHString(',');  AssRegister2 ( RegAlloc.allocation[1].op[1],e^.attr^.SwitchL.mode);  AssLn; 
 AssHString('	j');  AssString( RelationTable[RelGreater][SignedTable[e^.attr^.SwitchL.mode]]);  AssHString('	');  AssString( e^.attr^.SwitchL.DefaultLabel^);  AssLn; 
 AssHString('	jmp	*');  AssString( lab^);  AssHString('(,');  AssRegister(RegAlloc.allocation[1].op[1]);  AssHString(',4)');  AssLn; 
	
     | 45 :
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 45/2206 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' TestAndBranch');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

	IF e^.attr^.TestAndBranch.cond THEN k:=1 ELSE k:=0 END;
	CurRoundMode := RndUnknown;
 AssHString('	cmpb	$');  AssInt ( k);  AssHString(',');  AssByteRegister ( RegAlloc.allocation[1].op[1]);  AssLn; 
 AssHString('	je	');  AssString( e^.attr^.TestAndBranch.tar^);  AssLn; 
	
     | 46 :
  EmitNtCMem(e^.son[1],nest+1,AT0 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 46/2215 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' TestAndBranch');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

	IF e^.attr^.TestAndBranch.cond THEN k:=1 ELSE k:=0 END;
	CurRoundMode := RndUnknown;
 AssHString('	cmpb	$');  AssInt ( k);  AssHString(',');  AssMemAdr( AT0.CMem.am);  AssLn; 
 AssHString('	je	');  AssString( e^.attr^.TestAndBranch.tar^);  AssLn; 
	
     | 47 :
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
  EmitNtRegOrCMemOrIm(e^.son[2],nest+1,AT1 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 47/2224 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' FixedCompareAndBranch');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

	CurRoundMode := RndUnknown;
 AssHString('	cmp');  AssSuffix( e^.attr^.FixedCompareAndBranch.mode);  AssHString('	');  AssAdrMode( AT1.RegOrCMemOrIm.am);  AssHString(',');  AssRegister2 ( RegAlloc.allocation[1].op[1],e^.attr^.FixedCompareAndBranch.mode);  AssLn; 
 AssHString('	j');  AssString( RelationTable[e^.attr^.FixedCompareAndBranch.rel][SignedTable[e^.attr^.FixedCompareAndBranch.mode]]);  AssHString('	');  AssString( e^.attr^.FixedCompareAndBranch.tar^);  AssLn; 
	
     | 48 :
  EmitNtCMem(e^.son[1],nest+1,AT0 ); 
  EmitNtRegOrIm(e^.son[2],nest+1,AT1 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 48/2232 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' FixedCompareAndBranch');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

	CurRoundMode := RndUnknown;
 AssHString('	cmp');  AssSuffix( e^.attr^.FixedCompareAndBranch.mode);  AssHString('	');  AssAdrMode( AT1.RegOrIm.am);  AssHString(',');  AssMemAdr( AT0.CMem.am);  AssLn; 
 AssHString('	j');  AssString( RelationTable[e^.attr^.FixedCompareAndBranch.rel][SignedTable[e^.attr^.FixedCompareAndBranch.mode]]);  AssHString('	');  AssString( e^.attr^.FixedCompareAndBranch.tar^);  AssLn; 
	
     | 49 :
  EmitNtConstant(e^.son[1],nest+1,AT0 ); 
  EmitNtRegOrCMem(e^.son[2],nest+1,AT1 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 49/2240 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' FixedCompareAndBranch');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

	CurRoundMode := RndUnknown;
 AssHString('	cmp');  AssSuffix( e^.attr^.FixedCompareAndBranch.mode);  AssHString('	$');  AssInt ( e^.son[1]^.gcg^.Constant.val);  AssHString(',');  AssAdrMode( AT1.RegOrCMem.am);  AssLn; 
 AssHString('	j');  AssString( RelationTable[Reverse[e^.attr^.FixedCompareAndBranch.rel]][SignedTable[e^.attr^.FixedCompareAndBranch.mode]]);  AssHString('	');  AssString( e^.attr^.FixedCompareAndBranch.tar^);  AssLn; 
	
     | 50 :
  EmitNtfreg(e^.son[1],nest+1,AT0 ); 
  EmitNtCMem(e^.son[2],nest+1,AT1 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 50/2248 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' FloatCompareAndBranch');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

	CurRoundMode := RndUnknown;
 AssHString('	fcomp');  AssSuffix( e^.son[2]^.gcg^.CMem.mode);  AssHString('	');  AssMemAdr( AT1.CMem.am);  AssLn; 
 AssHString('	fstsw	%ax');  AssLn; 
 AssHString('	sahf');  AssLn; 
 AssHString('	j');  AssString( RelationTable[e^.attr^.FloatCompareAndBranch.rel][SignedTable[e^.attr^.FloatCompareAndBranch.mode]]);  AssHString('	');  AssString( e^.attr^.FloatCompareAndBranch.tar^);  AssLn; 
	PopFStack;
	
     | 51 :
  EmitNtCMem(e^.son[1],nest+1,AT0 ); 
  EmitNtfreg(e^.son[2],nest+1,AT1 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 51/2260 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' FloatCompareAndBranch');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

	CurRoundMode := RndUnknown;
 AssHString('	fcomp');  AssSuffix( e^.son[1]^.gcg^.CMem.mode);  AssHString('	');  AssMemAdr( AT0.CMem.am);  AssLn; 
 AssHString('	fstsw	%ax');  AssLn; 
 AssHString('	sahf');  AssLn; 
 AssHString('	j');  AssString( RelationTable[Reverse[e^.attr^.FloatCompareAndBranch.rel]][SignedTable[e^.attr^.FloatCompareAndBranch.mode]]);  AssHString('	');  AssString( e^.attr^.FloatCompareAndBranch.tar^);  AssLn; 
	PopFStack;
	
     | 52 :
  EmitNtfstack(e^.son[1],nest+1,AT0 ); 
  EmitNtfreg(e^.son[2],nest+1,AT1 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 52/2272 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' FloatCompareAndBranch');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

	CurRoundMode := RndUnknown;
	INC (FStackStart);
	IF FStackTempo[FStackStart] # NoTempo THEN
 AssHString('	fcompl	');  AssInt ( FStackTempo[FStackStart]);  AssHString('(%ebp)');  AssLn; 
	  DEC (CurFStackSize);
	ELSE
 AssHString('	fcompp');  AssLn; 
	  DEC (CurFStackSize, 2);
	END;
 AssHString('	fstsw	%ax');  AssLn; 
 AssHString('	sahf');  AssLn; 
 AssHString('	j');  AssString( RelationTable[Reverse[e^.attr^.FloatCompareAndBranch.rel]][SignedTable[e^.attr^.FloatCompareAndBranch.mode]]);  AssHString('	');  AssString( e^.attr^.FloatCompareAndBranch.tar^);  AssLn; 
	
     | 53 :
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
  EmitNtRegOrCMemOrIm(e^.son[2],nest+1,AT1 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 53/2290 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' SetCompareAndBranch');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

	CurRoundMode := RndUnknown;
 AssHString('	cmpl	');  AssAdrMode( AT1.RegOrCMemOrIm.am);  AssHString(',');  AssRegister(RegAlloc.allocation[1].op[1]);  AssLn; 
 AssHString('	j');  AssString( RelationTable[e^.attr^.SetCompareAndBranch.rel][FALSE]);  AssHString('	');  AssString( e^.attr^.SetCompareAndBranch.tar^);  AssLn; 
	
     | 54 :
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
  EmitNtRegOrCMemOrIm(e^.son[2],nest+1,AT1 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 54/2299 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' SetCompareAndBranch');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

	CurRoundMode := RndUnknown;
 AssHString('	movl	');  AssRegister(RegAlloc.allocation[1].op[1]);  AssHString(',');  AssRegister(RegAlloc.allocation[1].scr[1]);  AssLn; 
	CASE e^.attr^.SetCompareAndBranch.rel OF
	| RelLess:
 AssHString('	or	');  AssAdrMode( AT1.RegOrCMemOrIm.am);  AssHString(',');  AssRegister(RegAlloc.allocation[1].scr[1]);  AssLn; 
	e^.attr^.SetCompareAndBranch.rel := RelUnequal;
	| RelLessOrEqual:
 AssHString('	and	');  AssAdrMode( AT1.RegOrCMemOrIm.am);  AssHString(',');  AssRegister(RegAlloc.allocation[1].scr[1]);  AssLn; 
	e^.attr^.SetCompareAndBranch.rel := RelEqual;
	| RelGreater:
 AssHString('	and	');  AssAdrMode( AT1.RegOrCMemOrIm.am);  AssHString(',');  AssRegister(RegAlloc.allocation[1].scr[1]);  AssLn; 
	e^.attr^.SetCompareAndBranch.rel := RelUnequal;
	| RelGreaterOrEqual:
 AssHString('	or	');  AssAdrMode( AT1.RegOrCMemOrIm.am);  AssHString(',');  AssRegister(RegAlloc.allocation[1].scr[1]);  AssLn; 
	e^.attr^.SetCompareAndBranch.rel := RelEqual;
	END;
 AssHString('	cmpl	');  AssRegister(RegAlloc.allocation[1].scr[1]);  AssHString(',');  AssRegister(RegAlloc.allocation[1].op[1]);  AssLn; 
 AssHString('	j');  AssString( RelationTable[e^.attr^.SetCompareAndBranch.rel][FALSE]);  AssHString('	');  AssString( e^.attr^.SetCompareAndBranch.tar^);  AssLn; 
	
     | 55 :
  EmitNtRegOrIm(e^.son[1],nest+1,AT0 ); 
  EmitNtRegOrCMem(e^.son[2],nest+1,AT1 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 55/2331 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' TestMembershipAndBranchL');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

	CurRoundMode := RndUnknown;
 AssHString('	btl	');  AssAdrMode( AT0.RegOrIm.am);  AssHString(',');  AssAdrMode( AT1.RegOrCMem.am);  AssLn; 
	IF e^.attr^.TestMembershipAndBranchL.cond THEN
 AssHString('	jc	');  AssString( e^.attr^.TestMembershipAndBranchL.tar^);  AssLn; 
	ELSE
 AssHString('	jnc	');  AssString( e^.attr^.TestMembershipAndBranchL.tar^);  AssLn; 
	END;
	
     | 56 :
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 56/2343 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' TestOddAndBranch');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

	CurRoundMode := RndUnknown;
 AssHString('	and');  AssSuffix( e^.attr^.TestOddAndBranch.mode);  AssHString('	$1,');  AssRegister2 ( RegAlloc.allocation[1].op[1],e^.attr^.TestOddAndBranch.mode);  AssLn; 
	IF NOT e^.attr^.TestOddAndBranch.cond THEN
 AssHString('	xor');  AssSuffix( e^.attr^.TestOddAndBranch.mode);  AssHString('	$1,');  AssRegister2 ( RegAlloc.allocation[1].op[1],e^.attr^.TestOddAndBranch.mode);  AssLn; 
	END;
 AssHString('	jnz	');  AssString( e^.attr^.TestOddAndBranch.tar^);  AssLn; 
	
     | 57 :
  EmitNtarglist(e^.son[1],nest+1,AT0 ); 
  EmitNtreg(e^.son[2],nest+1,AT1 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 57/2483 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' ProcedureCall');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

	CurRoundMode := RndUnknown;
 AssHString('	call	');  AssRegister(RegAlloc.allocation[1].op[2]);  AssLn; 
	IF e^.attr^.ProcedureCall.paramsize # 0 THEN 
	(* e^.attr^.ProcedureCall.paramsize := (e^.attr^.ProcedureCall.paramsize+3) DIV 4 * 4; *)
 AssHString('	addl	$');  AssInt ( e^.attr^.ProcedureCall.paramsize);  AssHString(', %esp');  AssLn; 
	END;
	
     | 58 :
  EmitNtarglist(e^.son[1],nest+1,AT0 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 58/2495 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' ProcedureCall');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

	CurRoundMode := RndUnknown;
 AssHString('	call	');  AssString( e^.son[2]^.attr^.ProcedureConstant.index^.Entry^);  AssLn; 
	IF e^.attr^.ProcedureCall.paramsize # 0 THEN 
	(* e^.attr^.ProcedureCall.paramsize := (e^.attr^.ProcedureCall.paramsize+3) DIV 4 * 4; *)
 AssHString('	addl	$');  AssInt ( e^.attr^.ProcedureCall.paramsize);  AssHString(', %esp');  AssLn; 
	END;
	
     | 59 :
  EmitNtarglist(e^.son[1],nest+1,AT0 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 59/2567 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' RTSCall');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

	CurRoundMode := RndUnknown;
	CASE e^.attr^.RTSCall.sysproc OF 
	      | SysProcHALT : 
 AssHString('	call	exit_');  AssLn; 
	      | SysProcTransfer : 
 AssHString('	call	Transfer_');  AssLn; 
	      | SysProcNewprocess : 
 AssHString('	call	NewProcess_');  AssLn; 
	      | SysProcCaseError : 
 AssHString('	call	CaseErr_');  AssLn; 
	      | SysProcReturnError : 
 AssHString('	call	ReturnErr_');  AssLn; 
	END;
	IF e^.attr^.RTSCall.paramsize # 0 THEN 
	(* e^.attr^.RTSCall.paramsize := (e^.attr^.RTSCall.paramsize+3) DIV 4 * 4; *)
 AssHString('	addl	$');  AssInt ( e^.attr^.RTSCall.paramsize);  AssHString(', %esp');  AssLn; 
	END;
	
     | 60 :
  EmitNtmem(e^.son[1],nest+1,AT0 ); 
  EmitNtfreg(e^.son[2]^.son[1]^.son[2],nest+1,AT1 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 60/2791 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' Assign');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

	CheckRoundMode (RndNegInf);
 AssHString('	fistpl	');  AssMemAdr( AT0.mem.am);  AssLn; 
	PopFStack;
	
     | 61 :
  EmitNtmem(e^.son[1],nest+1,AT0 ); 
  EmitNtfreg(e^.son[2]^.son[1]^.son[2],nest+1,AT1 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 61/2831 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' Assign');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

	CheckRoundMode (RndZero);
 AssHString('	fistpl	');  AssMemAdr( AT0.mem.am);  AssLn; 
	PopFStack;
	
     | 62 :
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 62/2848 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' BeginProcedure');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

   UndefOperand := IR.emptyExpression;
   CurLevel := e^.attr^.BeginProcedure.level;
   CurFrameSize := 4 * ((ABS(e^.attr^.BeginProcedure.FrameSize)+3) DIV 4);
   CurRoundMode := RndUnknown;
   IF CurLevel > MaxDisplay THEN 
      ERROR ('too many nested procedures', CurPos);
      CurLevel := 0;
   END;
   CurFStackSize := 0;
   FStackStart := MaxFloatTempo;
   TransferTempo := NoTempo;

(* -------------------------------------------------------------------- *)
(* Die Daten werden bei Prozeduren wie folgt auf dem Stack abgelegt :	*)
(*		------------------------- <--- Stackanfang (MaxAdr)	*)
(*		|			|				*)
(*		|	.......		|				*)
(*		|			|				*)
(*	    .	|-----------------------|				*)
(*	    .	|	Parameter	|				*)
(*	    .	| (bei OpenArrays nur	|				*)
(*	    8	|  Adresse und Laenge)	|				*)
(*		|-----------------------|				*)
(*	    4	|    Return-Adresse	|				*)
(*		|-----------------------|				*)
(*	    0	|   alter BasePointer   | <--- BasePointer (ebp)	*)
(*		|-----------------------|   )				*)
(*	   -4	| alter DV [CurLevel]	|   )				*)
(*		|-----------------------|   )				*)
(*	   -8	| lokale Variablen	|   )  Activation Record (AR)	*)
(*	    .	|-----------------------|   )				*)
(*	    .	| evtl.temporaere Werte	|   )				*)
(*	    .	|-----------------------|   )				*)
(*		| evtl. OpenArrays	|   )				*)
(*		|-----------------------|   )				*)
(*		| Platz fuer Sicherungen|   )				*)
(*		|-----------------------| <--- StackPointer (esp)	*)
(*									*)
(* Der DisplayVector DV enthaelt jeweils den aktuellen BP der zuletzt	*)
(* auf dem jeweiligen Level ausgefuehrten Prozedur.			*)
(* Der DisplayVector steht ab der Stelle DISPLAY_ im Speicher,		*)
(* durch das sich die Adresse vom DisplayVector des Levels i, also	*)
(* DV [i], als DISPLAY_ + i*4 errechnen laesst.				*)
(* Aus Optimierungsgruenden wird jedoch der DV nicht in jedem Level	*)
(* gespeichert und geladen, sondern nur, falls eine Prozedur des Levels *)
(* i auf eine nicht-globale Variable des Levels j (j < i) zugreift.	*)
(* -------------------------------------------------------------------- *)

(* Zunaechst den Label bestimmen, an dem der die Groesse des Activation *)
(* Records bei EndProcedure gespeichert wird. Diese kann durch die un-	*)
(* gewisse Zahl der benoetigten temporaeren Werte erst am Schluss	*)
(* bestimmt werden.							*)
	GetLabel (ProcLabel);
(* Startlabel der Prozedur eintragen *)
 AssHString('	.align 4');  AssLn; 
 AssString( e^.attr^.BeginProcedure.index^.Entry^);  AssHString(':');  AssLn; 
(* Alten BP sichern *)
 AssHString('	pushl	%ebp');  AssLn; 
(* Neuer BP fuer neuen Activation Record *)
 AssHString('	movl	%esp,%ebp');  AssLn; 
(* Platz fuer alten DisplayVector[CurLevel], lokale Variablen und	*)
(* temporaere Werte schaffen.						*)
 AssHString('	subl	$');  AssString( ProcLabel^);  AssHString(', %esp');  AssLn; 
     IF SaveDisplay [CurLevel] THEN
(* Aktualisieren des DisplayVectors,  wird fuer andere Prozedur benoetigt. *)
(* Laden des momentanen DisplayVectors [CurLevel] *)
 AssHString('	movl	DISPLAY_+');  AssInt ( 4 * CurLevel);  AssHString(',%ecx');  AssLn; 
(* Sichern des alten Wertes des DisplayVectors [CurLevel] *)
 AssHString('	movl	%ecx,-4(%ebp)');  AssLn; 
(* Schreiben des aktuellen DisplayVectors [CurLevel] *)
 AssHString('	movl	%ebp,DISPLAY_+');  AssInt ( 4 * CurLevel);  AssLn; 
     END;

(* !!!!!!!!!! Registersicherung bei Funktionsaufrufen !!!!!!!!!!
   Linux/BSD: edi, esi, ebx werden in aufgerufener Funktion gesichert,
	      ecx, edx werden in aufrufender Funktion gesichert,
	      eax oder st behinhaltet den Rueckgabewert
   MOCKA:     edi, esi, ebx, ecx, edx werden in aufrufender Funktion gesichert,
	      eax oder st behinhaltet den Rueckgabewert
   Dieser Unterschied ist unwesentlich bei Aufruf von C-Funktionen
   (z.B. libc) aus MOCKA-Programmen. Im umgekehrten Fall (Aufruf von MOCKA-
   Funktionen von C aus, z.B. von atexit-Funktionen) fuehrt dies zu Fehlern.
   Abhilfe: Die CcallsMocka Option
   Diese sichert immer edi, esi, ebx, egal ob sie veraendert werden oder
   nicht (was genau geaendert wird, weiss man bei einem 1-Pass Compiler
   leider nicht). Dies ist im Normalfall ueberfluessig, und sollte daher
   aus Performancegruenden auf die Funktionen beschraenkt werden, die
   von C aus aufgerufen werden.						*)
     IF Enabled (oCCall) THEN
 AssHString('	pushl %edi');  AssLn; 
 AssHString('	pushl %esi');  AssLn; 
 AssHString('	pushl %ebx');  AssLn; 
     END;

     IF Kommentar THEN
 AssHString('	/* --------------------------------------------------------- */');  AssLn; 
 AssHString('	/* Level : ');  AssInt ( CurLevel);  AssHString(' */');  AssLn; 
 AssHString('	/* --------------------------------------------------------- */');  AssLn; 
     END;
	
     | 63 :
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 63/2952 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' CopyOpenArray');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

	IF Kommentar THEN
 AssHString('	/* Copy Open Array Begin */');  AssLn; 
	END;
   IF (e^.attr^.CopyOpenArray.elemsize # ByteSize) & ODD (e^.attr^.CopyOpenArray.elemsize) THEN INC (e^.attr^.CopyOpenArray.elemsize); END;
   (* Lade letzten Index (= Laenge - 1) des Stringparameter *)
 AssHString('	movl	');  AssInt ( e^.attr^.CopyOpenArray.HighOffset);  AssHString('(%ebp),%ecx');  AssLn; 
   (* Bestimme Laenge des Stringparameters *)
 AssHString('	incl	%ecx');  AssLn; 
   (* Ermittle Platzbedarf fuer den Stringparameter.			*)
   (* Das Resultat steht in Register ecx.				*)
      IF e^.attr^.CopyOpenArray.elemsize # ByteSize THEN
      (* Multiplikation Elementanzahl * Elementgroesse = Platzbedarf	*)
      (* durchfuehren.							*)
	 IF IsPowerOfTwo (e^.attr^.CopyOpenArray.elemsize) THEN
 AssHString('	shll	$');  AssInt ( Log2 (e^.attr^.CopyOpenArray.elemsize));  AssHString(', %ecx');  AssLn; 
	 ELSE
 AssHString('	imull	$');  AssInt ( e^.attr^.CopyOpenArray.elemsize);  AssHString(',%ecx');  AssLn; 
	 END
      END;
   (* Platzbedarf auf durch 4 teilbare Adresse aufrunden *)
 AssHString('	addl	$3,%ecx');  AssLn; 
 AssHString('	andl	$0xfffffffc, %ecx');  AssLn; 
   (* Schaffe auf dem Stack entsprechenden Platz *)
 AssHString('	subl 	%ecx,%esp');  AssLn; 
   (* Startadresse des zu kopierenden ARRAYs				*)
 AssHString('	movl	%esp,%edi');  AssLn; 
   (* Lade Startadresse des OpenArrays *)
 AssHString('	movl	');  AssInt ( e^.attr^.CopyOpenArray.DataOffset);  AssHString('(%ebp),%esi');  AssLn; 
    (* Ersetze im Parameterteil der Prozedur die Startadresse des Parameter-
       strings durch die Adresse dessen Kopie auf das OpenArray         *)
 AssHString('	movl	%edi,');  AssInt ( e^.attr^.CopyOpenArray.DataOffset);  AssHString('(%ebp)');  AssLn; 
     (* Kopiere Stringparameter in den OpenArray-Platz der Prozedur     *)
     (* Register ecx enthaelt die Groesse				*)
     (* Register esi die Quelladresse,					*)
     (* Register edi die Zieladresse.					*)
 AssHString('	shrl	$2,%ecx');  AssLn; 
 AssHString('	cld');  AssLn; 
 AssHString('	repz');  AssLn; 
 AssHString('	movsl');  AssLn; 
	IF Kommentar THEN
 AssHString('	/* Copy Open Array End */');  AssLn; 
	END;
	
     | 64 :
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 64/3000 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' Return');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;
 
	IF (CurFStackSize <> 0) AND OK THEN
 AssHString('	ERROR: CurFStackSize <> 0');  AssLn; 
	AssClose;
	CompilerError ("Something's going wrong in fp expression");
	END;	
	CurRoundMode := RndUnknown;
	IF SaveDisplay [CurLevel] THEN
	(* Alten Wert von DisplayVector [CurLevel] laden, wurde veraendert *)
 AssHString('	movl	-4(%ebp),%ecx');  AssLn; 
	(* Diesen Wert wieder in DisplayVector [CurLevel] eintragen *)
 AssHString('	movl	%ecx,DISPLAY_+');  AssInt ( 4 * CurLevel);  AssLn; 
	END;
	(* Bei Aufruf von MOCKA Prozeduren von C Programmen 
	   (z.B. atexitHandler) muessen diese in BeginProcedure
	   gesicherten Register wiederhergestellt werden. *)
	IF Enabled (oCCall) THEN
 AssHString('	popl %ebx');  AssLn; 
 AssHString('	popl %esi');  AssLn; 
 AssHString('	popl %edi');  AssLn; 
	END;
	(* Ruecksprung aus der Prozedur *)
 AssHString('	leave');  AssLn; 
 AssHString('	ret');  AssLn; 
	
     | 65 :
  EmitNtreg(e^.son[1],nest+1,AT0 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 65/3033 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' ReturnValueL');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

     | 66 :
  EmitNtfreg(e^.son[1],nest+1,AT0 ); 
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 66/3036 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' ReturnValueL');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

	PopFStack;
	
     | 67 :
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 67/3042 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' EndProcedure');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

	SaveDisplay [CurLevel] := FALSE; 
	CurFrameSize :=   4 * ((ABS(CurFrameSize)+3) DIV 4);
 AssHString('	');  AssString( ProcLabel^);  AssHString(' = ');  AssInt ( CurFrameSize);  AssLn; 
	
     | 68 :
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 68/3052 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' EndModule');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;

   AssClose;
   IF OK (* no Errors *) THEN 
      StringAssign  (cmd, 'cd '); 
      StringAppend2 (cmd, LibraryDirectory, '; ');
      StringAppend1 (cmd, AssemblerScript);
      IF Enabled (ElfOption) THEN
	 StringAppend1 (cmd,' -elf');
      END;
      IF Enabled (DebugOption) THEN
	 StringAppend1 (cmd,' -g');
      END;
      StringAppend2 (cmd, ' ', ModName); 
      SystemCommand (cmd,ok);
      IF NOT ok THEN 
	 WriteString ("Assembler terminated with error"); WriteLn;
	 exit (1);
      END;
   END;
   IF NOT Enabled (oAssemblerListing) THEN
      Erase (AsmListFileName,ok);
   END;
	
     | 69 :
    IF (RegAlloc.allocation [1]. num>0) THEN 
       PerformActions (1);
    END;
    IF IR.OptEmitMatch THEN 
       WriteNest (nest);
       WriteString ('Rule 69/3078 Cost=');
       WriteInt    (e^.gcg^.stmtcost,1);
       WriteString (' Mark');
       WriteLn;
       WriteNest (nest); 
       IF e#NIL THEN IR.PrintAttributes (e^.attr^); END; WriteLn; 
       WriteNest (nest); 
       RegAlloc.PrintAllocation (1); WriteLn;
    END;
 CurPos.line := e^.attr^.Mark.line; CurPos.col := e^.attr^.Mark.col; 
    END;
  END;
END EmitStatement;

PROCEDURE EmitInstruction (e : IR.Expression);
BEGIN
   IF IR.OptEmitIR THEN IR.PrintExpression (e); END;
(*++++++ start insertion IpEmitI1 ++++++*)

      localavail[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regst)-0, ORD (Regst1)-0};


(*------ end   insertion IpEmitI1 ------*)
   RegAlloc.RegAllo (e, localavail);
(******* empty insertion IpEmitI2 *******)
   EmitStatement (e);
END EmitInstruction;
 VAR  RegisterSetEmpty : RegisterSet;
BEGIN
  RegisterSetEmpty [0] := {};
(*++++++ start insertion IpEmitInit ++++++*)

    SizeTable [UnsignedByte] := ByteSize;
    SizeTable [UnsignedWord] := WordSize;
    SizeTable [UnsignedLong] := LongSize;
    SizeTable [SignedByte]   := ByteSize;
    SizeTable [SignedWord]   := WordSize;
    SizeTable [SignedLong]   := LongSize;
    SizeTable [FloatShort]   := SizeREAL;
    SizeTable [FloatLong]    := SizeLONGREAL;

    SuffixTable [UnsignedByte] := 'b';
    SuffixTable [UnsignedWord] := 'w';
    SuffixTable [UnsignedLong] := 'l';
    SuffixTable [SignedByte]   := 'b';
    SuffixTable [SignedWord]   := 'w';
    SuffixTable [SignedLong]   := 'l';
    SuffixTable [FloatShort]   := 's';
    SuffixTable [FloatLong]    := 'l';

    SignedTable [UnsignedByte] := FALSE;
    SignedTable [UnsignedWord] := FALSE;
    SignedTable [UnsignedLong] := FALSE;
    SignedTable [SignedByte]   := TRUE;
    SignedTable [SignedWord]   := TRUE;
    SignedTable [SignedLong]   := TRUE;
    SignedTable [FloatShort]   := FALSE;
    SignedTable [FloatLong]    := FALSE;

    RelationTable [RelEqual]	     [FALSE] := 'e';
    RelationTable [RelUnequal]	     [FALSE] := 'ne';
    RelationTable [RelLess]	     [FALSE] := 'b';
    RelationTable [RelLessOrEqual]   [FALSE] := 'be';
    RelationTable [RelGreater]	     [FALSE] := 'a';
    RelationTable [RelGreaterOrEqual][FALSE] := 'ae';
    RelationTable [RelEqual]	     [TRUE ] := 'e';
    RelationTable [RelUnequal]	     [TRUE ] := 'ne';
    RelationTable [RelLess]	     [TRUE ] := 'l';
    RelationTable [RelLessOrEqual]   [TRUE ] := 'le';
    RelationTable [RelGreater]	     [TRUE ] := 'g';
    RelationTable [RelGreaterOrEqual][TRUE ] := 'ge';

    Reverse [RelEqual]		:= RelEqual;
    Reverse [RelUnequal]	:= RelUnequal;
    Reverse [RelLess]		:= RelGreater;
    Reverse [RelLessOrEqual]	:= RelGreaterOrEqual;
    Reverse [RelGreater]	:= RelLess;
    Reverse [RelGreaterOrEqual]	:= RelLessOrEqual;

    PowerTable [0] := 1;
    FOR i := 1 TO MaxPowerTable DO PowerTable [i] := 2 * PowerTable [i-1] END;

    WordReg[Regeax] := '%ax';
    WordReg[Regebx] := '%bx';
    WordReg[Regecx] := '%cx';
    WordReg[Regedx] := '%dx';
    WordReg[Regesi] := '%si';
    WordReg[Regedi] := '%di';
    ByteReg[Regeax] := '%al';
    ByteReg[Regebx] := '%bl';
    ByteReg[Regecx] := '%cl';
    ByteReg[Regedx] := '%dl';

    DefineOption (oEmitIR, 'EmitIR', FALSE, FALSE);
    DefineOption (oEmitMatch, 'EmitMatch', FALSE, FALSE);
    DefineOption (oRegAlloc, 'RegAlloc', FALSE, FALSE);
    DefineOption (oCCall, 'CcallsMocka', FALSE, FALSE);    
    DefineOption (ElfOption, 'elf', FALSE, TRUE);
    DefineOption (oAssemblerListing, 'S', FALSE, TRUE);


(*------ end   insertion IpEmitInit ------*)
END Emit.
