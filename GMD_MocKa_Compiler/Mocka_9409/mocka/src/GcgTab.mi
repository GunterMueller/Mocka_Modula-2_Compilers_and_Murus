  (**************************************************************) 
  (*   This module was generated by BEG V1.75        *)
  (*        GMD Forschunsstelle an der Universitaet Karlsruhe   *)
  (*        Vincenz-Priessnitz-Str. 1 76131 Karlsruhe Germany   *)
  (**************************************************************)
 IMPLEMENTATION MODULE GcgTab;
 FROM IR IMPORT Register, RegisterSet, Rule, MaxPscArity, NonTerminal;
 FROM IR      IMPORT OpCode;



 VAR  nt : NonTerminal;
 BEGIN
      RegDestroy [Regeax][0] := 
      { ORD (Regeax)-0};
      RegDestroy [Regebx][0] := 
      { ORD (Regebx)-0};
      RegDestroy [Regecx][0] := 
      { ORD (Regecx)-0};
      RegDestroy [Regedx][0] := 
      { ORD (Regedx)-0};
      RegDestroy [Regesi][0] := 
      { ORD (Regesi)-0};
      RegDestroy [Regedi][0] := 
      { ORD (Regedi)-0};
      RegDestroy [Regebp][0] := 
      { ORD (Regebp)-0};
      RegDestroy [Regesp][0] := 
      { ORD (Regesp)-0};
      RegDestroy [Regst][0] := 
      { ORD (Regst)-0};
      RegDestroy [Regst1][0] := 
      { ORD (Regst1)-0};

 (*   RULE 1/332  *)
   WITH RuleDescr [1] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 0;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 332;
     scrnum := 0;
  END;
 (*   RULE 2/336  *)
   WITH RuleDescr [2] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSymPlusOffset;
           path := 0;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 336;
     scrnum := 0;
  END;
 (*   RULE 3/341  *)
   WITH RuleDescr [3] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 0;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 341;
     scrnum := 0;
  END;
 (*   RULE 4/347  *)
   WITH RuleDescr [4] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 0;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 347;
     scrnum := 0;
  END;
 (*   RULE 5/353  *)
   WITH RuleDescr [5] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegPlusSymPlusOffset;
           path := 0;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 353;
     scrnum := 0;
  END;
 (*   RULE 6/362  *)
   WITH RuleDescr [6] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntOffsetPlusIndexMultFaktor;
           path := 0;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 362;
     scrnum := 0;
  END;
 (*   RULE 7/371  *)
   WITH RuleDescr [7] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 0;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 371;
     scrnum := 0;
  END;
 (*   RULE 8/377  *)
   WITH RuleDescr [8] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 0;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 377;
     scrnum := 0;
  END;
 (*   RULE 9/383  *)
   WITH RuleDescr [9] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntCMem;
           path := 0;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 383;
     scrnum := 0;
  END;
 (*   RULE 10/389  *)
   WITH RuleDescr [10] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegOrCMem;
           path := 0;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 389;
     scrnum := 0;
  END;
 (*   RULE 11/398  *)
   WITH RuleDescr [11] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 0;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 398;
     scrnum := 0;
  END;
 (*   RULE 12/404  *)
   WITH RuleDescr [12] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 0;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 404;
     scrnum := 0;
  END;
 (*   RULE 13/410  *)
   WITH RuleDescr [13] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 0;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 410;
     scrnum := 0;
  END;
 (*   RULE 14/417  *)
   WITH RuleDescr [14] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegOrCMemOrIm;
           path := 0;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 417;
     scrnum := 0;
  END;
 (*   RULE 15/424  *)
   WITH RuleDescr [15] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntFloatConstant;
           path := 0;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 424;
     scrnum := 0;
  END;
 (*   RULE 16/443  *)
   WITH RuleDescr [16] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntFloatConstant;
           path := 0;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 443;
     scrnum := 0;
  END;
 (*   RULE 17/462  *)
   WITH RuleDescr [17] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntCMem;
           path := 0;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 462;
     scrnum := 0;
  END;
 (*   RULE 18/469  *)
   WITH RuleDescr [18] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regst1)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 0;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 469;
     scrnum := 0;
  END;
 (*   RULE 19/479  *)
   WITH RuleDescr [19] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 479;
     scrnum := 0;
  END;
 (*   RULE 20/483  *)
   WITH RuleDescr [20] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 483;
     scrnum := 0;
  END;
 (*   RULE 21/487  *)
   WITH RuleDescr [21] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 487;
     scrnum := 0;
  END;
 (*   RULE 22/491  *)
   WITH RuleDescr [22] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 491;
     scrnum := 0;
  END;
 (*   RULE 23/495  *)
   WITH RuleDescr [23] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 495;
     scrnum := 0;
  END;
 (*   RULE 24/499  *)
   WITH RuleDescr [24] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 499;
     scrnum := 0;
  END;
 (*   RULE 25/503  *)
   WITH RuleDescr [25] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 503;
     scrnum := 0;
  END;
 (*   RULE 26/507  *)
   WITH RuleDescr [26] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 507;
     scrnum := 0;
  END;
 (*   RULE 27/512  *)
   WITH RuleDescr [27] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 512;
     scrnum := 0;
  END;
 (*   RULE 28/516  *)
   WITH RuleDescr [28] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 516;
     scrnum := 0;
  END;
 (*   RULE 29/520  *)
   WITH RuleDescr [29] DO
           register := RKAdrmode;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 520;
     scrnum := 0;
  END;
 (*   RULE 30/524  *)
   WITH RuleDescr [30] DO
           register := RKAdrmode;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 524;
     scrnum := 0;
  END;
 (*   RULE 31/531  *)
   WITH RuleDescr [31] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 531;
     scrnum := 0;
  END;
 (*   RULE 32/543  *)
   WITH RuleDescr [32] DO
           register := RKAdrmode;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 543;
     scrnum := 0;
  END;
 (*   RULE 33/551  *)
   WITH RuleDescr [33] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 551;
     scrnum := 0;
  END;
 (*   RULE 34/563  *)
   WITH RuleDescr [34] DO
           register := RKAdrmode;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 563;
     scrnum := 0;
  END;
 (*   RULE 35/592  *)
   WITH RuleDescr [35] DO
           register := RKRegister;
     pscarity := 0;
     resregs   [0]  := { ORD (Regebp)-0};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 592;
     scrnum := 0;
  END;
 (*   RULE 36/596  *)
   WITH RuleDescr [36] DO
           register := RKAdrmode;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 596;
     scrnum := 0;
  END;
 (*   RULE 37/606  *)
   WITH RuleDescr [37] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 606;
     scrnum := 0;
  END;
 (*   RULE 38/606  *)
   WITH RuleDescr [38] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 606;
     scrnum := 0;
  END;
 (*   RULE 39/661  *)
   WITH RuleDescr [39] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 661;
     scrnum := 0;
  END;
 (*   RULE 40/668  *)
   WITH RuleDescr [40] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 668;
     scrnum := 0;
  END;
 (*   RULE 41/673  *)
   WITH RuleDescr [41] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 673;
     scrnum := 0;
  END;
 (*   RULE 42/681  *)
   WITH RuleDescr [42] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntFloatConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 681;
     scrnum := 0;
  END;
 (*   RULE 43/689  *)
   WITH RuleDescr [43] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntFloatConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 689;
     scrnum := 0;
  END;
 (*   RULE 44/699  *)
   WITH RuleDescr [44] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntCMem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 699;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 45/708  *)
   WITH RuleDescr [45] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := { ORD (Regecx)-0};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regedi)-0};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regesi)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 708;
     scrnum := 0;
  END;
 (*   RULE 46/725  *)
   WITH RuleDescr [46] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntmem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 725;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 47/734  *)
   WITH RuleDescr [47] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntmem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 734;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 48/751  *)
   WITH RuleDescr [48] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 751;
     scrnum := 0;
  END;
 (*   RULE 49/755  *)
   WITH RuleDescr [49] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 755;
     scrnum := 0;
  END;
 (*   RULE 50/759  *)
   WITH RuleDescr [50] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 759;
     scrnum := 0;
  END;
 (*   RULE 51/763  *)
   WITH RuleDescr [51] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 763;
     scrnum := 0;
  END;
 (*   RULE 52/771  *)
   WITH RuleDescr [52] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 771;
     scrnum := 0;
  END;
 (*   RULE 53/779  *)
   WITH RuleDescr [53] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 779;
     scrnum := 0;
  END;
 (*   RULE 54/786  *)
   WITH RuleDescr [54] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegOrCMemOrIm;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 786;
     scrnum := 0;
  END;
 (*   RULE 55/789  *)
   WITH RuleDescr [55] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegOrCMemOrIm;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 789;
     scrnum := 0;
  END;
 (*   RULE 56/795  *)
   WITH RuleDescr [56] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 795;
     scrnum := 0;
  END;
 (*   RULE 57/799  *)
   WITH RuleDescr [57] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 799;
     scrnum := 0;
  END;
 (*   RULE 58/807  *)
   WITH RuleDescr [58] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 807;
     scrnum := 0;
  END;
 (*   RULE 59/811  *)
   WITH RuleDescr [59] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 811;
     scrnum := 0;
  END;
 (*   RULE 60/824  *)
   WITH RuleDescr [60] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 824;
     scrnum := 0;
  END;
 (*   RULE 61/828  *)
   WITH RuleDescr [61] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSymPlusOffset;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 828;
     scrnum := 0;
  END;
 (*   RULE 62/828  *)
   WITH RuleDescr [62] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSymPlusOffset;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 828;
     scrnum := 0;
  END;
 (*   RULE 63/832  *)
   WITH RuleDescr [63] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntSymPlusOffset;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 832;
     scrnum := 0;
  END;
 (*   RULE 64/832  *)
   WITH RuleDescr [64] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSymPlusOffset;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 832;
     scrnum := 0;
  END;
 (*   RULE 65/838  *)
   WITH RuleDescr [65] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegPlusSymPlusOffset;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 838;
     scrnum := 0;
  END;
 (*   RULE 66/838  *)
   WITH RuleDescr [66] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegPlusSymPlusOffset;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 838;
     scrnum := 0;
  END;
 (*   RULE 67/843  *)
   WITH RuleDescr [67] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntOffsetPlusIndexMultFaktor;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 843;
     scrnum := 0;
  END;
 (*   RULE 68/843  *)
   WITH RuleDescr [68] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntOffsetPlusIndexMultFaktor;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 843;
     scrnum := 0;
  END;
 (*   RULE 69/849  *)
   WITH RuleDescr [69] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegPlusSymPlusOffset;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntOffsetPlusIndexMultFaktor;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 849;
     scrnum := 0;
  END;
 (*   RULE 70/849  *)
   WITH RuleDescr [70] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntOffsetPlusIndexMultFaktor;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegPlusSymPlusOffset;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 849;
     scrnum := 0;
  END;
 (*   RULE 71/858  *)
   WITH RuleDescr [71] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntmem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 858;
     scrnum := 0;
  END;
 (*   RULE 72/858  *)
   WITH RuleDescr [72] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 858;
     scrnum := 0;
  END;
 (*   RULE 73/867  *)
   WITH RuleDescr [73] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 867;
     scrnum := 0;
  END;
 (*   RULE 74/867  *)
   WITH RuleDescr [74] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 867;
     scrnum := 0;
  END;
 (*   RULE 75/872  *)
   WITH RuleDescr [75] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegOrCMemOrIm;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 872;
     scrnum := 0;
  END;
 (*   RULE 76/872  *)
   WITH RuleDescr [76] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 872;
     scrnum := 0;
  END;
 (*   RULE 77/878  *)
   WITH RuleDescr [77] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntCMem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 878;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 78/891  *)
   WITH RuleDescr [78] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 18;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntSimpleVariable;
           path := 290;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 891;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 79/891  *)
   WITH RuleDescr [79] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 274;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntConstant;
           path := 34;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 891;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 80/905  *)
   WITH RuleDescr [80] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrIm;
           path := 18;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntSimpleVariable;
           path := 290;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 905;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 81/905  *)
   WITH RuleDescr [81] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 274;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntRegOrIm;
           path := 34;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 905;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 82/918  *)
   WITH RuleDescr [82] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 274;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntSimpleVariable;
           path := 290;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 918;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 83/933  *)
   WITH RuleDescr [83] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 933;
     scrnum := 0;
  END;
 (*   RULE 84/937  *)
   WITH RuleDescr [84] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSymPlusOffset;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 937;
     scrnum := 0;
  END;
 (*   RULE 85/941  *)
   WITH RuleDescr [85] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegPlusSymPlusOffset;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 941;
     scrnum := 0;
  END;
 (*   RULE 86/946  *)
   WITH RuleDescr [86] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 946;
     scrnum := 0;
  END;
 (*   RULE 87/955  *)
   WITH RuleDescr [87] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 955;
     scrnum := 0;
  END;
 (*   RULE 88/960  *)
   WITH RuleDescr [88] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 960;
     scrnum := 0;
  END;
 (*   RULE 89/966  *)
   WITH RuleDescr [89] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 274;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntConstant;
           path := 34;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 966;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 90/980  *)
   WITH RuleDescr [90] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 274;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntRegOrIm;
           path := 34;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 980;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 91/993  *)
   WITH RuleDescr [91] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 17;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 18;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 993;
     scrnum := 0;
  END;
 (*   RULE 92/1001  *)
   WITH RuleDescr [92] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1001;
     scrnum := 0;
  END;
 (*   RULE 93/1005  *)
   WITH RuleDescr [93] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1005;
     scrnum := 0;
  END;
 (*   RULE 94/1005  *)
   WITH RuleDescr [94] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegOrCMemOrIm;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1005;
     scrnum := 0;
  END;
 (*   RULE 95/1010  *)
   WITH RuleDescr [95] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1010;
     scrnum := 0;
  END;
 (*   RULE 96/1010  *)
   WITH RuleDescr [96] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1010;
     scrnum := 0;
  END;
 (*   RULE 97/1015  *)
   WITH RuleDescr [97] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 18;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntSimpleVariable;
           path := 290;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1015;
     scrnum := 0;
  END;
 (*   RULE 98/1015  *)
   WITH RuleDescr [98] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 274;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntConstant;
           path := 34;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1015;
     scrnum := 0;
  END;
 (*   RULE 99/1023  *)
   WITH RuleDescr [99] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1023;
     scrnum := 0;
  END;
 (*   RULE 100/1023  *)
   WITH RuleDescr [100] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1023;
     scrnum := 0;
  END;
 (*   RULE 101/1030  *)
   WITH RuleDescr [101] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1030;
     scrnum := 0;
  END;
 (*   RULE 102/1030  *)
   WITH RuleDescr [102] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1030;
     scrnum := 0;
  END;
 (*   RULE 103/1040  *)
   WITH RuleDescr [103] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntOffsetPlusIndexMultFaktor;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1040;
     scrnum := 0;
  END;
 (*   RULE 104/1040  *)
   WITH RuleDescr [104] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntOffsetPlusIndexMultFaktor;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1040;
     scrnum := 0;
  END;
 (*   RULE 105/1049  *)
   WITH RuleDescr [105] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntOffsetPlusIndexMultFaktor;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1049;
     scrnum := 0;
  END;
 (*   RULE 106/1049  *)
   WITH RuleDescr [106] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntOffsetPlusIndexMultFaktor;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1049;
     scrnum := 0;
  END;
 (*   RULE 107/1060  *)
   WITH RuleDescr [107] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 17;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 4385;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntSimpleVariable;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1060;
     scrnum := 0;
  END;
 (*   RULE 108/1060  *)
   WITH RuleDescr [108] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 4369;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 33;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntSimpleVariable;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1060;
     scrnum := 0;
  END;
 (*   RULE 109/1060  *)
   WITH RuleDescr [109] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 18;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntSimpleVariable;
           path := 4386;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1060;
     scrnum := 0;
  END;
 (*   RULE 110/1060  *)
   WITH RuleDescr [110] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 4370;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntConstant;
           path := 34;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1060;
     scrnum := 0;
  END;
 (*   RULE 111/1076  *)
   WITH RuleDescr [111] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1076;
     scrnum := 0;
  END;
 (*   RULE 112/1076  *)
   WITH RuleDescr [112] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1076;
     scrnum := 0;
  END;
 (*   RULE 113/1084  *)
   WITH RuleDescr [113] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 18;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntSimpleVariable;
           path := 290;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1084;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 114/1084  *)
   WITH RuleDescr [114] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 274;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntConstant;
           path := 34;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1084;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 115/1099  *)
   WITH RuleDescr [115] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1099;
     scrnum := 0;
  END;
 (*   RULE 116/1099  *)
   WITH RuleDescr [116] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1099;
     scrnum := 0;
  END;
 (*   RULE 117/1114  *)
   WITH RuleDescr [117] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1114;
     scrnum := 0;
  END;
 (*   RULE 118/1114  *)
   WITH RuleDescr [118] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1114;
     scrnum := 0;
  END;
 (*   RULE 119/1129  *)
   WITH RuleDescr [119] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1129;
     scrnum := 0;
  END;
 (*   RULE 120/1129  *)
   WITH RuleDescr [120] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1129;
     scrnum := 0;
  END;
 (*   RULE 121/1144  *)
   WITH RuleDescr [121] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegOrCMemOrIm;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1144;
     scrnum := 0;
  END;
 (*   RULE 122/1144  *)
   WITH RuleDescr [122] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1144;
     scrnum := 0;
  END;
 (*   RULE 123/1151  *)
   WITH RuleDescr [123] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegOrCMem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1151;
     scrnum := 0;
  END;
 (*   RULE 124/1151  *)
   WITH RuleDescr [124] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1151;
     scrnum := 0;
  END;
 (*   RULE 125/1157  *)
   WITH RuleDescr [125] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 17;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 18;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1157;
     scrnum := 0;
  END;
 (*   RULE 126/1170  *)
   WITH RuleDescr [126] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 274;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntSimpleVariable;
           path := 290;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1170;
     scrnum := 2;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
     scrrs [2] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 127/1187  *)
   WITH RuleDescr [127] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0};
     changeregs[0]  := { ORD (Regedx)-0};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1187;
     scrnum := 0;
  END;
 (*   RULE 128/1208  *)
   WITH RuleDescr [128] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1208;
     scrnum := 0;
  END;
 (*   RULE 129/1213  *)
   WITH RuleDescr [129] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1213;
     scrnum := 0;
  END;
 (*   RULE 130/1218  *)
   WITH RuleDescr [130] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntOffsetPlusIndexMultFaktor;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1218;
     scrnum := 0;
  END;
 (*   RULE 131/1228  *)
   WITH RuleDescr [131] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1228;
     scrnum := 0;
  END;
 (*   RULE 132/1236  *)
   WITH RuleDescr [132] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 274;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntConstant;
           path := 34;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1236;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 133/1251  *)
   WITH RuleDescr [133] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1251;
     scrnum := 0;
  END;
 (*   RULE 134/1259  *)
   WITH RuleDescr [134] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 274;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntConstant;
           path := 34;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1259;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 135/1274  *)
   WITH RuleDescr [135] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 17;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 18;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1274;
     scrnum := 0;
  END;
 (*   RULE 136/1282  *)
   WITH RuleDescr [136] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0};
     changeregs[0]  := { ORD (Regedx)-0};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1282;
     scrnum := 0;
  END;
 (*   RULE 137/1294  *)
   WITH RuleDescr [137] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0};
     changeregs[0]  := { ORD (Regedx)-0};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1294;
     scrnum := 0;
  END;
 (*   RULE 138/1306  *)
   WITH RuleDescr [138] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0};
     changeregs[0]  := { ORD (Regedx)-0};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1306;
     scrnum := 0;
  END;
 (*   RULE 139/1318  *)
   WITH RuleDescr [139] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1318;
     scrnum := 0;
  END;
 (*   RULE 140/1323  *)
   WITH RuleDescr [140] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1323;
     scrnum := 0;
  END;
 (*   RULE 141/1330  *)
   WITH RuleDescr [141] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 274;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntConstant;
           path := 34;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1330;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 142/1344  *)
   WITH RuleDescr [142] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regedx)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1344;
     scrnum := 0;
  END;
 (*   RULE 143/1355  *)
   WITH RuleDescr [143] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regedx)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1355;
     scrnum := 0;
  END;
 (*   RULE 144/1366  *)
   WITH RuleDescr [144] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regedx)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1366;
     scrnum := 0;
  END;
 (*   RULE 145/1380  *)
   WITH RuleDescr [145] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1380;
     scrnum := 0;
  END;
 (*   RULE 146/1385  *)
   WITH RuleDescr [146] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntCMem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1385;
     scrnum := 0;
  END;
 (*   RULE 147/1385  *)
   WITH RuleDescr [147] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
        WITH op[2] DO 
           nt   := ntCMem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1385;
     scrnum := 0;
  END;
 (*   RULE 148/1390  *)
   WITH RuleDescr [148] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfstack;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst1)-0};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1390;
     scrnum := 0;
  END;
 (*   RULE 149/1390  *)
   WITH RuleDescr [149] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
        WITH op[2] DO 
           nt   := ntfstack;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst1)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1390;
     scrnum := 0;
  END;
 (*   RULE 150/1395  *)
   WITH RuleDescr [150] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
        WITH op[2] DO 
           nt   := ntCMem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1395;
     scrnum := 0;
  END;
 (*   RULE 151/1400  *)
   WITH RuleDescr [151] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntCMem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1400;
     scrnum := 0;
  END;
 (*   RULE 152/1405  *)
   WITH RuleDescr [152] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfstack;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst1)-0};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1405;
     scrnum := 0;
  END;
 (*   RULE 153/1410  *)
   WITH RuleDescr [153] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
        WITH op[2] DO 
           nt   := ntfstack;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst1)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1410;
     scrnum := 0;
  END;
 (*   RULE 154/1415  *)
   WITH RuleDescr [154] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntCMem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1415;
     scrnum := 0;
  END;
 (*   RULE 155/1415  *)
   WITH RuleDescr [155] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
        WITH op[2] DO 
           nt   := ntCMem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1415;
     scrnum := 0;
  END;
 (*   RULE 156/1420  *)
   WITH RuleDescr [156] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfstack;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst1)-0};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1420;
     scrnum := 0;
  END;
 (*   RULE 157/1420  *)
   WITH RuleDescr [157] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
        WITH op[2] DO 
           nt   := ntfstack;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst1)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1420;
     scrnum := 0;
  END;
 (*   RULE 158/1425  *)
   WITH RuleDescr [158] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
        WITH op[2] DO 
           nt   := ntCMem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1425;
     scrnum := 0;
  END;
 (*   RULE 159/1430  *)
   WITH RuleDescr [159] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntCMem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1430;
     scrnum := 0;
  END;
 (*   RULE 160/1435  *)
   WITH RuleDescr [160] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfstack;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst1)-0};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1435;
     scrnum := 0;
  END;
 (*   RULE 161/1440  *)
   WITH RuleDescr [161] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
        WITH op[2] DO 
           nt   := ntfstack;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst1)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1440;
     scrnum := 0;
  END;
 (*   RULE 162/1445  *)
   WITH RuleDescr [162] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1445;
     scrnum := 0;
  END;
 (*   RULE 163/1453  *)
   WITH RuleDescr [163] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegOrCMemOrIm;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1453;
     scrnum := 0;
  END;
 (*   RULE 164/1453  *)
   WITH RuleDescr [164] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1453;
     scrnum := 0;
  END;
 (*   RULE 165/1459  *)
   WITH RuleDescr [165] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrIm;
           path := 18;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntSimpleVariable;
           path := 290;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1459;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 166/1459  *)
   WITH RuleDescr [166] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 274;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntRegOrIm;
           path := 34;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1459;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 167/1472  *)
   WITH RuleDescr [167] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegOrCMemOrIm;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1472;
     scrnum := 0;
  END;
 (*   RULE 168/1481  *)
   WITH RuleDescr [168] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1481;
     scrnum := 0;
  END;
 (*   RULE 169/1489  *)
   WITH RuleDescr [169] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 274;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntreg;
           path := 34;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1489;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 170/1503  *)
   WITH RuleDescr [170] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 274;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntConstant;
           path := 34;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1503;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 171/1516  *)
   WITH RuleDescr [171] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegOrCMemOrIm;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1516;
     scrnum := 0;
  END;
 (*   RULE 172/1516  *)
   WITH RuleDescr [172] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1516;
     scrnum := 0;
  END;
 (*   RULE 173/1522  *)
   WITH RuleDescr [173] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrIm;
           path := 18;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntSimpleVariable;
           path := 290;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1522;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 174/1522  *)
   WITH RuleDescr [174] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 274;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntRegOrIm;
           path := 34;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1522;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 175/1535  *)
   WITH RuleDescr [175] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegOrCMemOrIm;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1535;
     scrnum := 0;
  END;
 (*   RULE 176/1535  *)
   WITH RuleDescr [176] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1535;
     scrnum := 0;
  END;
 (*   RULE 177/1541  *)
   WITH RuleDescr [177] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrIm;
           path := 18;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntSimpleVariable;
           path := 290;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1541;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 178/1541  *)
   WITH RuleDescr [178] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 274;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntRegOrIm;
           path := 34;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1541;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 179/1558  *)
   WITH RuleDescr [179] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1558;
     scrnum := 0;
  END;
 (*   RULE 180/1564  *)
   WITH RuleDescr [180] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntRegOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1564;
     scrnum := 0;
  END;
 (*   RULE 181/1570  *)
   WITH RuleDescr [181] DO
           register := RKRegister;
     pscarity := 3;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntConstant;
           path := 3;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1570;
     scrnum := 0;
  END;
 (*   RULE 182/1576  *)
   WITH RuleDescr [182] DO
           register := RKRegister;
     pscarity := 3;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntreg;
           path := 3;              calc := FALSE;

           regs[0] := { ORD (Regecx)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1576;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 183/1598  *)
   WITH RuleDescr [183] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1598;
     scrnum := 0;
  END;
 (*   RULE 184/1611  *)
   WITH RuleDescr [184] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntCMem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1611;
     scrnum := 0;
  END;
 (*   RULE 185/1623  *)
   WITH RuleDescr [185] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1623;
     scrnum := 0;
  END;
 (*   RULE 186/1637  *)
   WITH RuleDescr [186] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1637;
     scrnum := 0;
  END;
 (*   RULE 187/1641  *)
   WITH RuleDescr [187] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntFloatConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1641;
     scrnum := 0;
  END;
 (*   RULE 188/1648  *)
   WITH RuleDescr [188] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := { ORD (Regeax)-0};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1648;
     scrnum := 0;
  END;
 (*   RULE 189/1666  *)
   WITH RuleDescr [189] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := { ORD (Regeax)-0};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 18;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1666;
     scrnum := 0;
  END;
 (*   RULE 190/1684  *)
   WITH RuleDescr [190] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1684;
     scrnum := 0;
  END;
 (*   RULE 191/1689  *)
   WITH RuleDescr [191] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSymPlusOffset;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1689;
     scrnum := 0;
  END;
 (*   RULE 192/1695  *)
   WITH RuleDescr [192] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegPlusSymPlusOffset;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1695;
     scrnum := 0;
  END;
 (*   RULE 193/1702  *)
   WITH RuleDescr [193] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntOffsetPlusIndexMultFaktor;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1702;
     scrnum := 0;
  END;
 (*   RULE 194/1709  *)
   WITH RuleDescr [194] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1709;
     scrnum := 0;
  END;
 (*   RULE 195/1720  *)
   WITH RuleDescr [195] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntCMem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1720;
     scrnum := 0;
  END;
 (*   RULE 196/1729  *)
   WITH RuleDescr [196] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegOrCMem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1729;
     scrnum := 0;
  END;
 (*   RULE 197/1742  *)
   WITH RuleDescr [197] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1742;
     scrnum := 0;
  END;
 (*   RULE 198/1748  *)
   WITH RuleDescr [198] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1748;
     scrnum := 0;
  END;
 (*   RULE 199/1753  *)
   WITH RuleDescr [199] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntFloatConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1753;
     scrnum := 0;
  END;
 (*   RULE 200/1758  *)
   WITH RuleDescr [200] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1758;
     scrnum := 0;
  END;
 (*   RULE 201/1762  *)
   WITH RuleDescr [201] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1762;
     scrnum := 0;
  END;
 (*   RULE 202/1778  *)
   WITH RuleDescr [202] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegOrIm;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1778;
     scrnum := 0;
  END;
 (*   RULE 203/1802  *)
   WITH RuleDescr [203] DO
           register := RKRegister;
     pscarity := 3;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntConstant;
           path := 3;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1802;
     scrnum := 0;
  END;
 (*   RULE 204/1807  *)
   WITH RuleDescr [204] DO
           register := RKRegister;
     pscarity := 3;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntConstant;
           path := 3;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1807;
     scrnum := 0;
  END;
 (*   RULE 205/1830  *)
   WITH RuleDescr [205] DO
           register := RKRegister;
     pscarity := 3;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntRegOrCMemOrIm;
           path := 3;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1830;
     scrnum := 0;
  END;
 (*   RULE 206/1843  *)
   WITH RuleDescr [206] DO
           register := RKRegister;
     pscarity := 3;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := { ORD (Regeax)-0};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
        WITH op[2] DO 
           nt   := ntCMem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntCMem;
           path := 3;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1843;
     scrnum := 0;
  END;
 (*   RULE 207/1872  *)
   WITH RuleDescr [207] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1872;
     scrnum := 0;
  END;
 (*   RULE 208/1880  *)
   WITH RuleDescr [208] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntCMem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1880;
     scrnum := 0;
  END;
 (*   RULE 209/1888  *)
   WITH RuleDescr [209] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1888;
     scrnum := 0;
  END;
 (*   RULE 210/1896  *)
   WITH RuleDescr [210] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0};
     changeregs[0]  := { ORD (Regeax)-0};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
        WITH op[2] DO 
           nt   := ntCMem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1896;
     scrnum := 0;
  END;
 (*   RULE 211/1908  *)
   WITH RuleDescr [211] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0};
     changeregs[0]  := { ORD (Regeax)-0};
        WITH op[1] DO 
           nt   := ntCMem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1908;
     scrnum := 0;
  END;
 (*   RULE 212/1920  *)
   WITH RuleDescr [212] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0};
     changeregs[0]  := { ORD (Regeax)-0};
        WITH op[1] DO 
           nt   := ntfstack;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst1)-0};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1920;
     scrnum := 0;
  END;
 (*   RULE 213/1938  *)
   WITH RuleDescr [213] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1938;
     scrnum := 0;
  END;
 (*   RULE 214/1947  *)
   WITH RuleDescr [214] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1947;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 215/1979  *)
   WITH RuleDescr [215] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegOrIm;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1979;
     scrnum := 0;
  END;
 (*   RULE 216/1991  *)
   WITH RuleDescr [216] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1991;
     scrnum := 0;
  END;
 (*   RULE 217/2004  *)
   WITH RuleDescr [217] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2004;
     scrnum := 0;
  END;
 (*   RULE 218/2010  *)
   WITH RuleDescr [218] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2010;
     scrnum := 0;
  END;
 (*   RULE 219/2016  *)
   WITH RuleDescr [219] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2016;
     scrnum := 0;
  END;
 (*   RULE 220/2036  *)
   WITH RuleDescr [220] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2036;
     scrnum := 0;
  END;
 (*   RULE 221/2044  *)
   WITH RuleDescr [221] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntCMem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2044;
     scrnum := 0;
  END;
 (*   RULE 222/2052  *)
   WITH RuleDescr [222] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2052;
     scrnum := 0;
  END;
 (*   RULE 223/2059  *)
   WITH RuleDescr [223] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntCMem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2059;
     scrnum := 0;
  END;
 (*   RULE 224/2066  *)
   WITH RuleDescr [224] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2066;
     scrnum := 0;
  END;
 (*   RULE 225/2073  *)
   WITH RuleDescr [225] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := { ORD (Regeax)-0};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
        WITH op[2] DO 
           nt   := ntCMem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2073;
     scrnum := 0;
  END;
 (*   RULE 226/2084  *)
   WITH RuleDescr [226] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := { ORD (Regeax)-0};
        WITH op[1] DO 
           nt   := ntCMem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2084;
     scrnum := 0;
  END;
 (*   RULE 227/2095  *)
   WITH RuleDescr [227] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := { ORD (Regeax)-0};
        WITH op[1] DO 
           nt   := ntfstack;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst1)-0};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2095;
     scrnum := 0;
  END;
 (*   RULE 228/2112  *)
   WITH RuleDescr [228] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2112;
     scrnum := 0;
  END;
 (*   RULE 229/2120  *)
   WITH RuleDescr [229] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2120;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 230/2151  *)
   WITH RuleDescr [230] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegOrIm;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2151;
     scrnum := 0;
  END;
 (*   RULE 231/2162  *)
   WITH RuleDescr [231] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2162;
     scrnum := 0;
  END;
 (*   RULE 232/2235  *)
   WITH RuleDescr [232] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2235;
     scrnum := 0;
  END;
 (*   RULE 233/2237  *)
   WITH RuleDescr [233] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntarglist;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2237;
     scrnum := 0;
  END;
 (*   RULE 234/2255  *)
   WITH RuleDescr [234] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntarglist;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2255;
     scrnum := 0;
  END;
 (*   RULE 235/2261  *)
   WITH RuleDescr [235] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntarglist;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntCMem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2261;
     scrnum := 0;
  END;
 (*   RULE 236/2271  *)
   WITH RuleDescr [236] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntarglist;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2271;
     scrnum := 0;
  END;
 (*   RULE 237/2280  *)
   WITH RuleDescr [237] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntarglist;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntmem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2280;
     scrnum := 0;
  END;
 (*   RULE 238/2290  *)
   WITH RuleDescr [238] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := { ORD (Regecx)-0,  ORD (Regedi)-0};
        WITH op[1] DO 
           nt   := ntarglist;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regesi)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2290;
     scrnum := 0;
  END;
 (*   RULE 239/2302  *)
   WITH RuleDescr [239] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
        WITH op[1] DO 
           nt   := ntarglist;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2302;
     scrnum := 0;
  END;
 (*   RULE 240/2313  *)
   WITH RuleDescr [240] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
        WITH op[1] DO 
           nt   := ntarglist;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2313;
     scrnum := 0;
  END;
 (*   RULE 241/2324  *)
   WITH RuleDescr [241] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0};
     changeregs[0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
        WITH op[1] DO 
           nt   := ntarglist;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2324;
     scrnum := 0;
  END;
 (*   RULE 242/2338  *)
   WITH RuleDescr [242] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regeax)-0};
     changeregs[0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
        WITH op[1] DO 
           nt   := ntarglist;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2338;
     scrnum := 0;
  END;
 (*   RULE 243/2352  *)
   WITH RuleDescr [243] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
        WITH op[1] DO 
           nt   := ntarglist;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2352;
     scrnum := 0;
  END;
 (*   RULE 244/2366  *)
   WITH RuleDescr [244] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
        WITH op[1] DO 
           nt   := ntarglist;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2366;
     scrnum := 0;
  END;
 (*   RULE 245/2380  *)
   WITH RuleDescr [245] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
        WITH op[1] DO 
           nt   := ntarglist;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2380;
     scrnum := 0;
  END;
 (*   RULE 246/2404  *)
   WITH RuleDescr [246] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 33;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2404;
     scrnum := 0;
  END;
 (*   RULE 247/2413  *)
   WITH RuleDescr [247] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 33;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2413;
     scrnum := 0;
  END;
 (*   RULE 248/2454  *)
   WITH RuleDescr [248] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntloadln2;
           path := 17;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 33;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2454;
     scrnum := 0;
  END;
 (*   RULE 249/2479  *)
   WITH RuleDescr [249] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2479;
     scrnum := 0;
  END;
 (*   RULE 250/2486  *)
   WITH RuleDescr [250] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 33;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2486;
     scrnum := 0;
  END;
 (*   RULE 251/2495  *)
   WITH RuleDescr [251] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 33;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2495;
     scrnum := 0;
  END;
 (*   RULE 252/2504  *)
   WITH RuleDescr [252] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 33;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2504;
     scrnum := 0;
  END;
 (*   RULE 253/2518  *)
   WITH RuleDescr [253] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntCMem;
           path := 33;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2518;
     scrnum := 0;
  END;
 (*   RULE 254/2530  *)
   WITH RuleDescr [254] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 33;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2530;
     scrnum := 0;
  END;
 (*   RULE 255/2544  *)
   WITH RuleDescr [255] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 33;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2544;
     scrnum := 0;
  END;
 (*   RULE 256/2552  *)
   WITH RuleDescr [256] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 33;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2552;
     scrnum := 0;
  END;
 (*   RULE 257/2559  *)
   WITH RuleDescr [257] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 33;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2559;
     scrnum := 0;
  END;
 (*   RULE 258/2573  *)
   WITH RuleDescr [258] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntFloatConstant;
           path := 33;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2573;
     scrnum := 0;
  END;
 (*   RULE 259/2584  *)
   WITH RuleDescr [259] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 530;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2584;
     scrnum := 0;
  END;
 (*   RULE 260/2601  *)
   WITH RuleDescr [260] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2601;
     scrnum := 0;
  END;
 (*   RULE 261/2681  *)
   WITH RuleDescr [261] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := { ORD (Regecx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2681;
     scrnum := 0;
  END;
 (*   RULE 262/2729  *)
   WITH RuleDescr [262] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2729;
     scrnum := 0;
  END;
 (*   RULE 263/2753  *)
   WITH RuleDescr [263] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2753;
     scrnum := 0;
  END;
 (*   RULE 264/2756  *)
   WITH RuleDescr [264] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2756;
     scrnum := 0;
  END;
 (*   RULE 265/2762  *)
   WITH RuleDescr [265] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2762;
     scrnum := 0;
  END;
 (*   RULE 266/2796  *)
   WITH RuleDescr [266] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2796;
     scrnum := 0;
  END;
 (*   RULE 267/2819  *)
   WITH RuleDescr [267] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2819;
     scrnum := 0;
  END;
(******* empty insertion IpGcgTabInit *******)
 END GcgTab.
