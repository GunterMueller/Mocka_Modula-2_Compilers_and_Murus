  (**************************************************************) 
  (*   This module was generated by BEG V1.75        *)
  (*        GMD Forschunsstelle an der Universitaet Karlsruhe   *)
  (*        Vincenz-Priessnitz-Str. 1 76131 Karlsruhe Germany   *)
  (**************************************************************)
 IMPLEMENTATION MODULE GcgTab;
 FROM IR IMPORT Register, RegisterSet, Rule, MaxPscArity, NonTerminal;
 FROM IR      IMPORT OpCode;



 VAR  nt : NonTerminal;
 BEGIN
      RegDestroy [Regeax][0] := 
      { ORD (Regeax)-0};
      RegDestroy [Regebx][0] := 
      { ORD (Regebx)-0};
      RegDestroy [Regecx][0] := 
      { ORD (Regecx)-0};
      RegDestroy [Regedx][0] := 
      { ORD (Regedx)-0};
      RegDestroy [Regesi][0] := 
      { ORD (Regesi)-0};
      RegDestroy [Regedi][0] := 
      { ORD (Regedi)-0};
      RegDestroy [Regebp][0] := 
      { ORD (Regebp)-0};
      RegDestroy [Regesp][0] := 
      { ORD (Regesp)-0};
      RegDestroy [Regst][0] := 
      { ORD (Regst)-0};
      RegDestroy [Regst1][0] := 
      { ORD (Regst1)-0};

 (*   RULE 1/332  *)
   WITH RuleDescr [1] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 0;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 332;
     scrnum := 0;
  END;
 (*   RULE 2/336  *)
   WITH RuleDescr [2] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSymPlusOffset;
           path := 0;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 336;
     scrnum := 0;
  END;
 (*   RULE 3/341  *)
   WITH RuleDescr [3] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 0;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 341;
     scrnum := 0;
  END;
 (*   RULE 4/347  *)
   WITH RuleDescr [4] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 0;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 347;
     scrnum := 0;
  END;
 (*   RULE 5/357  *)
   WITH RuleDescr [5] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 0;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 357;
     scrnum := 0;
  END;
 (*   RULE 6/363  *)
   WITH RuleDescr [6] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 0;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 363;
     scrnum := 0;
  END;
 (*   RULE 7/373  *)
   WITH RuleDescr [7] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegPlusSymPlusOffset;
           path := 0;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 373;
     scrnum := 0;
  END;
 (*   RULE 8/382  *)
   WITH RuleDescr [8] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntOffsetPlusIndexMultFaktor;
           path := 0;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 382;
     scrnum := 0;
  END;
 (*   RULE 9/391  *)
   WITH RuleDescr [9] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 0;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 391;
     scrnum := 0;
  END;
 (*   RULE 10/397  *)
   WITH RuleDescr [10] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 0;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 397;
     scrnum := 0;
  END;
 (*   RULE 11/403  *)
   WITH RuleDescr [11] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntCMem;
           path := 0;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 403;
     scrnum := 0;
  END;
 (*   RULE 12/409  *)
   WITH RuleDescr [12] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegOrCMem;
           path := 0;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 409;
     scrnum := 0;
  END;
 (*   RULE 13/418  *)
   WITH RuleDescr [13] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 0;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 418;
     scrnum := 0;
  END;
 (*   RULE 14/424  *)
   WITH RuleDescr [14] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 0;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 424;
     scrnum := 0;
  END;
 (*   RULE 15/430  *)
   WITH RuleDescr [15] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 0;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 430;
     scrnum := 0;
  END;
 (*   RULE 16/437  *)
   WITH RuleDescr [16] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegOrCMemOrIm;
           path := 0;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 437;
     scrnum := 0;
  END;
 (*   RULE 17/444  *)
   WITH RuleDescr [17] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntFloatConstant;
           path := 0;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 444;
     scrnum := 0;
  END;
 (*   RULE 18/463  *)
   WITH RuleDescr [18] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntFloatConstant;
           path := 0;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 463;
     scrnum := 0;
  END;
 (*   RULE 19/482  *)
   WITH RuleDescr [19] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntCMem;
           path := 0;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 482;
     scrnum := 0;
  END;
 (*   RULE 20/489  *)
   WITH RuleDescr [20] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regst1)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 0;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 489;
     scrnum := 0;
  END;
 (*   RULE 21/499  *)
   WITH RuleDescr [21] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 499;
     scrnum := 0;
  END;
 (*   RULE 22/503  *)
   WITH RuleDescr [22] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 503;
     scrnum := 0;
  END;
 (*   RULE 23/507  *)
   WITH RuleDescr [23] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 507;
     scrnum := 0;
  END;
 (*   RULE 24/511  *)
   WITH RuleDescr [24] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 511;
     scrnum := 0;
  END;
 (*   RULE 25/515  *)
   WITH RuleDescr [25] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 515;
     scrnum := 0;
  END;
 (*   RULE 26/519  *)
   WITH RuleDescr [26] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 519;
     scrnum := 0;
  END;
 (*   RULE 27/523  *)
   WITH RuleDescr [27] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 523;
     scrnum := 0;
  END;
 (*   RULE 28/527  *)
   WITH RuleDescr [28] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 527;
     scrnum := 0;
  END;
 (*   RULE 29/532  *)
   WITH RuleDescr [29] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 532;
     scrnum := 0;
  END;
 (*   RULE 30/536  *)
   WITH RuleDescr [30] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 536;
     scrnum := 0;
  END;
 (*   RULE 31/540  *)
   WITH RuleDescr [31] DO
           register := RKAdrmode;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 540;
     scrnum := 0;
  END;
 (*   RULE 32/544  *)
   WITH RuleDescr [32] DO
           register := RKAdrmode;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 544;
     scrnum := 0;
  END;
 (*   RULE 33/551  *)
   WITH RuleDescr [33] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 551;
     scrnum := 0;
  END;
 (*   RULE 34/563  *)
   WITH RuleDescr [34] DO
           register := RKAdrmode;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 563;
     scrnum := 0;
  END;
 (*   RULE 35/571  *)
   WITH RuleDescr [35] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 571;
     scrnum := 0;
  END;
 (*   RULE 36/583  *)
   WITH RuleDescr [36] DO
           register := RKAdrmode;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 583;
     scrnum := 0;
  END;
 (*   RULE 37/612  *)
   WITH RuleDescr [37] DO
           register := RKRegister;
     pscarity := 0;
     resregs   [0]  := { ORD (Regebp)-0};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 612;
     scrnum := 0;
  END;
 (*   RULE 38/616  *)
   WITH RuleDescr [38] DO
           register := RKAdrmode;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 616;
     scrnum := 0;
  END;
 (*   RULE 39/626  *)
   WITH RuleDescr [39] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 626;
     scrnum := 0;
  END;
 (*   RULE 40/626  *)
   WITH RuleDescr [40] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 626;
     scrnum := 0;
  END;
 (*   RULE 41/681  *)
   WITH RuleDescr [41] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 681;
     scrnum := 0;
  END;
 (*   RULE 42/688  *)
   WITH RuleDescr [42] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 688;
     scrnum := 0;
  END;
 (*   RULE 43/693  *)
   WITH RuleDescr [43] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 693;
     scrnum := 0;
  END;
 (*   RULE 44/701  *)
   WITH RuleDescr [44] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntFloatConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 701;
     scrnum := 0;
  END;
 (*   RULE 45/709  *)
   WITH RuleDescr [45] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntFloatConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 709;
     scrnum := 0;
  END;
 (*   RULE 46/719  *)
   WITH RuleDescr [46] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntCMem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 719;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 47/728  *)
   WITH RuleDescr [47] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntCMem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 728;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 48/741  *)
   WITH RuleDescr [48] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 18;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 741;
     scrnum := 0;
  END;
 (*   RULE 49/765  *)
   WITH RuleDescr [49] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := { ORD (Regecx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntmem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 765;
     scrnum := 0;
  END;
 (*   RULE 50/799  *)
   WITH RuleDescr [50] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntmem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 799;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 51/830  *)
   WITH RuleDescr [51] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 830;
     scrnum := 0;
  END;
 (*   RULE 52/834  *)
   WITH RuleDescr [52] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 834;
     scrnum := 0;
  END;
 (*   RULE 53/838  *)
   WITH RuleDescr [53] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 838;
     scrnum := 0;
  END;
 (*   RULE 54/842  *)
   WITH RuleDescr [54] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 842;
     scrnum := 0;
  END;
 (*   RULE 55/857  *)
   WITH RuleDescr [55] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 857;
     scrnum := 0;
  END;
 (*   RULE 56/874  *)
   WITH RuleDescr [56] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 874;
     scrnum := 0;
  END;
 (*   RULE 57/881  *)
   WITH RuleDescr [57] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegOrCMemOrIm;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 881;
     scrnum := 0;
  END;
 (*   RULE 58/884  *)
   WITH RuleDescr [58] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegOrCMemOrIm;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 884;
     scrnum := 0;
  END;
 (*   RULE 59/890  *)
   WITH RuleDescr [59] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 890;
     scrnum := 0;
  END;
 (*   RULE 60/894  *)
   WITH RuleDescr [60] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 894;
     scrnum := 0;
  END;
 (*   RULE 61/902  *)
   WITH RuleDescr [61] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 902;
     scrnum := 0;
  END;
 (*   RULE 62/914  *)
   WITH RuleDescr [62] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 914;
     scrnum := 0;
  END;
 (*   RULE 63/927  *)
   WITH RuleDescr [63] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 927;
     scrnum := 0;
  END;
 (*   RULE 64/931  *)
   WITH RuleDescr [64] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSymPlusOffset;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 931;
     scrnum := 0;
  END;
 (*   RULE 65/931  *)
   WITH RuleDescr [65] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSymPlusOffset;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 931;
     scrnum := 0;
  END;
 (*   RULE 66/935  *)
   WITH RuleDescr [66] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntSymPlusOffset;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 935;
     scrnum := 0;
  END;
 (*   RULE 67/935  *)
   WITH RuleDescr [67] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSymPlusOffset;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 935;
     scrnum := 0;
  END;
 (*   RULE 68/941  *)
   WITH RuleDescr [68] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntSymPlusOffset;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 941;
     scrnum := 0;
  END;
 (*   RULE 69/941  *)
   WITH RuleDescr [69] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSymPlusOffset;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 941;
     scrnum := 0;
  END;
 (*   RULE 70/951  *)
   WITH RuleDescr [70] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegPlusSymPlusOffset;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 951;
     scrnum := 0;
  END;
 (*   RULE 71/951  *)
   WITH RuleDescr [71] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegPlusSymPlusOffset;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 951;
     scrnum := 0;
  END;
 (*   RULE 72/956  *)
   WITH RuleDescr [72] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntOffsetPlusIndexMultFaktor;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 956;
     scrnum := 0;
  END;
 (*   RULE 73/956  *)
   WITH RuleDescr [73] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntOffsetPlusIndexMultFaktor;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 956;
     scrnum := 0;
  END;
 (*   RULE 74/962  *)
   WITH RuleDescr [74] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegPlusSymPlusOffset;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntOffsetPlusIndexMultFaktor;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 962;
     scrnum := 0;
  END;
 (*   RULE 75/962  *)
   WITH RuleDescr [75] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntOffsetPlusIndexMultFaktor;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegPlusSymPlusOffset;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 962;
     scrnum := 0;
  END;
 (*   RULE 76/971  *)
   WITH RuleDescr [76] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntmem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 971;
     scrnum := 0;
  END;
 (*   RULE 77/971  *)
   WITH RuleDescr [77] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 971;
     scrnum := 0;
  END;
 (*   RULE 78/980  *)
   WITH RuleDescr [78] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 980;
     scrnum := 0;
  END;
 (*   RULE 79/980  *)
   WITH RuleDescr [79] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 980;
     scrnum := 0;
  END;
 (*   RULE 80/985  *)
   WITH RuleDescr [80] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegOrCMemOrIm;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 985;
     scrnum := 0;
  END;
 (*   RULE 81/985  *)
   WITH RuleDescr [81] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 985;
     scrnum := 0;
  END;
 (*   RULE 82/991  *)
   WITH RuleDescr [82] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 18;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntSimpleVariable;
           path := 290;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 991;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 83/991  *)
   WITH RuleDescr [83] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 274;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntConstant;
           path := 34;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 991;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 84/1005  *)
   WITH RuleDescr [84] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrIm;
           path := 18;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntSimpleVariable;
           path := 290;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1005;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 85/1005  *)
   WITH RuleDescr [85] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 274;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntRegOrIm;
           path := 34;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1005;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 86/1018  *)
   WITH RuleDescr [86] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 274;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntSimpleVariable;
           path := 290;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1018;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 87/1033  *)
   WITH RuleDescr [87] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1033;
     scrnum := 0;
  END;
 (*   RULE 88/1037  *)
   WITH RuleDescr [88] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSymPlusOffset;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1037;
     scrnum := 0;
  END;
 (*   RULE 89/1041  *)
   WITH RuleDescr [89] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1041;
     scrnum := 0;
  END;
 (*   RULE 90/1047  *)
   WITH RuleDescr [90] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1047;
     scrnum := 0;
  END;
 (*   RULE 91/1057  *)
   WITH RuleDescr [91] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegPlusSymPlusOffset;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1057;
     scrnum := 0;
  END;
 (*   RULE 92/1062  *)
   WITH RuleDescr [92] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntOffsetPlusIndexMultFaktor;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1062;
     scrnum := 0;
  END;
 (*   RULE 93/1068  *)
   WITH RuleDescr [93] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1068;
     scrnum := 0;
  END;
 (*   RULE 94/1077  *)
   WITH RuleDescr [94] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1077;
     scrnum := 0;
  END;
 (*   RULE 95/1082  *)
   WITH RuleDescr [95] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1082;
     scrnum := 0;
  END;
 (*   RULE 96/1088  *)
   WITH RuleDescr [96] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 274;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntConstant;
           path := 34;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1088;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 97/1102  *)
   WITH RuleDescr [97] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 274;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntRegOrIm;
           path := 34;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1102;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 98/1115  *)
   WITH RuleDescr [98] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 17;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 18;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1115;
     scrnum := 0;
  END;
 (*   RULE 99/1123  *)
   WITH RuleDescr [99] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1123;
     scrnum := 0;
  END;
 (*   RULE 100/1127  *)
   WITH RuleDescr [100] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1127;
     scrnum := 0;
  END;
 (*   RULE 101/1127  *)
   WITH RuleDescr [101] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegOrCMemOrIm;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1127;
     scrnum := 0;
  END;
 (*   RULE 102/1132  *)
   WITH RuleDescr [102] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1132;
     scrnum := 0;
  END;
 (*   RULE 103/1132  *)
   WITH RuleDescr [103] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1132;
     scrnum := 0;
  END;
 (*   RULE 104/1137  *)
   WITH RuleDescr [104] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 18;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntSimpleVariable;
           path := 290;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1137;
     scrnum := 0;
  END;
 (*   RULE 105/1137  *)
   WITH RuleDescr [105] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 274;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntConstant;
           path := 34;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1137;
     scrnum := 0;
  END;
 (*   RULE 106/1145  *)
   WITH RuleDescr [106] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1145;
     scrnum := 0;
  END;
 (*   RULE 107/1145  *)
   WITH RuleDescr [107] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1145;
     scrnum := 0;
  END;
 (*   RULE 108/1152  *)
   WITH RuleDescr [108] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1152;
     scrnum := 0;
  END;
 (*   RULE 109/1152  *)
   WITH RuleDescr [109] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1152;
     scrnum := 0;
  END;
 (*   RULE 110/1162  *)
   WITH RuleDescr [110] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntOffsetPlusIndexMultFaktor;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1162;
     scrnum := 0;
  END;
 (*   RULE 111/1162  *)
   WITH RuleDescr [111] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntOffsetPlusIndexMultFaktor;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1162;
     scrnum := 0;
  END;
 (*   RULE 112/1171  *)
   WITH RuleDescr [112] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntOffsetPlusIndexMultFaktor;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1171;
     scrnum := 0;
  END;
 (*   RULE 113/1171  *)
   WITH RuleDescr [113] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntOffsetPlusIndexMultFaktor;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1171;
     scrnum := 0;
  END;
 (*   RULE 114/1182  *)
   WITH RuleDescr [114] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 17;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 4385;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntSimpleVariable;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1182;
     scrnum := 0;
  END;
 (*   RULE 115/1182  *)
   WITH RuleDescr [115] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 4369;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 33;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntSimpleVariable;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1182;
     scrnum := 0;
  END;
 (*   RULE 116/1182  *)
   WITH RuleDescr [116] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 18;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntSimpleVariable;
           path := 4386;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1182;
     scrnum := 0;
  END;
 (*   RULE 117/1182  *)
   WITH RuleDescr [117] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 4370;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntConstant;
           path := 34;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1182;
     scrnum := 0;
  END;
 (*   RULE 118/1198  *)
   WITH RuleDescr [118] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1198;
     scrnum := 0;
  END;
 (*   RULE 119/1198  *)
   WITH RuleDescr [119] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1198;
     scrnum := 0;
  END;
 (*   RULE 120/1206  *)
   WITH RuleDescr [120] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 18;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntSimpleVariable;
           path := 290;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1206;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 121/1206  *)
   WITH RuleDescr [121] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 274;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntConstant;
           path := 34;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1206;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 122/1221  *)
   WITH RuleDescr [122] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1221;
     scrnum := 0;
  END;
 (*   RULE 123/1221  *)
   WITH RuleDescr [123] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1221;
     scrnum := 0;
  END;
 (*   RULE 124/1236  *)
   WITH RuleDescr [124] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1236;
     scrnum := 0;
  END;
 (*   RULE 125/1236  *)
   WITH RuleDescr [125] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1236;
     scrnum := 0;
  END;
 (*   RULE 126/1251  *)
   WITH RuleDescr [126] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1251;
     scrnum := 0;
  END;
 (*   RULE 127/1251  *)
   WITH RuleDescr [127] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1251;
     scrnum := 0;
  END;
 (*   RULE 128/1266  *)
   WITH RuleDescr [128] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegOrCMemOrIm;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1266;
     scrnum := 0;
  END;
 (*   RULE 129/1266  *)
   WITH RuleDescr [129] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1266;
     scrnum := 0;
  END;
 (*   RULE 130/1273  *)
   WITH RuleDescr [130] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegOrCMem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1273;
     scrnum := 0;
  END;
 (*   RULE 131/1273  *)
   WITH RuleDescr [131] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1273;
     scrnum := 0;
  END;
 (*   RULE 132/1279  *)
   WITH RuleDescr [132] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 17;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 18;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1279;
     scrnum := 0;
  END;
 (*   RULE 133/1292  *)
   WITH RuleDescr [133] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 274;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntSimpleVariable;
           path := 290;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1292;
     scrnum := 2;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
     scrrs [2] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 134/1309  *)
   WITH RuleDescr [134] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0};
     changeregs[0]  := { ORD (Regedx)-0};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1309;
     scrnum := 0;
  END;
 (*   RULE 135/1330  *)
   WITH RuleDescr [135] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1330;
     scrnum := 0;
  END;
 (*   RULE 136/1335  *)
   WITH RuleDescr [136] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1335;
     scrnum := 0;
  END;
 (*   RULE 137/1341  *)
   WITH RuleDescr [137] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1341;
     scrnum := 0;
  END;
 (*   RULE 138/1346  *)
   WITH RuleDescr [138] DO
           register := RKAdrmode;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntOffsetPlusIndexMultFaktor;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1346;
     scrnum := 0;
  END;
 (*   RULE 139/1357  *)
   WITH RuleDescr [139] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1357;
     scrnum := 0;
  END;
 (*   RULE 140/1365  *)
   WITH RuleDescr [140] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 274;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntConstant;
           path := 34;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1365;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 141/1380  *)
   WITH RuleDescr [141] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1380;
     scrnum := 0;
  END;
 (*   RULE 142/1388  *)
   WITH RuleDescr [142] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 274;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntConstant;
           path := 34;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1388;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 143/1403  *)
   WITH RuleDescr [143] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 17;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 18;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1403;
     scrnum := 0;
  END;
 (*   RULE 144/1411  *)
   WITH RuleDescr [144] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0};
     changeregs[0]  := { ORD (Regedx)-0};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1411;
     scrnum := 0;
  END;
 (*   RULE 145/1423  *)
   WITH RuleDescr [145] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0};
     changeregs[0]  := { ORD (Regedx)-0};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1423;
     scrnum := 0;
  END;
 (*   RULE 146/1435  *)
   WITH RuleDescr [146] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0};
     changeregs[0]  := { ORD (Regedx)-0};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1435;
     scrnum := 0;
  END;
 (*   RULE 147/1447  *)
   WITH RuleDescr [147] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1447;
     scrnum := 0;
  END;
 (*   RULE 148/1452  *)
   WITH RuleDescr [148] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1452;
     scrnum := 0;
  END;
 (*   RULE 149/1459  *)
   WITH RuleDescr [149] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 274;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntConstant;
           path := 34;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1459;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 150/1473  *)
   WITH RuleDescr [150] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regedx)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1473;
     scrnum := 0;
  END;
 (*   RULE 151/1484  *)
   WITH RuleDescr [151] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regedx)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1484;
     scrnum := 0;
  END;
 (*   RULE 152/1495  *)
   WITH RuleDescr [152] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regedx)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1495;
     scrnum := 0;
  END;
 (*   RULE 153/1509  *)
   WITH RuleDescr [153] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1509;
     scrnum := 0;
  END;
 (*   RULE 154/1514  *)
   WITH RuleDescr [154] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntCMem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1514;
     scrnum := 0;
  END;
 (*   RULE 155/1514  *)
   WITH RuleDescr [155] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
        WITH op[2] DO 
           nt   := ntCMem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1514;
     scrnum := 0;
  END;
 (*   RULE 156/1519  *)
   WITH RuleDescr [156] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfstack;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst1)-0};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1519;
     scrnum := 0;
  END;
 (*   RULE 157/1519  *)
   WITH RuleDescr [157] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
        WITH op[2] DO 
           nt   := ntfstack;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst1)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1519;
     scrnum := 0;
  END;
 (*   RULE 158/1524  *)
   WITH RuleDescr [158] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
        WITH op[2] DO 
           nt   := ntCMem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1524;
     scrnum := 0;
  END;
 (*   RULE 159/1529  *)
   WITH RuleDescr [159] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntCMem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1529;
     scrnum := 0;
  END;
 (*   RULE 160/1534  *)
   WITH RuleDescr [160] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfstack;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst1)-0};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1534;
     scrnum := 0;
  END;
 (*   RULE 161/1539  *)
   WITH RuleDescr [161] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
        WITH op[2] DO 
           nt   := ntfstack;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst1)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1539;
     scrnum := 0;
  END;
 (*   RULE 162/1544  *)
   WITH RuleDescr [162] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntCMem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1544;
     scrnum := 0;
  END;
 (*   RULE 163/1544  *)
   WITH RuleDescr [163] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
        WITH op[2] DO 
           nt   := ntCMem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1544;
     scrnum := 0;
  END;
 (*   RULE 164/1549  *)
   WITH RuleDescr [164] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfstack;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst1)-0};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1549;
     scrnum := 0;
  END;
 (*   RULE 165/1549  *)
   WITH RuleDescr [165] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
        WITH op[2] DO 
           nt   := ntfstack;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst1)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1549;
     scrnum := 0;
  END;
 (*   RULE 166/1554  *)
   WITH RuleDescr [166] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
        WITH op[2] DO 
           nt   := ntCMem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1554;
     scrnum := 0;
  END;
 (*   RULE 167/1559  *)
   WITH RuleDescr [167] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntCMem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1559;
     scrnum := 0;
  END;
 (*   RULE 168/1564  *)
   WITH RuleDescr [168] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfstack;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst1)-0};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1564;
     scrnum := 0;
  END;
 (*   RULE 169/1569  *)
   WITH RuleDescr [169] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
        WITH op[2] DO 
           nt   := ntfstack;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst1)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1569;
     scrnum := 0;
  END;
 (*   RULE 170/1574  *)
   WITH RuleDescr [170] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1574;
     scrnum := 0;
  END;
 (*   RULE 171/1582  *)
   WITH RuleDescr [171] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegOrCMemOrIm;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1582;
     scrnum := 0;
  END;
 (*   RULE 172/1582  *)
   WITH RuleDescr [172] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1582;
     scrnum := 0;
  END;
 (*   RULE 173/1588  *)
   WITH RuleDescr [173] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrIm;
           path := 18;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntSimpleVariable;
           path := 290;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1588;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 174/1588  *)
   WITH RuleDescr [174] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 274;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntRegOrIm;
           path := 34;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1588;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 175/1601  *)
   WITH RuleDescr [175] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegOrCMemOrIm;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1601;
     scrnum := 0;
  END;
 (*   RULE 176/1610  *)
   WITH RuleDescr [176] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1610;
     scrnum := 0;
  END;
 (*   RULE 177/1618  *)
   WITH RuleDescr [177] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 274;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntreg;
           path := 34;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1618;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 178/1632  *)
   WITH RuleDescr [178] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 274;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntConstant;
           path := 34;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1632;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 179/1645  *)
   WITH RuleDescr [179] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegOrCMemOrIm;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1645;
     scrnum := 0;
  END;
 (*   RULE 180/1645  *)
   WITH RuleDescr [180] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1645;
     scrnum := 0;
  END;
 (*   RULE 181/1651  *)
   WITH RuleDescr [181] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrIm;
           path := 18;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntSimpleVariable;
           path := 290;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1651;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 182/1651  *)
   WITH RuleDescr [182] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 274;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntRegOrIm;
           path := 34;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1651;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 183/1664  *)
   WITH RuleDescr [183] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegOrCMemOrIm;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1664;
     scrnum := 0;
  END;
 (*   RULE 184/1664  *)
   WITH RuleDescr [184] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := TRUE;
     srcline := 1664;
     scrnum := 0;
  END;
 (*   RULE 185/1670  *)
   WITH RuleDescr [185] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrIm;
           path := 18;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntSimpleVariable;
           path := 290;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1670;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 186/1670  *)
   WITH RuleDescr [186] DO
           register := RKMemory;
     pscarity := 3;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSimpleVariable;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntSimpleVariable;
           path := 274;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntRegOrIm;
           path := 34;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1670;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 187/1687  *)
   WITH RuleDescr [187] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1687;
     scrnum := 0;
  END;
 (*   RULE 188/1693  *)
   WITH RuleDescr [188] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntRegOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1693;
     scrnum := 0;
  END;
 (*   RULE 189/1699  *)
   WITH RuleDescr [189] DO
           register := RKRegister;
     pscarity := 3;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntConstant;
           path := 3;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1699;
     scrnum := 0;
  END;
 (*   RULE 190/1705  *)
   WITH RuleDescr [190] DO
           register := RKRegister;
     pscarity := 3;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntreg;
           path := 3;              calc := FALSE;

           regs[0] := { ORD (Regecx)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1705;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 191/1727  *)
   WITH RuleDescr [191] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1727;
     scrnum := 0;
  END;
 (*   RULE 192/1740  *)
   WITH RuleDescr [192] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntCMem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1740;
     scrnum := 0;
  END;
 (*   RULE 193/1752  *)
   WITH RuleDescr [193] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1752;
     scrnum := 0;
  END;
 (*   RULE 194/1766  *)
   WITH RuleDescr [194] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1766;
     scrnum := 0;
  END;
 (*   RULE 195/1770  *)
   WITH RuleDescr [195] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntFloatConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1770;
     scrnum := 0;
  END;
 (*   RULE 196/1777  *)
   WITH RuleDescr [196] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := { ORD (Regeax)-0};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1777;
     scrnum := 0;
  END;
 (*   RULE 197/1796  *)
   WITH RuleDescr [197] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := { ORD (Regeax)-0};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 18;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1796;
     scrnum := 0;
  END;
 (*   RULE 198/1815  *)
   WITH RuleDescr [198] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1815;
     scrnum := 0;
  END;
 (*   RULE 199/1820  *)
   WITH RuleDescr [199] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntSymPlusOffset;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1820;
     scrnum := 0;
  END;
 (*   RULE 200/1826  *)
   WITH RuleDescr [200] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegPlusSymPlusOffset;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1826;
     scrnum := 0;
  END;
 (*   RULE 201/1833  *)
   WITH RuleDescr [201] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntOffsetPlusIndexMultFaktor;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1833;
     scrnum := 0;
  END;
 (*   RULE 202/1840  *)
   WITH RuleDescr [202] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1840;
     scrnum := 0;
  END;
 (*   RULE 203/1851  *)
   WITH RuleDescr [203] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntCMem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1851;
     scrnum := 0;
  END;
 (*   RULE 204/1860  *)
   WITH RuleDescr [204] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegOrCMem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1860;
     scrnum := 0;
  END;
 (*   RULE 205/1873  *)
   WITH RuleDescr [205] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1873;
     scrnum := 0;
  END;
 (*   RULE 206/1879  *)
   WITH RuleDescr [206] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1879;
     scrnum := 0;
  END;
 (*   RULE 207/1884  *)
   WITH RuleDescr [207] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntFloatConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1884;
     scrnum := 0;
  END;
 (*   RULE 208/1889  *)
   WITH RuleDescr [208] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1889;
     scrnum := 0;
  END;
 (*   RULE 209/1893  *)
   WITH RuleDescr [209] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1893;
     scrnum := 0;
  END;
 (*   RULE 210/1909  *)
   WITH RuleDescr [210] DO
           register := RKAdrmode;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegOrIm;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1909;
     scrnum := 0;
  END;
 (*   RULE 211/1933  *)
   WITH RuleDescr [211] DO
           register := RKRegister;
     pscarity := 3;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntConstant;
           path := 3;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1933;
     scrnum := 0;
  END;
 (*   RULE 212/1938  *)
   WITH RuleDescr [212] DO
           register := RKRegister;
     pscarity := 3;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntConstant;
           path := 3;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1938;
     scrnum := 0;
  END;
 (*   RULE 213/1966  *)
   WITH RuleDescr [213] DO
           register := RKRegister;
     pscarity := 3;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntRegOrCMemOrIm;
           path := 3;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1966;
     scrnum := 0;
  END;
 (*   RULE 214/1979  *)
   WITH RuleDescr [214] DO
           register := RKRegister;
     pscarity := 3;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntRegOrCMemOrIm;
           path := 3;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 1979;
     scrnum := 0;
  END;
 (*   RULE 215/2002  *)
   WITH RuleDescr [215] DO
           register := RKRegister;
     pscarity := 3;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := { ORD (Regeax)-0};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
        WITH op[2] DO 
           nt   := ntCMem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[3] DO 
           nt   := ntCMem;
           path := 3;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2002;
     scrnum := 0;
  END;
 (*   RULE 216/2031  *)
   WITH RuleDescr [216] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2031;
     scrnum := 0;
  END;
 (*   RULE 217/2039  *)
   WITH RuleDescr [217] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntCMem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2039;
     scrnum := 0;
  END;
 (*   RULE 218/2047  *)
   WITH RuleDescr [218] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2047;
     scrnum := 0;
  END;
 (*   RULE 219/2055  *)
   WITH RuleDescr [219] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0};
     changeregs[0]  := { ORD (Regeax)-0};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
        WITH op[2] DO 
           nt   := ntCMem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2055;
     scrnum := 0;
  END;
 (*   RULE 220/2067  *)
   WITH RuleDescr [220] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0};
     changeregs[0]  := { ORD (Regeax)-0};
        WITH op[1] DO 
           nt   := ntCMem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2067;
     scrnum := 0;
  END;
 (*   RULE 221/2079  *)
   WITH RuleDescr [221] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0};
     changeregs[0]  := { ORD (Regeax)-0};
        WITH op[1] DO 
           nt   := ntfstack;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst1)-0};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2079;
     scrnum := 0;
  END;
 (*   RULE 222/2097  *)
   WITH RuleDescr [222] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2097;
     scrnum := 0;
  END;
 (*   RULE 223/2106  *)
   WITH RuleDescr [223] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2106;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 224/2138  *)
   WITH RuleDescr [224] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegOrIm;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2138;
     scrnum := 0;
  END;
 (*   RULE 225/2150  *)
   WITH RuleDescr [225] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2150;
     scrnum := 0;
  END;
 (*   RULE 226/2163  *)
   WITH RuleDescr [226] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2163;
     scrnum := 0;
  END;
 (*   RULE 227/2170  *)
   WITH RuleDescr [227] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2170;
     scrnum := 0;
  END;
 (*   RULE 228/2177  *)
   WITH RuleDescr [228] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2177;
     scrnum := 0;
  END;
 (*   RULE 229/2198  *)
   WITH RuleDescr [229] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2198;
     scrnum := 0;
  END;
 (*   RULE 230/2207  *)
   WITH RuleDescr [230] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntCMem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2207;
     scrnum := 0;
  END;
 (*   RULE 231/2216  *)
   WITH RuleDescr [231] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2216;
     scrnum := 0;
  END;
 (*   RULE 232/2224  *)
   WITH RuleDescr [232] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntCMem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2224;
     scrnum := 0;
  END;
 (*   RULE 233/2232  *)
   WITH RuleDescr [233] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2232;
     scrnum := 0;
  END;
 (*   RULE 234/2240  *)
   WITH RuleDescr [234] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := { ORD (Regeax)-0};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
        WITH op[2] DO 
           nt   := ntCMem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2240;
     scrnum := 0;
  END;
 (*   RULE 235/2252  *)
   WITH RuleDescr [235] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := { ORD (Regeax)-0};
        WITH op[1] DO 
           nt   := ntCMem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2252;
     scrnum := 0;
  END;
 (*   RULE 236/2264  *)
   WITH RuleDescr [236] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := { ORD (Regeax)-0};
        WITH op[1] DO 
           nt   := ntfstack;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst1)-0};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2264;
     scrnum := 0;
  END;
 (*   RULE 237/2282  *)
   WITH RuleDescr [237] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2282;
     scrnum := 0;
  END;
 (*   RULE 238/2291  *)
   WITH RuleDescr [238] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2291;
     scrnum := 1;
     scrrs [1] [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
  END;
 (*   RULE 239/2323  *)
   WITH RuleDescr [239] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntRegOrIm;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2323;
     scrnum := 0;
  END;
 (*   RULE 240/2335  *)
   WITH RuleDescr [240] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2335;
     scrnum := 0;
  END;
 (*   RULE 241/2408  *)
   WITH RuleDescr [241] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2408;
     scrnum := 0;
  END;
 (*   RULE 242/2410  *)
   WITH RuleDescr [242] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntarglist;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntRegOrCMemOrIm;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2410;
     scrnum := 0;
  END;
 (*   RULE 243/2428  *)
   WITH RuleDescr [243] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntarglist;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntConstant;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2428;
     scrnum := 0;
  END;
 (*   RULE 244/2434  *)
   WITH RuleDescr [244] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntarglist;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntCMem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2434;
     scrnum := 0;
  END;
 (*   RULE 245/2444  *)
   WITH RuleDescr [245] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntarglist;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2444;
     scrnum := 0;
  END;
 (*   RULE 246/2453  *)
   WITH RuleDescr [246] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntarglist;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntmem;
           path := 2;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2453;
     scrnum := 0;
  END;
 (*   RULE 247/2463  *)
   WITH RuleDescr [247] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := { ORD (Regecx)-0,  ORD (Regedi)-0};
        WITH op[1] DO 
           nt   := ntarglist;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regesi)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2463;
     scrnum := 0;
  END;
 (*   RULE 248/2475  *)
   WITH RuleDescr [248] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
        WITH op[1] DO 
           nt   := ntarglist;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2475;
     scrnum := 0;
  END;
 (*   RULE 249/2487  *)
   WITH RuleDescr [249] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
        WITH op[1] DO 
           nt   := ntarglist;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2487;
     scrnum := 0;
  END;
 (*   RULE 250/2499  *)
   WITH RuleDescr [250] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regeax)-0};
     changeregs[0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
        WITH op[1] DO 
           nt   := ntarglist;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2499;
     scrnum := 0;
  END;
 (*   RULE 251/2514  *)
   WITH RuleDescr [251] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regeax)-0};
     changeregs[0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
        WITH op[1] DO 
           nt   := ntarglist;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2514;
     scrnum := 0;
  END;
 (*   RULE 252/2529  *)
   WITH RuleDescr [252] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
        WITH op[1] DO 
           nt   := ntarglist;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntreg;
           path := 2;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2529;
     scrnum := 0;
  END;
 (*   RULE 253/2544  *)
   WITH RuleDescr [253] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
        WITH op[1] DO 
           nt   := ntarglist;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2544;
     scrnum := 0;
  END;
 (*   RULE 254/2559  *)
   WITH RuleDescr [254] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
        WITH op[1] DO 
           nt   := ntarglist;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2559;
     scrnum := 0;
  END;
 (*   RULE 255/2584  *)
   WITH RuleDescr [255] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 33;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2584;
     scrnum := 0;
  END;
 (*   RULE 256/2595  *)
   WITH RuleDescr [256] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 33;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2595;
     scrnum := 0;
  END;
 (*   RULE 257/2633  *)
   WITH RuleDescr [257] DO
           register := RKRegister;
     pscarity := 2;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntloadln2;
           path := 17;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 33;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 2;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2633;
     scrnum := 0;
  END;
 (*   RULE 258/2660  *)
   WITH RuleDescr [258] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2660;
     scrnum := 0;
  END;
 (*   RULE 259/2667  *)
   WITH RuleDescr [259] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 33;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2667;
     scrnum := 0;
  END;
 (*   RULE 260/2678  *)
   WITH RuleDescr [260] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 33;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2678;
     scrnum := 0;
  END;
 (*   RULE 261/2689  *)
   WITH RuleDescr [261] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 33;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 1;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2689;
     scrnum := 0;
  END;
 (*   RULE 262/2705  *)
   WITH RuleDescr [262] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntCMem;
           path := 33;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2705;
     scrnum := 0;
  END;
 (*   RULE 263/2720  *)
   WITH RuleDescr [263] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regst)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 33;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2720;
     scrnum := 0;
  END;
 (*   RULE 264/2737  *)
   WITH RuleDescr [264] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 33;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2737;
     scrnum := 0;
  END;
 (*   RULE 265/2747  *)
   WITH RuleDescr [265] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntConstant;
           path := 33;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2747;
     scrnum := 0;
  END;
 (*   RULE 266/2755  *)
   WITH RuleDescr [266] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 33;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2755;
     scrnum := 0;
  END;
 (*   RULE 267/2771  *)
   WITH RuleDescr [267] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntFloatConstant;
           path := 33;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2771;
     scrnum := 0;
  END;
 (*   RULE 268/2783  *)
   WITH RuleDescr [268] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 530;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2783;
     scrnum := 0;
  END;
 (*   RULE 269/2799  *)
   WITH RuleDescr [269] DO
           register := RKRegister;
     pscarity := 1;
     resregs   [0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 33;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2799;
     scrnum := 0;
  END;
 (*   RULE 270/2813  *)
   WITH RuleDescr [270] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntFloatConstant;
           path := 33;              calc := FALSE;

           regs[0] := {};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2813;
     scrnum := 0;
  END;
 (*   RULE 271/2823  *)
   WITH RuleDescr [271] DO
           register := RKMemory;
     pscarity := 2;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntmem;
           path := 1;              calc := FALSE;

           regs[0] := {};
        END;
        WITH op[2] DO 
           nt   := ntfreg;
           path := 530;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2823;
     scrnum := 0;
  END;
 (*   RULE 272/2840  *)
   WITH RuleDescr [272] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2840;
     scrnum := 0;
  END;
 (*   RULE 273/2944  *)
   WITH RuleDescr [273] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := { ORD (Regecx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2944;
     scrnum := 0;
  END;
 (*   RULE 274/2992  *)
   WITH RuleDescr [274] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := { ORD (Regeax)-0,  ORD (Regebx)-0,  ORD (Regecx)-0,  ORD (Regedx)-0,  ORD (Regesi)-0,  ORD (Regedi)-0,  ORD (Regebp)-0,  ORD (Regesp)-0};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 2992;
     scrnum := 0;
  END;
 (*   RULE 275/3025  *)
   WITH RuleDescr [275] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regeax)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 3025;
     scrnum := 0;
  END;
 (*   RULE 276/3028  *)
   WITH RuleDescr [276] DO
           register := RKMemory;
     pscarity := 1;
     resregs   [0]  := {};
     changeregs[0]  := {};
        WITH op[1] DO 
           nt   := ntfreg;
           path := 1;              calc := FALSE;

           regs[0] := { ORD (Regst)-0};
        END;
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 3028;
     scrnum := 0;
  END;
 (*   RULE 277/3034  *)
   WITH RuleDescr [277] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 3034;
     scrnum := 0;
  END;
 (*   RULE 278/3044  *)
   WITH RuleDescr [278] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 3044;
     scrnum := 0;
  END;
 (*   RULE 279/3070  *)
   WITH RuleDescr [279] DO
           register := RKMemory;
     pscarity := 0;
     resregs   [0]  := {};
     changeregs[0]  := {};
     target   := 0;
     closuretarget := FALSE;
     result   := 0;
     unique := FALSE;
     commutative := FALSE;
     srcline := 3070;
     scrnum := 0;
  END;
(******* empty insertion IpGcgTabInit *******)
 END GcgTab.
