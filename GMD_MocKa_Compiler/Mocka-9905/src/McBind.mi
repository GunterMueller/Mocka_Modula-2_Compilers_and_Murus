(******************************************************************************)
(* Copyright (c) 1988 by GMD Karlruhe, Germany				      *)
(* Gesellschaft fuer Mathematik und Datenverarbeitung			      *)
(* (German National Research Center for Computer Science)		      *)
(* Forschungsstelle fuer Programmstrukturen an Universitaet Karlsruhe	      *)
(* All rights reserved.							      *)
(******************************************************************************)
%( Modula_P
(* changed:
 * 91/10/09, jv, new built-in standard module TRANSPUTER
 * 90/07    hoffart MODULA-P process modules
 *)
%)

IMPLEMENTATION MODULE McBind;

   FROM SYSTEM IMPORT TSIZE, BYTE;

   IMPORT Strings;

   IMPORT Storage;  (* ms 6/90 *)

   FROM SuAlloc IMPORT
      InitAlloc, ALLOCATE;
   FROM SuBase IMPORT
      NameOfSourceFile, LibraryDirectory,
      FileName, FileKind, BindScript,
      BuildLibraryFileName, OpenLibraryFile,
      ThisCompUnitClass, CompUnitClass, InitSuBase,
      TimeStampType, TimeStampNull, SystemCommand,
%( cbe
      CCScript,
%)
%( Debug
      DebugOption,
%)
%( Transputer (* jh 7/90 *)
      TpRunCmdScript,
%)
      DefineOption, Enabled;
   FROM CgTypeMap IMPORT
      ReservedProcFrameSize, ReservedParamFrameSize,
      CompUnitProcNumber;
   FROM SuValues IMPORT
      InitCalc;
   FROM DfTable IMPORT
      ObjectClass, Object;
   FROM DfScopes IMPORT
      RootObject, CompUnitObject, InitScopes;

   FROM ByteIO IMPORT
        File, Done,
        Erase,
        OpenOutput, PutByte,
        OpenInput, Close, GetByte;
   FROM InOut IMPORT
        WriteCard, Write, WriteString, WriteLn;
   FROM SuTokens IMPORT
        InitTokens, Ident, CreateIdent, CreateIdentFromBuffer, GetIdentRepr;
%( OPMOBIL
   FROM OpMobil IMPORT
%)
%( CGMOBIL
   FROM CgMobil IMPORT
%)
%( NOMOBIL
   FROM NoMobil IMPORT
%)
        Mode, DataOperand, ModuleIndex, ProcIndex, UndefProcIndex,
        DeclareModule, DeclareProcedure, BeginModule, EndModule,
        BeginProcedure, EndProcedure, PreCall, ProcedureConstant,
        Call, PostCall, Return;
%( I386
   FROM CgBase IMPORT
	ElfOption;
%)
   FROM SuErrors IMPORT
      CompilerError, UndefSourcePos, ErrorMsgWithId, OK; (*!!!*)
%( Modula_P
(* ++ rh ++ *)  (* 90/06 *)
   IMPORT CgConstants;
   FROM CgConstants IMPORT
        PrefixOfInitModule, SuffixOfInitModule, ModuleName, QualProcedureName;
   FROM CgProcessInfo IMPORT
        InitGenerateProcessInfo, AnnounceProcessModule, MakeProcessInfo;
(* -- rh -- *)
%)

   FROM FileName IMPORT
	ObjectSuffix, MapSuffix
%( IDS
	, LowerFileName, LimitFileName, DeleteFileNameExtension
%)
	;

   (*-------------------------------------------------------------------------*)

   TYPE

      Instruction =
	 (  dMODULE
	       (* Name       : String   *)
	       (* IsForeign  : BOOLEAN  *)
%( Modula_P
               (* IsProcessModule : BOOLEAN *)  (* ++ rh ++  90/06 *)
%)
	       (* StampLow   : SHORTCARD *)
	       (* StampHigh  : SHORTCARD *)
	 ,  dEOF );

      Path = ARRAY [0..100] OF CHAR;

      ModuleList = POINTER TO ModuleListElem;

      ImportList = POINTER TO ImportListElem;

      ModuleListElem =
	 RECORD
	    ident : Ident;
	    path: Path;
	    IsForeignModule : BOOLEAN;
%( Modula_P
(* ++ rh ++ *)  (* 90/06 *)
            IsProcessModule : BOOLEAN;
            (* if this is true then no call to the init procedure must *)
            (* be generated , if this module is imported.              *)
            (* The init procedure has to be executed every time the    *)
            (* process module is called.                               *) 

            VisitNumber     : CARDINAL;
            (* to detect if a 'ModuleListElem' is visited in a list search *)
            (* for the list is visited for every process module            *)
(* -- rh -- *)
%)
	    stamp : TimeStampType;
	    imports : ImportList;
	    visited : BOOLEAN;
	    inconsistent : BOOLEAN;
	    next  : ModuleList;
	 END;

      ImportListElem =
	 RECORD
	    module : ModuleList;
	    next : ImportList;
	 END;

%( Transputer
   CONST
      MAGIC                = 5712;
      VERSION              = 3;
%)
%( ~ Transputer
   CONST
      MAGIC                = 4712;
      VERSION              = 9101; (* Files are compatible to 9101 *)
%)
      (* MaxCommandLength     = 10*1000;  ms 6/90 *)
      AbsMaxCommandLength  = 65000;
      IncCommandLength     = 256;  (* ms 7/90 *)
      NumberOfInitProc     = CompUnitProcNumber;
      NameOfInitProc       = "_INIT";
%( ~ Modula_P 
(* ++ rh ++ *)  (* 90/07 *)
      NameOfRootModule     = "_M2ROOT";
   VAR
      NameOfRootMapFile    : FileName;
      NameOfRootObjectFile : FileName;
%)
%( Modula_P
      NameOfRootModule     = CgConstants.NameOfRootModule;
   VAR
      NameOfRootMapFile    : ModuleName; 
      NameOfRootObjectFile : ModuleName; 
   CONST
(* -- rh -- *)
%)

   VAR

      WorkList : ModuleList;
      WorkListLast : ModuleList;
      IdentSYSTEM : Ident;
%( Modula_P
      IdentTRANSPUTER : Ident;
%)
      DepFile : File;
      ModuleCount: SHORTCARD;
      (* command : ARRAY [1..MaxCommandLength] OF CHAR;  ms 6/90 *)
      command,save : POINTER TO ARRAY [0..AbsMaxCommandLength] OF CHAR;
				  (* ms 11/90 : 1 -> 0 *)
      MaxCommandLength : CARDINAL; (* ms 6/90 *)
      WasError : BOOLEAN;
      StaticOption : CARDINAL;

%( Modula_P
(* ++ rh ++ *) (* 90/07 *)
CONST
      IsProcess          = TRUE;
      IsProgram          = TRUE;
      IsExtern           = TRUE;
      IsForeign          = TRUE;
      IsInitMod          = TRUE;
      IsNoProcess        = NOT IsProcess;
      IsNoProgram        = NOT IsProgram;
      IsNoExtern         = NOT IsExtern;
      IsNoForeign        = NOT IsForeign;
      IsNoInitMod        = NOT IsInitMod;
VAR
 ProgramModuleName : ModuleName;
(* -- rh -- *)
%)

   (*-------------------------------------------------------------------------*)

   PROCEDURE Bind (VAR ProgramName : ARRAY OF CHAR);
      VAR
	 ident       : Ident;
	 root, cur   : ModuleList;
	 string      : ARRAY [0..80] OF CHAR;
	 ok          : BOOLEAN;
	 ArgLength   : SHORTCARD;
	 importlist  : ImportList;
	 progname    : ARRAY [1..20] OF CHAR;
	 moduleindex : ModuleIndex;
	 procindex   : ProcIndex;

%( Modula_P
(* ++ rh ++ *)  (* 90/06 *)
      VAR
         ProcImps                     : ImportList; 
         ProcCount                    : CARDINAL;   (* 90/12 *)
         procindex1                   : ProcIndex;
         modindex1                    : ModuleIndex;
         RootObjInitName, RootObjName : ModuleName;
	 ProcOperand                  : DataOperand;

    PROCEDURE GenerateProcessInits (mod : ImportList);
    (* generate object files for all process modules containing *)
    (* calls to the init procedures of the imported modules,    *)
    (* excluding process modules, which must be called every    *)
    (* time a process module is called.                         *)
    (* 'mod' is a list of pointers to process modules           *) 
      VAR
       	 ProModName       : ModuleName;
         NameOfInitModule : ModuleName;
         moduleindex      : ModuleIndex;
         procindex        : ProcIndex;         
         ActVisitNumber   : CARDINAL;
         ProStarterObjName: QualProcedureName;   (* ++ 90/12  rh ++ *)
         ProEntryName     : QualProcedureName;  
  
      PROCEDURE GenerateInitForProcess (mod : ModuleList);
      (* creates an object file containing all the needed     *)
      (* calls to the init procedures of all imported modules,*)
      (* excluding process modules                            *)
      (* Globals : 'ActVisitNumber'                           *)
        VAR
	  cur : ImportList; 
       	  ModName: ARRAY [0..80] OF CHAR;
       	  tmp: ARRAY [0..80] OF CHAR;
	  moduleindex : ModuleIndex;
	  procindex : ProcIndex;
	  ProcOperand : DataOperand;
       BEGIN
         IF mod^.VisitNumber >= ActVisitNumber THEN RETURN; END;
         mod^.VisitNumber := ActVisitNumber;
         cur := mod^.imports;
         WHILE cur # NIL DO
           IF NOT cur^.module^.IsProcessModule THEN
             GenerateInitForProcess (cur^.module);
           END;
           cur := cur^.next;
         END;

         IF NOT mod^.IsForeignModule AND NOT mod^.IsProcessModule THEN
   	   (* call init procedure of 'mod',but not those of processes *)
	   GetIdentRepr(mod^.ident, ModName);
	   DeclareModule (IsExtern, IsNoProcess, IsNoProgram, IsNoInitMod,
                          IsNoForeign, ModName, moduleindex);
	   DeclareProcedure
	      (IsExtern, FALSE, None,
               ModName, NumberOfInitProc, 
               moduleindex, 0, UndefProcIndex, procindex);
	   PreCall (0);
	   ProcedureConstant (procindex, ProcOperand);
	   Call (ProcOperand);
	   PostCall (0);
         END;
       END GenerateInitForProcess;

      BEGIN  (* GenerateProcessInits *)
        InitGenerateProcessInfo;    (* ++ 90/12  rh ++ *)
        ActVisitNumber := 1;
        WHILE mod # NIL DO
          GetIdentRepr (mod^.module^.ident, ProModName);

          (* ++ 90/12  rh ++ *)
          Strings.Concat ("_", ProModName, ProEntryName);
          AnnounceProcessModule (ProEntryName);
          (* -- rh -- *)

          NameOfSourceFile := "NOFILE";
          Strings.Assign (NameOfInitModule, PrefixOfInitModule);
          Strings.Append (NameOfInitModule, ProModName); 
          Strings.Append (NameOfInitModule, SuffixOfInitModule);
          BeginModule (NameOfInitModule, IsNoProcess, IsNoProgram, 
                       IsInitMod, IsNoForeign, 0);

          DeclareModule (IsNoExtern, IsNoProcess, IsNoProgram, IsInitMod,
                         IsNoForeign, NameOfInitModule, moduleindex);
          DeclareProcedure (IsNoExtern, FALSE, None,
                            NameOfInitProc,
                            NumberOfInitProc, moduleindex, 0, 
                            UndefProcIndex, procindex);

          BeginProcedure (procindex, 0, ReservedProcFrameSize,
                          ReservedParamFrameSize);

          GenerateInitForProcess (mod^.module);

          Return (0);
          EndProcedure ;
          EndModule;
          AppendCommand (" "); 
	  AppendCommand(LibraryDirectory);
	  IF LibraryDirectory[0]#0C THEN
	     AppendCommand ("/");
	  END;
%( IDS
          Strings.Assign(tmp, NameOfInitModule);
	  DeleteFileNameExtension(tmp);
          LimitFileName(tmp);
          LowerFileName(tmp);
          AppendCommand (tmp); AppendCommand (ObjectSuffix);
%)
%( ~ IDS
          AppendCommand (NameOfInitModule); AppendCommand (ObjectSuffix);
%)
          mod := mod^.next; 
          INC (ActVisitNumber);
        END;

        (* ++ 90/12  rh ++ *)
        MakeProcessInfo (ProStarterObjName, OK);
        IF NOT OK THEN
          WasError := TRUE;
          WriteString ("McBind: error while generating process information files");      
          WriteLn;
        ELSE
          (* append the process starter object file *)
          (* to the command for the linker          *)
          AppendCommand (" ");
          AppendCommand (ProStarterObjName);
        END;
        (* -- rh -- *)
      END GenerateProcessInits;
   
     PROCEDURE EnterProcess (VAR imp : ImportList; mod : ModuleList);
     (* put 'mod' into list 'imp' if it's a process module *)
     (* and not already in the list                        *)
       VAR
          primp : ImportList;
          n1, n2 : ARRAY [0..80] OF CHAR;
      BEGIN
        IF NOT mod^.IsProcessModule THEN RETURN END;

        (* search if 'mod' is existing in 'imp' *)
        primp := imp;
        WHILE primp # NIL DO
          GetIdentRepr (primp^.module^.ident, n1);
          GetIdentRepr (mod^.ident, n2);
          IF Strings.StrEq (n1, n2) THEN RETURN END;
          primp := primp^.next;
        END;        
    
        (* no it's not already in 'imp', hence insert it at the beginning *)
        NEW (primp);
        primp^.module := mod;
        primp^.next := imp;
        imp := primp;
        INC (ProcCount);

      END EnterProcess;
%)

   BEGIN
      InitAlloc; InitSuBase; InitCalc; InitTokens; InitScopes;
      WasError := FALSE;

      (* entry for root *)
      ArgLength := 0;
      WHILE ProgramName[ArgLength] <> 0C DO INC(ArgLength); END;
      CreateIdentFromBuffer(ident, ProgramName, ArgLength);
      NEW (root);
      root^.ident := ident;
      root^.stamp := TimeStampNull;
      root^.IsForeignModule := FALSE;
      root^.imports := NIL;
      root^.inconsistent := FALSE;
      root^.visited := FALSE;
      root^.next := NIL;
%( Modula_P
(* ++ rh ++ *) (* 90/06 *)
      root^.IsProcessModule := FALSE;
      ProcImps := NIL;
      ProcCount := 0;
      root^.VisitNumber := 0;
      Strings.Assign (NameOfRootMapFile, NameOfRootModule);
      Strings.Append (NameOfRootMapFile, MapSuffix);
      Strings.Assign (NameOfRootObjectFile, NameOfRootModule);
      Strings.Append (NameOfRootObjectFile, ObjectSuffix); 
(* -- rh -- *)
%)

      WorkList := root;
      WorkListLast := root;
      cur := WorkList;
      WHILE cur <> NIL DO
	 ReadDepFileOfModule (cur);
%( Modula_P
(* ++ rh ++ *) (* 90/06 *)
         (*****************************************************)
         (* collect all imported modules of a process module  *)
         (* NOTICE : the program to bind is 'root^.ident',    *)
         (*          in the dependency file of this module    *)
         (*          itself appears if it's no program        *)
         (*          module; then if it's read it will be     *)
         (*          inserted one more time in 'WorkList',    *)
         (*          i.e. it appears twice in 'WorkList';     *)
         (*          this should not be change for only by    *)
         (*          this it's possible to detect if the      *)
         (*          actual binded module is a process module *)
         (*          and therefore a process initialisation   *)
         (*          procedure can be generated.              *)
         (*          If this will be changed, a parameter for *)
         (*          the procedure 'Bind' is necessary for    *)
         (*          knowing that the actual binded module    *)
         (*          is a process module !!!                  *) 
         (*****************************************************)
         EnterProcess (ProcImps, cur);
(* -- rh -- *)
%)
	 cur := cur^.next;
      END;
      IF WasError THEN RETURN END;
      ModuleCount := 0;

      (* +++ ms 6/90 +++ *)
      MaxCommandLength :=   Strings.Length(BindScript)
%( cbe
			  + Strings.Length(CCScript)
%)
			  + 2 * Strings.Length(LibraryDirectory) + 20 + 256;
      (* 20 fuer sonstige Zeichen, 256 a priori fuer Modul-Liste *)
      Storage.ALLOCATE (command,MaxCommandLength);
      IF command = NIL THEN
         ErrorTextStorage;                              
         HALT;
      END;

      Strings.EmptyString (command^);
      (* --- ms 6/90 --- *)

      AssignCommand (BindScript);

%( cbe
      AppendCommand (" ");
      AppendCommand (CCScript);
%)

(* ++ hh 3/95 ++ *)
%( I386
      IF Enabled (ElfOption) THEN
	 AppendCommand (" -elf");
      END;
%)
      IF Enabled (StaticOption) THEN
	 AppendCommand (" -static");
      END;
(* -- hh 3/95 -- *)
%( Debug
      IF Enabled (DebugOption) THEN (* hh 10/92 *)
	 AppendCommand (" -g"); (* hh 10/92 *)
      END;   (* hh 10/92 *)
%)
(* ++ he ++ *) (* 2/90 *)
      AppendCommand(" ");
      AppendCommand(LibraryDirectory);
      IF LibraryDirectory[0]#0C THEN
         AppendCommand ("/");
      END;
      GetIdentRepr (root^.ident, progname);
%( IDS
      DeleteFileNameExtension(progname);
      LimitFileName(progname);
      LowerFileName(progname);
%)
      AppendCommand (progname);
      AppendCommand (" ");
%( Transputer  (* jh 7/90 *)
      AppendCommand (TpRunCmdScript);
      AppendCommand (" ");
%)
      AppendCommand(LibraryDirectory);
      IF LibraryDirectory[0]#0C THEN
	 AppendCommand ("/");
      END; (* he 2/90 *)
      AppendCommand (NameOfRootObjectFile);
      AppendCommand (" ");
(* -- he -- *) (* 2/90 *)

      IF WasError THEN RETURN END;
      OK := TRUE; (* assumed in FinishAOutFile !!!*)
      NameOfSourceFile := "NOFILE";
%( ~ Modula_P
(* ++ rh ++ *)
      BeginModule (NameOfRootModule,0);
      DeclareModule (FALSE, NameOfRootModule, moduleindex);
      DeclareProcedure
	(FALSE, FALSE, None,
         NameOfInitProc, NumberOfInitProc,
         moduleindex, 0, UndefProcIndex, procindex);
      BeginProcedure
	(procindex, 0, ReservedProcFrameSize, ReservedParamFrameSize);
      visit (root);
      Return (0);
      EndProcedure;
      EndModule;

%)
%( Modula_P
(* ++ rh ++ *)  (* 90/06 *)
      Strings.Assign (RootObjInitName, PrefixOfInitModule);
      Strings.Append (RootObjInitName, ProgramName);
      Strings.Append (RootObjInitName, SuffixOfInitModule);
      AppendCommand (" ");  
      AppendCommand(LibraryDirectory);
      IF LibraryDirectory[0]#0C THEN
         AppendCommand ("/");
      END;
      AppendCommand (RootObjInitName);
      AppendCommand (ObjectSuffix);
      BeginModule (RootObjInitName, IsNoProcess, IsNoProgram,
                   IsInitMod, IsNoForeign, 0);
      DeclareModule (IsNoExtern, IsNoProcess, IsNoProgram, IsInitMod, 
                     IsNoForeign, RootObjInitName, moduleindex);
      DeclareProcedure
	(IsNoExtern, FALSE, None,
         NameOfInitProc, NumberOfInitProc,
         moduleindex, 0, UndefProcIndex, procindex);
      BeginProcedure
	(procindex, 0, ReservedProcFrameSize, ReservedParamFrameSize);
      Strings.Assign (ProgramModuleName, ProgramName);
      visit (root);
      Return (0);
      EndProcedure;
      EndModule;

      (* generate all init procedures for all used process modules *)
      GenerateProcessInits (ProcImps);
           
      IF WasError THEN RETURN END;

      (* generate the module called by the run-time-system *)
      InitAlloc; InitSuBase; InitCalc; InitTokens; InitScopes;
      BeginModule (NameOfRootModule, IsNoProcess, IsNoProgram,
                   IsNoInitMod, IsNoForeign, 0);
      DeclareModule (IsNoExtern, IsNoProcess, IsNoProgram, IsNoInitMod,
                     IsNoForeign, NameOfRootModule, moduleindex);
      DeclareProcedure (IsNoExtern, FALSE, None,
                      NameOfInitProc,
                      NumberOfInitProc, moduleindex, 0,
                      UndefProcIndex, procindex);
      BeginProcedure (procindex, 0, ReservedProcFrameSize, 
                      ReservedParamFrameSize);

      DeclareModule (IsExtern, IsNoProcess, IsNoProgram, IsNoInitMod,
                     IsNoForeign, ProgramName, moduleindex);
      DeclareProcedure (IsExtern, FALSE, None,
                        NameOfInitProc,
                        NumberOfInitProc, moduleindex, 0, 
                        UndefProcIndex, procindex);
      PreCall (0);
      ProcedureConstant (procindex, ProcOperand);
      Call (ProcOperand);
      PostCall (0);

      EndProcedure;
      EndModule;
%)
      IF WasError THEN RETURN END;
      SystemCommand (command^, ok);
      IF NOT ok THEN
	 WriteString ("Linking terminated with error."); WriteLn;
      END;
      Erase (NameOfRootObjectFile, ok);
      Erase (NameOfRootMapFile, ok);
   END Bind;

   PROCEDURE ReadDepFileOfModule (mod: ModuleList);
      CONST
         MaxNameLength = 12;
      VAR
         modname : ARRAY [0..80] OF CHAR;
         magic, version : SHORTCARD;
         i : SHORTCARD;
         stamp : TimeStampType;
         isforeign : BOOLEAN;
         instruction: Instruction;
         ident : Ident;
         moduleref : ModuleList;
         newone : ImportList;
         ok: BOOLEAN;
%( Modula_P
(* ++ rh ++ *)
         isprocess     : BOOLEAN;
%)
   BEGIN
      GetIdentRepr(mod^.ident, modname);
      OpenLibraryFile (modname, KindDepFile, DepFile, mod^.path, ok);
      IF NOT ok THEN
	 WriteString ("Cannot find reference file for module '");
	 WriteString (modname);
	 Write("'");
	 WriteLn;
	 WasError := TRUE;
	 RETURN
      END;

      (*----- Read Heading -----*)
      InputShortCard (magic);
      IF magic <> MAGIC THEN
	 WriteString ("Invalid heading of reference file for '");
	 WriteString (modname); Write("'"); WriteLn;
	 WasError := TRUE;
	 RETURN;
      END;
      InputShortCard (version);
      IF version <> VERSION THEN
	 WriteString ("Reference file for '");
	 WriteString (modname);
	 WriteString("' written by incompatible compiler version");
	 WriteLn;
	 WasError := TRUE;
	 RETURN;
      END;

      (*----- Read Names of Imported Modules -----*)
      mod^.imports := NIL;
      LOOP
	 InputInstr (instruction);
	 CASE instruction OF
	   dMODULE :
	      ReadIdent(ident);
	      InputBool (isforeign);
%( Modula_P
(* ++ rh ++ *)  (* 90/06 *)
              InputBool (isprocess);
%)
	      InputInt  (stamp);
%( ~ Modula_P
(* ++ rh ++ *)  (* 90/06 *)
	      EnterModule (ident, isforeign, stamp, moduleref);
%)
%( Modula_P
              EnterModule (ident, isforeign, isprocess, stamp, moduleref);
(* -- rh -- *)
%)
	      (* insert into import list *)
	      NEW(newone);
	      newone^.module := moduleref;
	      newone^.next := mod^.imports;
	      mod^.imports := newone;
	 | dEOF :
	      EXIT;
	 ELSE
	      WriteString ("Invalid format of reference file for '");
	      WriteString (modname); Write("'"); WriteLn;
	      WasError := TRUE;
	      EXIT;
	 END;
      END;
      Close (DepFile);
   END ReadDepFileOfModule;

   (*------------------------------------------------------------------*)
%( ~ Modula_P
(* ++ rh ++ *)  (* 90/06 *)
   PROCEDURE EnterModule
      (    ident : Ident; isforeign: BOOLEAN; stamp : TimeStampType;
       VAR moduleref : ModuleList);
%)
%( Modula_P
   PROCEDURE EnterModule
      (ident : Ident; isforeign: BOOLEAN; isprocess : BOOLEAN; 
       stamp : TimeStampType; VAR moduleref : ModuleList);
(* -- rh -- *)
%)
      VAR cur, newone: ModuleList;
   BEGIN
      (* insert into work list *)
      cur := WorkList;
      LOOP
	 IF cur = NIL THEN
	    (* not yet in list, append *)
	    NEW(newone);
	    newone^.ident := ident;
	    newone^.IsForeignModule := isforeign;
%( Modula_P
(* ++ rh ++ *)  (* 90/06 *)
            newone^.IsProcessModule := isprocess;
            newone^.VisitNumber := 0;
%)
	    newone^.stamp := stamp;
	    newone^.imports := NIL;
	    newone^.inconsistent := FALSE;
	    newone^.visited := FALSE;
	    newone^.next := NIL;
	    WorkListLast^.next := newone;
	    WorkListLast := newone;
	    moduleref := newone;
	    EXIT
	 END;
	 IF cur^.ident = ident THEN
	    IF (cur^.stamp <>stamp) THEN
	       WasError := TRUE;
	       IF NOT cur^.inconsistent THEN
		  WriteString ("module '");
		  PrintIdent(ident);
		  WriteString ("' imported in different versions");
		  WriteLn;
	       END;
	       cur^.inconsistent := TRUE;
	    END;
	    moduleref := cur;
	    EXIT
	 END;
	 cur := cur^.next;
      END;
   END EnterModule;

   PROCEDURE visit (module : ModuleList);
      VAR
	 cur : ImportList; i : SHORTCARD; string: ARRAY [1..50] OF CHAR;
	 ModName: ARRAY [0..80] OF CHAR;
	 moduleindex : ModuleIndex;
	 procindex : ProcIndex;
	 ProcOperand : DataOperand;
   BEGIN
      IF module^.visited THEN RETURN END;
      module^.visited := TRUE;

      cur := module^.imports;
      WHILE cur <> NIL DO;
	 visit (cur^.module);
	 cur := cur^.next;
      END;
      INC(ModuleCount);
%( Modula_P
(* ++ rh ++ *)  (* 90/06 *)
(* no init procedure must be called for imported process modules *)
      IF NOT module^.IsForeignModule  AND NOT module^.IsProcessModule THEN
	GetIdentRepr(module^.ident, ModName);
        IF NOT (Strings.StrEq (ProgramModuleName, ModName)) THEN
	 (* call init procedure of 'module',but those of the program module *)
	 DeclareModule (IsExtern, IsNoProcess, IsNoProgram, IsNoInitMod,
                        IsNoForeign, ModName, moduleindex);
	 DeclareProcedure
	    (IsExtern, FALSE, None,
             ModName, NumberOfInitProc, 
             moduleindex, 0, UndefProcIndex, procindex);
	 PreCall (0);
	 ProcedureConstant (procindex, ProcOperand);
	 Call (ProcOperand);
	 PostCall (0);
        END;
      END;
%)
%( ~ Modula_P
      IF NOT module^.IsForeignModule THEN
	 (* call init procedure of 'module' *)
	 GetIdentRepr(module^.ident, ModName);
	 DeclareModule (TRUE, ModName, moduleindex);
	 DeclareProcedure
	    (TRUE, FALSE, None,
             ModName, NumberOfInitProc, moduleindex,
	     0, UndefProcIndex, procindex);
	 PreCall (0);
	 ProcedureConstant (procindex, ProcOperand);
	 Call (ProcOperand);
	 PostCall (0);
      END;
(* -- rh -- *)
%)

      AppendCommand (" "); AppendCommand (module^.path);
      GetIdentRepr (module^.ident, string);
%( IDS
      DeleteFileNameExtension(string);
      LimitFileName(string);
      LowerFileName(string);
%)
      AppendCommand (string); AppendCommand (ObjectSuffix);

   END visit;

   PROCEDURE ReadIdent (VAR ident: Ident);
   (* The next bytes in the Dependency File (upto 0C) built an identifier. *)
   (* Read this identifier an convert it to an 'Ident'.                    *)
   (* Return the result in 'ident'.                                        *)
   VAR high: SHORTCARD; name: ARRAY [0..80] OF CHAR;
   BEGIN
     high := 0; InputChar (name [high]);
     WHILE name[high] <> 0C DO
       INC(high); InputChar (name [high]);
     END;
     CreateIdentFromBuffer(ident, name, high-1);
   END ReadIdent;

   PROCEDURE PrintIdent (ident: Ident);
   (* Print external respresentation of 'ident'. *)
   (* Used for test output.                      *)
   VAR name : ARRAY [0..80] OF CHAR;
   BEGIN
     GetIdentRepr (ident, name); WriteString(name);
   END PrintIdent;

   PROCEDURE WriteDependencyFile;
   (* Write the Dependence File for the current compilation unit. *)
   VAR
      i: SHORTCARD;
      obj: Object;
      modname : ARRAY [0..80] OF CHAR;
      filename : FileName;
   BEGIN
      CreateIdent (IdentSYSTEM, "SYSTEM");
%( Modula_P
      CreateIdent (IdentTRANSPUTER, "TRANSPUTER");
%)
      GetIdentRepr(CompUnitObject^.name, modname);
      BuildLibraryFileName (modname, KindDepFile, filename);
      OpenOutput (DepFile, filename);
      IF NOT Done() THEN
	 ErrorMsgWithId ("cannot write file '@'", filename, UndefSourcePos);
	 RETURN
      END;

      (* Heading : MAGIC, VERSION *)
      OutputShortCard (MAGIC); OutputShortCard (VERSION);

      obj := RootObject^.FirstLocalObject;
      WHILE obj <> NIL DO
%( ~ Modula_P
	 IF (obj^.class = ModuleObj) AND (obj^.name <> IdentSYSTEM)
%)
%( Modula_P
	 IF (obj^.class = ModuleObj) AND ((obj^.name <> IdentSYSTEM) AND
					  (obj^.name <> IdentTRANSPUTER))
%)
	 AND NOT ((obj = CompUnitObject)
	 AND (ThisCompUnitClass = ProgramModuleClass)) THEN
	    OutputInstr (dMODULE);
	    EmitIdent(obj^.name);
	    OutputBool (obj^.IsForeignModule);
%( Modula_P
(* ++ rh ++ *)  (* 90/06 *)
            OutputBool (obj^.IsProcessModule);
%)
	    OutputInt  (obj^.TimeStamp);
	 END;
	 obj  := obj^.next;
      END;
      OutputInstr (dEOF);
      Close (DepFile);
   END WriteDependencyFile;

   PROCEDURE EmitIdent (ident : Ident);
   (* Write the external representation of the idententifier 'ident' *)
   (* to the Dependendy File (terminated with 0C)                    *)
      VAR name : ARRAY [0..80] OF CHAR; i: SHORTCARD;
   BEGIN
      GetIdentRepr (ident, name);
      i := 0; OutputChar (name [i]);
      WHILE name[i] <> 0C DO
	 INC(i); OutputChar (name [i]);
      END;
   END EmitIdent;

%( ~ Transputer
   (***************************************************************************)
   (* Output                                                                  *)
   (***************************************************************************)

   PROCEDURE OutputBytes (VAR b : ARRAY OF BYTE);
   VAR i : CARDINAL;
   BEGIN
      FOR i := HIGH (b) TO 0 BY - 1 DO PutByte (DepFile, b[i]) END
   END OutputBytes;

   PROCEDURE OutputChar ( val : CHAR);
   BEGIN
     OutputBytes (val);
   END OutputChar;

   PROCEDURE OutputBool (b: BOOLEAN);
   BEGIN
     IF b THEN OutputChar ("T") ELSE OutputChar ("F") END
   END OutputBool;

   PROCEDURE OutputInt  (val : INTEGER);
   BEGIN
     OutputBytes (val)
   END OutputInt;

   PROCEDURE OutputCard  (val : CARDINAL);
   BEGIN
     OutputBytes (val)
   END OutputCard;

   PROCEDURE OutputShortCard  (val : SHORTCARD);
   VAR c : CARDINAL;
   BEGIN
     c := val;
     OutputBytes (c) (* IMPORTANT: that CARDINAL 'c' is written. *)
   END OutputShortCard;

   PROCEDURE OutputInstr (instr: Instruction);
   BEGIN
     OutputChar (VAL(CHAR,ORD(instr)));
   END OutputInstr;

   (***************************************************************************)
   (* Input                                                                   *)
   (***************************************************************************)

   PROCEDURE InputBytes (VAR b : ARRAY OF BYTE);
   VAR i : CARDINAL;
   BEGIN
     FOR i := HIGH (b) TO 0 BY - 1 DO GetByte (DepFile, b[i]) END
   END InputBytes;

   PROCEDURE InputChar (VAR val : CHAR);
   BEGIN
     InputBytes (val);
   END InputChar;

   PROCEDURE InputBool (VAR b: BOOLEAN);
   VAR byte : CHAR;
   BEGIN
     InputChar (byte); b := byte = "T";
   END InputBool;

   PROCEDURE InputInt (VAR val : INTEGER);
   BEGIN
     InputBytes (val);  
   END InputInt;

   PROCEDURE InputShortInt (VAR val : SHORTINT);
   VAR i : INTEGER;
   BEGIN
     (* SHORTCARDs are written as CARDINALs !!! *)
     InputBytes (i);  
     val := i;
   END InputShortInt;

   PROCEDURE InputShortCard (VAR val : SHORTCARD);
   VAR c : CARDINAL;
   BEGIN
     (* IMPORTANT, SHORTCARD's are written as CARDINAL's *)
     InputBytes (c);  
     val := c;
   END InputShortCard;

   PROCEDURE InputInstr (VAR instr: Instruction);
   VAR byte: CHAR;
   BEGIN
     InputChar (byte); instr := VAL(Instruction, ORD(byte));
   END InputInstr;
%)

%( Transputer

(******************************************************************************)
(* reading and writeing the refernece files:                                  *)
(* 1. each SHORT / LONG - INT / CARD value is written with four bytes.        *)
(* 2. low byte of the value first, high byte as fourth.                       *)
(* 3. each CHAR, BOOLEAN is written as one byte.                              *)
(* 4. a string is written as a sequence of CHAR, terminated by 0C,            *)
(*    first CHAR as first.                                                    *)
(******************************************************************************)

VAR IsLittleEndianMachine : BOOLEAN;
    (* TRUE:  if the machine address the low  byte in a word *)
    (* FALSE: if the machine address the high byte in a word *)

(**************  output  data  ************************************************)

PROCEDURE OutputBytes (VAR b : ARRAY OF BYTE);
VAR i : CARDINAL;
BEGIN
  IF   IsLittleEndianMachine
  THEN FOR i := 0 TO HIGH (b)        DO PutByte (DepFile, b[i]) END;
  ELSE FOR i := HIGH (b) TO 0 BY - 1 DO PutByte (DepFile, b[i]) END;
  END;
END OutputBytes;

PROCEDURE OutputChar ( val : CHAR);
BEGIN
  OutputBytes (val);
END OutputChar;

PROCEDURE OutputBool (b: BOOLEAN);
BEGIN
  IF b THEN OutputChar ("T") ELSE OutputChar ("F") END
END OutputBool;

PROCEDURE OutputInt  (val : INTEGER);
BEGIN
  OutputBytes (val)
END OutputInt;

PROCEDURE OutputCard  (val : CARDINAL);
BEGIN
  OutputBytes (val)
END OutputCard;

PROCEDURE OutputShortCard  (val : SHORTCARD);
VAR c : CARDINAL;
BEGIN
  c := val;
  OutputBytes (c) (* IMPORTANT: that CARDINAL 'c' is written. *)
END OutputShortCard;

PROCEDURE OutputInstr (instr: Instruction);
BEGIN
  OutputChar (VAL(CHAR,ORD(instr)));
END OutputInstr;

(**************  input   data  ************************************************)

PROCEDURE InputBytes (VAR b : ARRAY OF BYTE);
VAR i : CARDINAL;
BEGIN
  IF   IsLittleEndianMachine
  THEN FOR i := 0 TO HIGH (b)        DO GetByte (DepFile, b[i]) END;
  ELSE FOR i := HIGH (b) TO 0 BY - 1 DO GetByte (DepFile, b[i]) END;
  END;
END InputBytes;

PROCEDURE InputChar (VAR val : CHAR);
BEGIN
  InputBytes (val);
END InputChar;

PROCEDURE InputBool (VAR b: BOOLEAN);
VAR byte : CHAR;
BEGIN
  InputChar (byte); b := byte = "T";
END InputBool;

PROCEDURE InputInt (VAR val : INTEGER);
BEGIN
  InputBytes (val);  
END InputInt;

PROCEDURE InputShortInt (VAR val : SHORTINT);
VAR i : INTEGER;
BEGIN
  (* IMPORTANT, SHORTCARD's are written as CARDINAL's *)
  InputBytes (i);  
  val := i;
END InputShortInt;

PROCEDURE InputShortCard (VAR val : SHORTCARD);
VAR c : CARDINAL;
BEGIN
  (* IMPORTANT, SHORTCARD's are written as CARDINAL's *)
  InputBytes (c);  
  val := c;
END InputShortCard;

PROCEDURE InputInstr (VAR instr: Instruction);
VAR byte: CHAR;
BEGIN
  InputChar (byte); instr := VAL(Instruction, ORD(byte));
END InputInstr;

(********************   initialization  ***************************************)

PROCEDURE CheckIsLittleEndianMachine (VAR IsLittleEndian : BOOLEAN);
VAR i : INTEGER;
   PROCEDURE p (b : ARRAY OF BYTE);
   BEGIN
     IsLittleEndian := b [0] = BYTE (78H);
   END p;
BEGIN
  i := 12345678H;
  p (i);

  (* IF the following compiler errors are raised, then the *)
  (* output routines must be written new                   *)
  IF   TSIZE (INTEGER) # 4
  THEN CompilerError ("DfFiles: TSIZE (INTEGER) # 4"); HALT;
  END;
  IF   TSIZE (CARDINAL) # 4
  THEN CompilerError ("DfFiles: TSIZE (CARDINAL) # 4"); HALT;
  END;
  IF   TSIZE (LONGREAL) # 8
  THEN CompilerError ("DfFiles: TSIZE (LONGREAL) # 8"); HALT;
  END;
  IF   TSIZE (CHAR) # 1 
  THEN CompilerError ("DfFiles: TSIZE (CHAR) # 1"); HALT;
  END;
  IF   TSIZE (BITSET) # 4 
  THEN CompilerError ("DfFiles: TSIZE (BITSET) # 1"); HALT;
  END;
END CheckIsLittleEndianMachine;
%)

   (* handling of linker parameter  *)

   VAR ActualCommandLength : CARDINAL;

   PROCEDURE AssignCommand (VAR src : ARRAY OF CHAR);
   (* command := src                                 *)
   (* if command is too small, program is terminated *)
   BEGIN
     ActualCommandLength := Strings.Length (src)+1; (* ms 7/90 *)
     IF   ActualCommandLength > MaxCommandLength
     THEN ErrorText;
          HALT
     (* ELSE Strings.Assign (command^, src); *)
     ELSE Strings.Append(command^, src); (* ms 6/90 *)
     END;
   END AssignCommand;

   PROCEDURE AppendCommand (VAR suffix : ARRAY OF CHAR);
   (* command := command & suffix                    *)
   (* if command is too small, program is terminated *)
   VAR i    : CARDINAL;
   BEGIN
     INC (ActualCommandLength, Strings.Length (suffix));
     IF   ActualCommandLength > AbsMaxCommandLength  (* MaxCommandLength  ms 6/90 *)
     THEN ErrorText;
          HALT  
     (* +++ ms 6/90 +++ *)
     ELSIF ActualCommandLength > MaxCommandLength  THEN
	  save := command;
	  Storage.ALLOCATE(command,ActualCommandLength + IncCommandLength); 
	  IF command = NIL THEN
	     ErrorTextStorage;     (* ms 11/90 *)
	     HALT;
          END;
          FOR i := 0 TO MaxCommandLength-1 DO
	    command^[i] := save^[i];
          END;
          Strings.Append (command^, suffix);
          Storage.DEALLOCATE(save,MaxCommandLength);
          MaxCommandLength := ActualCommandLength + IncCommandLength;
     (* --- ms 6/90 --- *)
     ELSE Strings.Append (command^, suffix);
     END;
   END AppendCommand;

   (* +++ ms 6/90 +++ *)
   PROCEDURE WriteCom (VAR com : ARRAY OF CHAR);
   VAR i : CARDINAL;
   BEGIN
    i := 0;
    WHILE ((com[i] # 0C) AND (i < MaxCommandLength)) DO
      Write(com[i]);
      INC(i);
    END;
   END WriteCom;
   (* --- ms 6/90 --- *)
   (* +++ ms 11/90 +++ *)
   PROCEDURE ErrorTextStorage;
   BEGIN
    WriteLn;
    WriteString (" Storage Restriction : no storage was allocated");
    WriteLn;
   END ErrorTextStorage;
   (* --- ms 11/90 --- *)

   PROCEDURE ErrorText;
   BEGIN
     WriteLn;
     WriteString ("Compiler restriction: too many modules to link.");
     WriteLn;
     WriteString ("  The number of module name characters must be less than ");
     WriteCard   (AbsMaxCommandLength, 5);
     WriteString (".");
     WriteLn;
     WriteString ("  Actual modules tried to link: ");
     WriteLn;
     (* WriteString (command);  ms 6/90 *)
     WriteCom (command^);
     WriteLn;
   END ErrorText;

BEGIN
  DefineOption (StaticOption, 'static', FALSE, TRUE);
%( Transputer
   CheckIsLittleEndianMachine (IsLittleEndianMachine);
%)
%( ~ Modula_P
  Strings.Assign(NameOfRootMapFile, NameOfRootModule);
  Strings.Append(NameOfRootMapFile, MapSuffix);
%( IDS
  LowerFileName(NameOfRootMapFile);
%)
  Strings.Assign(NameOfRootObjectFile, NameOfRootModule);
  Strings.Append(NameOfRootObjectFile, ObjectSuffix);
%( IDS
  LowerFileName(NameOfRootObjectFile);
%)
%)
END McBind.
